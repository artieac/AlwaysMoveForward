#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TheOffWing.AnotherBlog.Core.Entity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="AnotherBlog")]
	public partial class BlogDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertBlogEntryTag(BlogEntryTag instance);
    partial void UpdateBlogEntryTag(BlogEntryTag instance);
    partial void DeleteBlogEntryTag(BlogEntryTag instance);
    partial void InsertBlogUser(BlogUser instance);
    partial void UpdateBlogUser(BlogUser instance);
    partial void DeleteBlogUser(BlogUser instance);
    partial void InsertBlogRollLink(BlogRollLink instance);
    partial void UpdateBlogRollLink(BlogRollLink instance);
    partial void DeleteBlogRollLink(BlogRollLink instance);
    partial void InsertBlog(Blog instance);
    partial void UpdateBlog(Blog instance);
    partial void DeleteBlog(Blog instance);
    partial void InsertSiteInfo(SiteInfo instance);
    partial void UpdateSiteInfo(SiteInfo instance);
    partial void DeleteSiteInfo(SiteInfo instance);
    partial void InsertBlogEntry(BlogEntry instance);
    partial void UpdateBlogEntry(BlogEntry instance);
    partial void DeleteBlogEntry(BlogEntry instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertEntryComment(EntryComment instance);
    partial void UpdateEntryComment(EntryComment instance);
    partial void DeleteEntryComment(EntryComment instance);
    #endregion
		
		public BlogDbDataContext() : 
				base(global::TheOffWing.AnotherBlog.Core.Properties.Settings.Default.AnotherBlogConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BlogDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlogDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlogDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlogDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DbInfo> DbInfos
		{
			get
			{
				return this.GetTable<DbInfo>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<BlogEntryTag> BlogEntryTags
		{
			get
			{
				return this.GetTable<BlogEntryTag>();
			}
		}
		
		public System.Data.Linq.Table<BlogUser> BlogUsers
		{
			get
			{
				return this.GetTable<BlogUser>();
			}
		}
		
		public System.Data.Linq.Table<BlogRollLink> BlogRollLinks
		{
			get
			{
				return this.GetTable<BlogRollLink>();
			}
		}
		
		public System.Data.Linq.Table<Blog> Blogs
		{
			get
			{
				return this.GetTable<Blog>();
			}
		}
		
		public System.Data.Linq.Table<SiteInfo> SiteInfos
		{
			get
			{
				return this.GetTable<SiteInfo>();
			}
		}
		
		public System.Data.Linq.Table<BlogEntry> BlogEntries
		{
			get
			{
				return this.GetTable<BlogEntry>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<EntryComment> EntryComments
		{
			get
			{
				return this.GetTable<EntryComment>();
			}
		}
	}
	
	[Table(Name="dbo.DbInfo")]
	public partial class DbInfo
	{
		
		private int _Version;
		
		public DbInfo()
		{
		}
		
		[Column(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this._Version = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _Name;
		
		private EntitySet<BlogUser> _BlogUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._BlogUsers = new EntitySet<BlogUser>(new Action<BlogUser>(this.attach_BlogUsers), new Action<BlogUser>(this.detach_BlogUsers));
			OnCreated();
		}
		
		[Column(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Role_BlogUser", Storage="_BlogUsers", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<BlogUser> BlogUsers
		{
			get
			{
				return this._BlogUsers;
			}
			set
			{
				this._BlogUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogUsers(BlogUser entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_BlogUsers(BlogUser entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[Table(Name="dbo.Tags")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private int _id;
		
		private int _BlogId;
		
		private EntitySet<BlogEntryTag> _BlogEntryTags;
		
		private EntityRef<Blog> _Blog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    #endregion
		
		public Tag()
		{
			this._BlogEntryTags = new EntitySet<BlogEntryTag>(new Action<BlogEntryTag>(this.attach_BlogEntryTags), new Action<BlogEntryTag>(this.detach_BlogEntryTags));
			this._Blog = default(EntityRef<Blog>);
			OnCreated();
		}
		
		[Column(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_BlogId", DbType="Int NOT NULL")]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					if (this._Blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[Association(Name="Tag_BlogEntryTag", Storage="_BlogEntryTags", ThisKey="id", OtherKey="TagId")]
		public EntitySet<BlogEntryTag> BlogEntryTags
		{
			get
			{
				return this._BlogEntryTags;
			}
			set
			{
				this._BlogEntryTags.Assign(value);
			}
		}
		
		[Association(Name="Blog_Tag", Storage="_Blog", ThisKey="BlogId", OtherKey="BlogId", IsForeignKey=true)]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.Tags.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.Tags.Add(this);
						this._BlogId = value.BlogId;
					}
					else
					{
						this._BlogId = default(int);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogEntryTags(BlogEntryTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_BlogEntryTags(BlogEntryTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
	
	[Table(Name="dbo.BlogEntryTags")]
	public partial class BlogEntryTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TagId;
		
		private int _BlogEntryId;
		
		private EntityRef<Tag> _Tag;
		
		private EntityRef<BlogEntry> _BlogEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    partial void OnBlogEntryIdChanging(int value);
    partial void OnBlogEntryIdChanged();
    #endregion
		
		public BlogEntryTag()
		{
			this._Tag = default(EntityRef<Tag>);
			this._BlogEntry = default(EntityRef<BlogEntry>);
			OnCreated();
		}
		
		[Column(Storage="_TagId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BlogEntryId
		{
			get
			{
				return this._BlogEntryId;
			}
			set
			{
				if ((this._BlogEntryId != value))
				{
					if (this._BlogEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogEntryIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryId = value;
					this.SendPropertyChanged("BlogEntryId");
					this.OnBlogEntryIdChanged();
				}
			}
		}
		
		[Association(Name="Tag_BlogEntryTag", Storage="_Tag", ThisKey="TagId", OtherKey="id", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.BlogEntryTags.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.BlogEntryTags.Add(this);
						this._TagId = value.id;
					}
					else
					{
						this._TagId = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		[Association(Name="BlogEntry_BlogEntryTag", Storage="_BlogEntry", ThisKey="BlogEntryId", OtherKey="EntryId", IsForeignKey=true)]
		public BlogEntry BlogEntry
		{
			get
			{
				return this._BlogEntry.Entity;
			}
			set
			{
				BlogEntry previousValue = this._BlogEntry.Entity;
				if (((previousValue != value) 
							|| (this._BlogEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogEntry.Entity = null;
						previousValue.BlogEntryTags.Remove(this);
					}
					this._BlogEntry.Entity = value;
					if ((value != null))
					{
						value.BlogEntryTags.Add(this);
						this._BlogEntryId = value.EntryId;
					}
					else
					{
						this._BlogEntryId = default(int);
					}
					this.SendPropertyChanged("BlogEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BlogUsers")]
	public partial class BlogUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogId;
		
		private int _UserId;
		
		private int _RoleId;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<Blog> _Blog;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public BlogUser()
		{
			this._Role = default(EntityRef<Role>);
			this._Blog = default(EntityRef<Blog>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_BlogId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					if (this._Blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Association(Name="Role_BlogUser", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.BlogUsers.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.BlogUsers.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[Association(Name="Blog_BlogUser", Storage="_Blog", ThisKey="BlogId", OtherKey="BlogId", IsForeignKey=true)]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.BlogUsers.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.BlogUsers.Add(this);
						this._BlogId = value.BlogId;
					}
					else
					{
						this._BlogId = default(int);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		[Association(Name="User_BlogUser", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BlogUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BlogUsers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BlogRollLinks")]
	public partial class BlogRollLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LinkName;
		
		private string _Url;
		
		private int _BlogId;
		
		private EntityRef<Blog> _Blog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLinkNameChanging(string value);
    partial void OnLinkNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    #endregion
		
		public BlogRollLink()
		{
			this._Blog = default(EntityRef<Blog>);
			OnCreated();
		}
		
		[Column(Storage="_LinkName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LinkName
		{
			get
			{
				return this._LinkName;
			}
			set
			{
				if ((this._LinkName != value))
				{
					this.OnLinkNameChanging(value);
					this.SendPropertyChanging();
					this._LinkName = value;
					this.SendPropertyChanged("LinkName");
					this.OnLinkNameChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_BlogId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					if (this._Blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[Association(Name="Blog_BlogRollLink", Storage="_Blog", ThisKey="BlogId", OtherKey="BlogId", IsForeignKey=true)]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.BlogRollLinks.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.BlogRollLinks.Add(this);
						this._BlogId = value.BlogId;
					}
					else
					{
						this._BlogId = default(int);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Blogs")]
	public partial class Blog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogId;
		
		private string _Name;
		
		private string _Description;
		
		private string _SubFolder;
		
		private string _About;
		
		private string _WelcomeMessage;
		
		private string _ContactEmail;
		
		private EntitySet<Tag> _Tags;
		
		private EntitySet<BlogUser> _BlogUsers;
		
		private EntitySet<BlogRollLink> _BlogRollLinks;
		
		private EntitySet<BlogEntry> _BlogEntries;
		
		private EntitySet<EntryComment> _EntryComments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSubFolderChanging(string value);
    partial void OnSubFolderChanged();
    partial void OnAboutChanging(string value);
    partial void OnAboutChanged();
    partial void OnWelcomeMessageChanging(string value);
    partial void OnWelcomeMessageChanged();
    partial void OnContactEmailChanging(string value);
    partial void OnContactEmailChanged();
    #endregion
		
		public Blog()
		{
			this._Tags = new EntitySet<Tag>(new Action<Tag>(this.attach_Tags), new Action<Tag>(this.detach_Tags));
			this._BlogUsers = new EntitySet<BlogUser>(new Action<BlogUser>(this.attach_BlogUsers), new Action<BlogUser>(this.detach_BlogUsers));
			this._BlogRollLinks = new EntitySet<BlogRollLink>(new Action<BlogRollLink>(this.attach_BlogRollLinks), new Action<BlogRollLink>(this.detach_BlogRollLinks));
			this._BlogEntries = new EntitySet<BlogEntry>(new Action<BlogEntry>(this.attach_BlogEntries), new Action<BlogEntry>(this.detach_BlogEntries));
			this._EntryComments = new EntitySet<EntryComment>(new Action<EntryComment>(this.attach_EntryComments), new Action<EntryComment>(this.detach_EntryComments));
			OnCreated();
		}
		
		[Column(Storage="_BlogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_SubFolder", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SubFolder
		{
			get
			{
				return this._SubFolder;
			}
			set
			{
				if ((this._SubFolder != value))
				{
					this.OnSubFolderChanging(value);
					this.SendPropertyChanging();
					this._SubFolder = value;
					this.SendPropertyChanged("SubFolder");
					this.OnSubFolderChanged();
				}
			}
		}
		
		[Column(Storage="_About", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string About
		{
			get
			{
				return this._About;
			}
			set
			{
				if ((this._About != value))
				{
					this.OnAboutChanging(value);
					this.SendPropertyChanging();
					this._About = value;
					this.SendPropertyChanged("About");
					this.OnAboutChanged();
				}
			}
		}
		
		[Column(Storage="_WelcomeMessage", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string WelcomeMessage
		{
			get
			{
				return this._WelcomeMessage;
			}
			set
			{
				if ((this._WelcomeMessage != value))
				{
					this.OnWelcomeMessageChanging(value);
					this.SendPropertyChanging();
					this._WelcomeMessage = value;
					this.SendPropertyChanged("WelcomeMessage");
					this.OnWelcomeMessageChanged();
				}
			}
		}
		
		[Column(Storage="_ContactEmail", DbType="NVarChar(50)")]
		public string ContactEmail
		{
			get
			{
				return this._ContactEmail;
			}
			set
			{
				if ((this._ContactEmail != value))
				{
					this.OnContactEmailChanging(value);
					this.SendPropertyChanging();
					this._ContactEmail = value;
					this.SendPropertyChanged("ContactEmail");
					this.OnContactEmailChanged();
				}
			}
		}
		
		[Association(Name="Blog_Tag", Storage="_Tags", ThisKey="BlogId", OtherKey="BlogId")]
		public EntitySet<Tag> Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				this._Tags.Assign(value);
			}
		}
		
		[Association(Name="Blog_BlogUser", Storage="_BlogUsers", ThisKey="BlogId", OtherKey="BlogId")]
		public EntitySet<BlogUser> BlogUsers
		{
			get
			{
				return this._BlogUsers;
			}
			set
			{
				this._BlogUsers.Assign(value);
			}
		}
		
		[Association(Name="Blog_BlogRollLink", Storage="_BlogRollLinks", ThisKey="BlogId", OtherKey="BlogId")]
		public EntitySet<BlogRollLink> BlogRollLinks
		{
			get
			{
				return this._BlogRollLinks;
			}
			set
			{
				this._BlogRollLinks.Assign(value);
			}
		}
		
		[Association(Name="Blog_BlogEntry", Storage="_BlogEntries", ThisKey="BlogId", OtherKey="BlogId")]
		public EntitySet<BlogEntry> BlogEntries
		{
			get
			{
				return this._BlogEntries;
			}
			set
			{
				this._BlogEntries.Assign(value);
			}
		}
		
		[Association(Name="Blog_EntryComment", Storage="_EntryComments", ThisKey="BlogId", OtherKey="BlogId")]
		public EntitySet<EntryComment> EntryComments
		{
			get
			{
				return this._EntryComments;
			}
			set
			{
				this._EntryComments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
		
		private void attach_BlogUsers(BlogUser entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_BlogUsers(BlogUser entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
		
		private void attach_BlogRollLinks(BlogRollLink entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_BlogRollLinks(BlogRollLink entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
		
		private void attach_BlogEntries(BlogEntry entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_BlogEntries(BlogEntry entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
		
		private void attach_EntryComments(EntryComment entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_EntryComments(EntryComment entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
	}
	
	[Table(Name="dbo.SiteInfo")]
	public partial class SiteInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _About;
		
		private string _Name;
		
		private string _Url;
		
		private string _ContactEmail;
		
		private int _SiteId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAboutChanging(string value);
    partial void OnAboutChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnContactEmailChanging(string value);
    partial void OnContactEmailChanged();
    partial void OnSiteIdChanging(int value);
    partial void OnSiteIdChanged();
    #endregion
		
		public SiteInfo()
		{
			OnCreated();
		}
		
		[Column(Storage="_About", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string About
		{
			get
			{
				return this._About;
			}
			set
			{
				if ((this._About != value))
				{
					this.OnAboutChanging(value);
					this.SendPropertyChanging();
					this._About = value;
					this.SendPropertyChanged("About");
					this.OnAboutChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_ContactEmail", DbType="NVarChar(50)")]
		public string ContactEmail
		{
			get
			{
				return this._ContactEmail;
			}
			set
			{
				if ((this._ContactEmail != value))
				{
					this.OnContactEmailChanging(value);
					this.SendPropertyChanging();
					this._ContactEmail = value;
					this.SendPropertyChanged("ContactEmail");
					this.OnContactEmailChanged();
				}
			}
		}
		
		[Column(Storage="_SiteId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SiteId
		{
			get
			{
				return this._SiteId;
			}
			set
			{
				if ((this._SiteId != value))
				{
					this.OnSiteIdChanging(value);
					this.SendPropertyChanging();
					this._SiteId = value;
					this.SendPropertyChanged("SiteId");
					this.OnSiteIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BlogEntries")]
	public partial class BlogEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EntryId;
		
		private string _EntryText;
		
		private int _BlogId;
		
		private int _UserId;
		
		private string _Title;
		
		private bool _IsPublished;
		
		private System.DateTime _DatePosted;
		
		private EntitySet<BlogEntryTag> _BlogEntryTags;
		
		private EntitySet<EntryComment> _EntryComments;
		
		private EntityRef<Blog> _Blog;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntryIdChanging(int value);
    partial void OnEntryIdChanged();
    partial void OnEntryTextChanging(string value);
    partial void OnEntryTextChanged();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsPublishedChanging(bool value);
    partial void OnIsPublishedChanged();
    partial void OnDatePostedChanging(System.DateTime value);
    partial void OnDatePostedChanged();
    #endregion
		
		public BlogEntry()
		{
			this._BlogEntryTags = new EntitySet<BlogEntryTag>(new Action<BlogEntryTag>(this.attach_BlogEntryTags), new Action<BlogEntryTag>(this.detach_BlogEntryTags));
			this._EntryComments = new EntitySet<EntryComment>(new Action<EntryComment>(this.attach_EntryComments), new Action<EntryComment>(this.detach_EntryComments));
			this._Blog = default(EntityRef<Blog>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_EntryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EntryId
		{
			get
			{
				return this._EntryId;
			}
			set
			{
				if ((this._EntryId != value))
				{
					this.OnEntryIdChanging(value);
					this.SendPropertyChanging();
					this._EntryId = value;
					this.SendPropertyChanged("EntryId");
					this.OnEntryIdChanged();
				}
			}
		}
		
		[Column(Storage="_EntryText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EntryText
		{
			get
			{
				return this._EntryText;
			}
			set
			{
				if ((this._EntryText != value))
				{
					this.OnEntryTextChanging(value);
					this.SendPropertyChanging();
					this._EntryText = value;
					this.SendPropertyChanged("EntryText");
					this.OnEntryTextChanged();
				}
			}
		}
		
		[Column(Storage="_BlogId", DbType="Int NOT NULL")]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					if (this._Blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsPublished", DbType="Bit NOT NULL")]
		public bool IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this.OnIsPublishedChanging(value);
					this.SendPropertyChanging();
					this._IsPublished = value;
					this.SendPropertyChanged("IsPublished");
					this.OnIsPublishedChanged();
				}
			}
		}
		
		[Column(Storage="_DatePosted", DbType="DateTime NOT NULL")]
		public System.DateTime DatePosted
		{
			get
			{
				return this._DatePosted;
			}
			set
			{
				if ((this._DatePosted != value))
				{
					this.OnDatePostedChanging(value);
					this.SendPropertyChanging();
					this._DatePosted = value;
					this.SendPropertyChanged("DatePosted");
					this.OnDatePostedChanged();
				}
			}
		}
		
		[Association(Name="BlogEntry_BlogEntryTag", Storage="_BlogEntryTags", ThisKey="EntryId", OtherKey="BlogEntryId")]
		public EntitySet<BlogEntryTag> BlogEntryTags
		{
			get
			{
				return this._BlogEntryTags;
			}
			set
			{
				this._BlogEntryTags.Assign(value);
			}
		}
		
		[Association(Name="BlogEntry_EntryComment", Storage="_EntryComments", ThisKey="BlogId", OtherKey="BlogId")]
		public EntitySet<EntryComment> EntryComments
		{
			get
			{
				return this._EntryComments;
			}
			set
			{
				this._EntryComments.Assign(value);
			}
		}
		
		[Association(Name="Blog_BlogEntry", Storage="_Blog", ThisKey="BlogId", OtherKey="BlogId", IsForeignKey=true)]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.BlogEntries.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.BlogEntries.Add(this);
						this._BlogId = value.BlogId;
					}
					else
					{
						this._BlogId = default(int);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		[Association(Name="User_BlogEntry", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BlogEntries.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BlogEntries.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogEntryTags(BlogEntryTag entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntry = this;
		}
		
		private void detach_BlogEntryTags(BlogEntryTag entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntry = null;
		}
		
		private void attach_EntryComments(EntryComment entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntry = this;
		}
		
		private void detach_EntryComments(EntryComment entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntry = null;
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private string _Password;
		
		private int _UserId;
		
		private string _Email;
		
		private bool _ApprovedCommenter;
		
		private bool _IsActive;
		
		private bool _IsSiteAdministrator;
		
		private string _About;
		
		private EntitySet<BlogUser> _BlogUsers;
		
		private EntitySet<BlogEntry> _BlogEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnApprovedCommenterChanging(bool value);
    partial void OnApprovedCommenterChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsSiteAdministratorChanging(bool value);
    partial void OnIsSiteAdministratorChanged();
    partial void OnAboutChanging(string value);
    partial void OnAboutChanged();
    #endregion
		
		public User()
		{
			this._BlogUsers = new EntitySet<BlogUser>(new Action<BlogUser>(this.attach_BlogUsers), new Action<BlogUser>(this.detach_BlogUsers));
			this._BlogEntries = new EntitySet<BlogEntry>(new Action<BlogEntry>(this.attach_BlogEntries), new Action<BlogEntry>(this.detach_BlogEntries));
			OnCreated();
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_ApprovedCommenter", DbType="Bit NOT NULL")]
		public bool ApprovedCommenter
		{
			get
			{
				return this._ApprovedCommenter;
			}
			set
			{
				if ((this._ApprovedCommenter != value))
				{
					this.OnApprovedCommenterChanging(value);
					this.SendPropertyChanging();
					this._ApprovedCommenter = value;
					this.SendPropertyChanged("ApprovedCommenter");
					this.OnApprovedCommenterChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_IsSiteAdministrator", DbType="Bit NOT NULL")]
		public bool IsSiteAdministrator
		{
			get
			{
				return this._IsSiteAdministrator;
			}
			set
			{
				if ((this._IsSiteAdministrator != value))
				{
					this.OnIsSiteAdministratorChanging(value);
					this.SendPropertyChanging();
					this._IsSiteAdministrator = value;
					this.SendPropertyChanged("IsSiteAdministrator");
					this.OnIsSiteAdministratorChanged();
				}
			}
		}
		
		[Column(Storage="_About", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string About
		{
			get
			{
				return this._About;
			}
			set
			{
				if ((this._About != value))
				{
					this.OnAboutChanging(value);
					this.SendPropertyChanging();
					this._About = value;
					this.SendPropertyChanged("About");
					this.OnAboutChanged();
				}
			}
		}
		
		[Association(Name="User_BlogUser", Storage="_BlogUsers", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<BlogUser> BlogUsers
		{
			get
			{
				return this._BlogUsers;
			}
			set
			{
				this._BlogUsers.Assign(value);
			}
		}
		
		[Association(Name="User_BlogEntry", Storage="_BlogEntries", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<BlogEntry> BlogEntries
		{
			get
			{
				return this._BlogEntries;
			}
			set
			{
				this._BlogEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogUsers(BlogUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BlogUsers(BlogUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_BlogEntries(BlogEntry entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BlogEntries(BlogEntry entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.EntryComments")]
	public partial class EntryComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentId;
		
		private int _EntryId;
		
		private string _AuthorEmail;
		
		private int _RelatedComment;
		
		private string _Comment;
		
		private string _AuthorName;
		
		private int _Status;
		
		private string _Link;
		
		private System.DateTime _DatePosted;
		
		private int _BlogId;
		
		private EntityRef<BlogEntry> _BlogEntry;
		
		private EntityRef<Blog> _Blog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIdChanging(int value);
    partial void OnCommentIdChanged();
    partial void OnEntryIdChanging(int value);
    partial void OnEntryIdChanged();
    partial void OnAuthorEmailChanging(string value);
    partial void OnAuthorEmailChanged();
    partial void OnRelatedCommentChanging(int value);
    partial void OnRelatedCommentChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnAuthorNameChanging(string value);
    partial void OnAuthorNameChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnDatePostedChanging(System.DateTime value);
    partial void OnDatePostedChanged();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    #endregion
		
		public EntryComment()
		{
			this._BlogEntry = default(EntityRef<BlogEntry>);
			this._Blog = default(EntityRef<Blog>);
			OnCreated();
		}
		
		[Column(Storage="_CommentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentId
		{
			get
			{
				return this._CommentId;
			}
			set
			{
				if ((this._CommentId != value))
				{
					this.OnCommentIdChanging(value);
					this.SendPropertyChanging();
					this._CommentId = value;
					this.SendPropertyChanged("CommentId");
					this.OnCommentIdChanged();
				}
			}
		}
		
		[Column(Storage="_EntryId", DbType="Int NOT NULL")]
		public int EntryId
		{
			get
			{
				return this._EntryId;
			}
			set
			{
				if ((this._EntryId != value))
				{
					this.OnEntryIdChanging(value);
					this.SendPropertyChanging();
					this._EntryId = value;
					this.SendPropertyChanged("EntryId");
					this.OnEntryIdChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorEmail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AuthorEmail
		{
			get
			{
				return this._AuthorEmail;
			}
			set
			{
				if ((this._AuthorEmail != value))
				{
					this.OnAuthorEmailChanging(value);
					this.SendPropertyChanging();
					this._AuthorEmail = value;
					this.SendPropertyChanged("AuthorEmail");
					this.OnAuthorEmailChanged();
				}
			}
		}
		
		[Column(Storage="_RelatedComment", DbType="Int NOT NULL")]
		public int RelatedComment
		{
			get
			{
				return this._RelatedComment;
			}
			set
			{
				if ((this._RelatedComment != value))
				{
					this.OnRelatedCommentChanging(value);
					this.SendPropertyChanging();
					this._RelatedComment = value;
					this.SendPropertyChanged("RelatedComment");
					this.OnRelatedCommentChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AuthorName
		{
			get
			{
				return this._AuthorName;
			}
			set
			{
				if ((this._AuthorName != value))
				{
					this.OnAuthorNameChanging(value);
					this.SendPropertyChanging();
					this._AuthorName = value;
					this.SendPropertyChanged("AuthorName");
					this.OnAuthorNameChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Link", DbType="NVarChar(100)")]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[Column(Storage="_DatePosted", DbType="DateTime NOT NULL")]
		public System.DateTime DatePosted
		{
			get
			{
				return this._DatePosted;
			}
			set
			{
				if ((this._DatePosted != value))
				{
					this.OnDatePostedChanging(value);
					this.SendPropertyChanging();
					this._DatePosted = value;
					this.SendPropertyChanged("DatePosted");
					this.OnDatePostedChanged();
				}
			}
		}
		
		[Column(Storage="_BlogId", DbType="Int NOT NULL")]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					if (this._BlogEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[Association(Name="BlogEntry_EntryComment", Storage="_BlogEntry", ThisKey="BlogId", OtherKey="BlogId", IsForeignKey=true)]
		public BlogEntry BlogEntry
		{
			get
			{
				return this._BlogEntry.Entity;
			}
			set
			{
				BlogEntry previousValue = this._BlogEntry.Entity;
				if (((previousValue != value) 
							|| (this._BlogEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogEntry.Entity = null;
						previousValue.EntryComments.Remove(this);
					}
					this._BlogEntry.Entity = value;
					if ((value != null))
					{
						value.EntryComments.Add(this);
						this._BlogId = value.BlogId;
					}
					else
					{
						this._BlogId = default(int);
					}
					this.SendPropertyChanged("BlogEntry");
				}
			}
		}
		
		[Association(Name="Blog_EntryComment", Storage="_Blog", ThisKey="BlogId", OtherKey="BlogId", IsForeignKey=true)]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.EntryComments.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.EntryComments.Add(this);
						this._BlogId = value.BlogId;
					}
					else
					{
						this._BlogId = default(int);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
