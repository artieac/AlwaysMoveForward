!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;"undefined"!=typeof window?t=window:"undefined"!=typeof global?t=global:"undefined"!=typeof self&&(t=self),t.less=e()}}(function(){return function e(t,n,r){function i(s,a){if(!n[s]){if(!t[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(o)return o(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[s]={exports:{}};t[s][0].call(c.exports,function(e){var n=t[s][1][e];return i(n?n:e)},c,c.exports,e,t,n,r)}return n[s].exports}for(var o="function"==typeof require&&require,s=0;s<r.length;s++)i(r[s]);return i}({1:[function(e,t){var n=e("./utils").addDataAttr,r=e("./browser");t.exports=function(e,t){n(t,r.currentScript(e)),void 0===t.isFileProtocol&&(t.isFileProtocol=/^(file|(chrome|safari)(-extension)?|resource|qrc|app):/.test(e.location.protocol)),t.async=t.async||!1,t.fileAsync=t.fileAsync||!1,t.poll=t.poll||(t.isFileProtocol?1e3:1500),t.env=t.env||("127.0.0.1"==e.location.hostname||"0.0.0.0"==e.location.hostname||"localhost"==e.location.hostname||e.location.port&&e.location.port.length>0||t.isFileProtocol?"development":"production");var i=/!dumpLineNumbers:(comments|mediaquery|all)/.exec(e.location.hash);i&&(t.dumpLineNumbers=i[1]),void 0===t.useFileCache&&(t.useFileCache=!0),void 0===t.onReady&&(t.onReady=!0)}},{"./browser":3,"./utils":9}],2:[function(e,t){e("promise/polyfill.js");var n=window.less||{};e("./add-default-options")(window,n);var r=t.exports=e("./index")(window,n);n.onReady&&(/!watch/.test(window.location.hash)&&r.watch(),r.pageLoadFinished=r.registerStylesheets().then(function(){return r.refresh("development"===r.env)}))},{"./add-default-options":1,"./index":7,"promise/polyfill.js":"promise/polyfill.js"}],3:[function(e,t){var n=e("./utils");t.exports={createCSS:function(e,t,r){var i=r.href||"",o="less:"+(r.title||n.extractId(i)),s=e.getElementById(o),a=!1,u=e.createElement("style");u.setAttribute("type","text/css"),r.media&&u.setAttribute("media",r.media),u.id=o,u.styleSheet||(u.appendChild(e.createTextNode(t)),a=null!==s&&s.childNodes.length>0&&u.childNodes.length>0&&s.firstChild.nodeValue===u.firstChild.nodeValue);var l=e.getElementsByTagName("head")[0];if(null===s||a===!1){var c=r&&r.nextSibling||null;c?c.parentNode.insertBefore(u,c):l.appendChild(u)}if(s&&a===!1&&s.parentNode.removeChild(s),u.styleSheet)try{u.styleSheet.cssText=t}catch(h){throw new Error("Couldn't reassign styleSheet.cssText.")}},currentScript:function(e){var t=e.document;return t.currentScript||function(){var e=t.getElementsByTagName("script");return e[e.length-1]}()}}},{"./utils":9}],4:[function(e,t){t.exports=function(e,t,n){var r=null;if("development"!==t.env)try{r="undefined"==typeof e.localStorage?null:e.localStorage}catch(i){}return{setCSS:function(e,t,i){if(r){n.info("saving "+e+" to cache.");try{r.setItem(e,i),r.setItem(e+":timestamp",t)}catch(o){n.error('failed to save "'+e+'" to local storage for caching.')}}},getCSS:function(e,t){var n=r&&r.getItem(e),i=r&&r.getItem(e+":timestamp");return i&&t.lastModified&&new Date(t.lastModified).valueOf()===new Date(i).valueOf()?n:void 0}}}},{}],5:[function(e,t){var n=e("./utils"),r=e("./browser");t.exports=function(e,t,i){function o(t,o){var s,a,u="less-error-message:"+n.extractId(o||""),l='<li><label>{line}</label><pre class="{class}">{content}</pre></li>',c=e.document.createElement("div"),h=[],f=t.filename||o,p=f.match(/([^\/]+(\?.*)?)$/)[1];c.id=u,c.className="less-error-message",a="<h3>"+(t.type||"Syntax")+"Error: "+(t.message||"There is an error in your .less file")+'</h3><p>in <a href="'+f+'">'+p+"</a> ";var d=function(e,t,n){void 0!==e.extract[t]&&h.push(l.replace(/\{line\}/,(parseInt(e.line,10)||0)+(t-1)).replace(/\{class\}/,n).replace(/\{content\}/,e.extract[t]))};t.extract&&(d(t,0,""),d(t,1,"line"),d(t,2,""),a+="on line "+t.line+", column "+(t.column+1)+":</p><ul>"+h.join("")+"</ul>"),t.stack&&(t.extract||i.logLevel>=4)&&(a+="<br/>Stack Trace</br />"+t.stack.split("\n").slice(1).join("<br/>")),c.innerHTML=a,r.createCSS(e.document,[".less-error-message ul, .less-error-message li {","list-style-type: none;","margin-right: 15px;","padding: 4px 0;","margin: 0;","}",".less-error-message label {","font-size: 12px;","margin-right: 15px;","padding: 4px 0;","color: #cc7777;","}",".less-error-message pre {","color: #dd6666;","padding: 4px 0;","margin: 0;","display: inline-block;","}",".less-error-message pre.line {","color: #ff0000;","}",".less-error-message h3 {","font-size: 20px;","font-weight: bold;","padding: 15px 0 5px 0;","margin: 0;","}",".less-error-message a {","color: #10a","}",".less-error-message .error {","color: red;","font-weight: bold;","padding-bottom: 2px;","border-bottom: 1px dashed red;","}"].join("\n"),{title:"error-message"}),c.style.cssText=["font-family: Arial, sans-serif","border: 1px solid #e00","background-color: #eee","border-radius: 5px","-webkit-border-radius: 5px","-moz-border-radius: 5px","color: #e00","padding: 15px","margin-bottom: 15px"].join(";"),"development"===i.env&&(s=setInterval(function(){var t=e.document,n=t.body;n&&(t.getElementById(u)?n.replaceChild(c,t.getElementById(u)):n.insertBefore(c,n.firstChild),clearInterval(s))},10))}function s(e,t){i.errorReporting&&"html"!==i.errorReporting?"console"===i.errorReporting?c(e,t):"function"==typeof i.errorReporting&&i.errorReporting("add",e,t):o(e,t)}function a(t){var r=e.document.getElementById("less-error-message:"+n.extractId(t));r&&r.parentNode.removeChild(r)}function u(){}function l(e){i.errorReporting&&"html"!==i.errorReporting?"console"===i.errorReporting?u(e):"function"==typeof i.errorReporting&&i.errorReporting("remove",e):a(e)}function c(e,n){var r="{line} {content}",o=e.filename||n,s=[],a=(e.type||"Syntax")+"Error: "+(e.message||"There is an error in your .less file")+" in "+o+" ",u=function(e,t,n){void 0!==e.extract[t]&&s.push(r.replace(/\{line\}/,(parseInt(e.line,10)||0)+(t-1)).replace(/\{class\}/,n).replace(/\{content\}/,e.extract[t]))};e.extract&&(u(e,0,""),u(e,1,"line"),u(e,2,""),a+="on line "+e.line+", column "+(e.column+1)+":\n"+s.join("\n")),e.stack&&(e.extract||i.logLevel>=4)&&(a+="\nStack Trace\n"+e.stack),t.logger.error(a)}return{add:s,remove:l}}},{"./browser":3,"./utils":9}],6:[function(e,t){t.exports=function(t,n){function r(){if(window.XMLHttpRequest&&!("file:"===window.location.protocol&&"ActiveXObject"in window))return new XMLHttpRequest;try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(e){return n.error("browser doesn't support AJAX."),null}}var i=e("../less/environment/abstract-file-manager.js"),o={},s=function(){};return s.prototype=new i,s.prototype.alwaysMakePathsAbsolute=function(){return!0},s.prototype.join=function(e,t){return e?this.extractUrlParts(t,e).path:t},s.prototype.doXHR=function(e,i,o,s){function a(t,n,r){t.status>=200&&t.status<300?n(t.responseText,t.getResponseHeader("Last-Modified")):"function"==typeof r&&r(t.status,e)}var u=r(),l=t.isFileProtocol?t.fileAsync:t.async;"function"==typeof u.overrideMimeType&&u.overrideMimeType("text/css"),n.debug("XHR: Getting '"+e+"'"),u.open("GET",e,l),u.setRequestHeader("Accept",i||"text/x-less, text/css; q=0.9, */*; q=0.5"),u.send(null),t.isFileProtocol&&!t.fileAsync?0===u.status||u.status>=200&&u.status<300?o(u.responseText):s(u.status,e):l?u.onreadystatechange=function(){4==u.readyState&&a(u,o,s)}:a(u,o,s)},s.prototype.supports=function(){return!0},s.prototype.clearFileCache=function(){o={}},s.prototype.loadFile=function(e,t,n,r,i){t&&!this.isPathAbsolute(e)&&(e=t+e),n=n||{};var s=this.extractUrlParts(e,window.location.href),a=s.url;if(n.useFileCache&&o[a])try{var u=o[a];i(null,{contents:u,filename:a,webInfo:{lastModified:new Date}})}catch(l){i({filename:a,message:"Error loading file "+a+" error was "+l.message})}else this.doXHR(a,n.mime,function(e,t){o[a]=e,i(null,{contents:e,filename:a,webInfo:{lastModified:t}})},function(e,t){i({type:"File",message:"'"+t+"' wasn't found ("+e+")",href:a})})},s}},{"../less/environment/abstract-file-manager.js":14}],7:[function(e,t){var n=e("./utils").addDataAttr,r=e("./browser");t.exports=function(t,i){function o(e){return i.postProcessor&&"function"==typeof i.postProcessor&&(e=i.postProcessor.call(e,e)||e),e}function s(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}function a(e,t){var n=Array.prototype.slice.call(arguments,2);return function(){var r=n.concat(Array.prototype.slice.call(arguments,0));return e.apply(t,r)}}function u(e){for(var t,n=f.getElementsByTagName("style"),r=0;r<n.length;r++)if(t=n[r],t.type.match(w)){var o=s(i);o.modifyVars=e;var u=t.innerHTML||"";o.filename=f.location.href.replace(/#.*$/,""),p.render(u,o,a(function(e,t,n){t?g.add(t,"inline"):(e.type="text/css",e.styleSheet?e.styleSheet.cssText=n.css:e.innerHTML=n.css)},null,t))}}function l(e,t,r,a,u){function l(n){var i=n.contents,s=n.filename,u=n.webInfo,l={currentDirectory:m.getPath(s),filename:s,rootFilename:s,relativeUrls:c.relativeUrls};if(l.entryPath=l.currentDirectory,l.rootpath=c.rootpath||l.currentDirectory,u&&(u.remaining=a,!c.modifyVars)){var h=y.getCSS(s,u);if(!r&&h)return u.local=!0,void t(null,h,i,e,u,s)}g.remove(s),c.rootFileInfo=l,p.render(i,c,function(n,r){n?(n.href=s,t(n)):(r.css=o(r.css),c.modifyVars||y.setCSS(e.href,u.lastModified,r.css),t(null,r.css,i,e,u,s))})}var c=s(i);n(c,e),c.mime=e.type,u&&(c.modifyVars=u),m.loadFile(e.href,null,c,d,function(e,n){return e?void t(e):void l(n)})}function c(e,t,n){for(var r=0;r<p.sheets.length;r++)l(p.sheets[r],e,t,p.sheets.length-(r+1),n)}function h(){"development"===p.env&&(p.watchTimer=setInterval(function(){p.watchMode&&(m.clearFileCache(),c(function(e,n,i,o){e?g.add(e,e.href||o.href):n&&r.createCSS(t.document,n,o)}))},i.poll))}var f=t.document,p=e("../less")();p.options=i;var d=p.environment,v=e("./file-manager")(i,p.logger),m=new v;d.addFileManager(m),p.FileManager=v,e("./log-listener")(p,i);var g=e("./error-reporting")(t,p,i),y=p.cache=i.cache||e("./cache")(t,i,p.logger);i.functions&&p.functions.functionRegistry.addMultiple(i.functions);var w=/^text\/(x-)?less$/;return p.watch=function(){return p.watchMode||(p.env="development",h()),this.watchMode=!0,!0},p.unwatch=function(){return clearInterval(p.watchTimer),this.watchMode=!1,!1},p.registerStylesheets=function(){return new Promise(function(e){var t=f.getElementsByTagName("link");p.sheets=[];for(var n=0;n<t.length;n++)("stylesheet/less"===t[n].rel||t[n].rel.match(/stylesheet/)&&t[n].type.match(w))&&p.sheets.push(t[n]);e()})},p.modifyVars=function(e){return p.refresh(!0,e,!1)},p.refresh=function(e,n,i){return(e||i)&&i!==!1&&m.clearFileCache(),new Promise(function(i,o){var s,a,l;s=a=new Date,c(function(e,n,u,c,h){return e?(g.add(e,e.href||c.href),void o(e)):(p.logger.info(h.local?"loading "+c.href+" from cache.":"rendered "+c.href+" successfully."),r.createCSS(t.document,n,c),p.logger.info("css for "+c.href+" generated in "+(new Date-a)+"ms"),0===h.remaining&&(l=new Date-s,p.logger.info("less has finished. css generated in "+l+"ms"),i({startTime:s,endTime:a,totalMilliseconds:l,sheets:p.sheets.length})),void(a=new Date))},e,n),u(n)})},p.refreshStyles=u,p}},{"../less":29,"./browser":3,"./cache":4,"./error-reporting":5,"./file-manager":6,"./log-listener":8,"./utils":9}],8:[function(e,t){t.exports=function(e,t){var n=4,r=3,i=2,o=1;t.logLevel="undefined"!=typeof t.logLevel?t.logLevel:"development"===t.env?r:o,t.loggers||(t.loggers=[{debug:function(e){t.logLevel>=n&&console.log(e)},info:function(e){t.logLevel>=r&&console.log(e)},warn:function(e){t.logLevel>=i&&console.warn(e)},error:function(e){t.logLevel>=o&&console.error(e)}}]);for(var s=0;s<t.loggers.length;s++)e.logger.addListener(t.loggers[s])}},{}],9:[function(e,t){t.exports={extractId:function(e){return e.replace(/^[a-z-]+:\/+?[^\/]+/,"").replace(/[\?\&]livereload=\w+/,"").replace(/^\//,"").replace(/\.[a-zA-Z]+$/,"").replace(/[^\.\w-]+/g,"-").replace(/\./g,":")},addDataAttr:function(e,t){for(var n in t.dataset)if(t.dataset.hasOwnProperty(n))if("env"===n||"dumpLineNumbers"===n||"rootpath"===n||"errorReporting"===n)e[n]=t.dataset[n];else try{e[n]=JSON.parse(t.dataset[n])}catch(r){}}}},{}],10:[function(e,t){var n={};t.exports=n;var r=function(e,t,n){if(e)for(var r=0;r<n.length;r++)e.hasOwnProperty(n[r])&&(t[n[r]]=e[n[r]])},i=["paths","relativeUrls","rootpath","strictImports","insecure","dumpLineNumbers","compress","syncImport","chunkInput","mime","useFileCache","processImports","reference","pluginManager"];n.Parse=function(e){r(e,this,i),"string"==typeof this.paths&&(this.paths=[this.paths])};var o=["paths","compress","ieCompat","strictMath","strictUnits","sourceMap","importMultiple","urlArgs","javascriptEnabled","pluginManager","importantScope"];n.Eval=function(e,t){r(e,this,o),this.frames=t||[],this.importantScope=this.importantScope||[]},n.Eval.prototype.inParenthesis=function(){this.parensStack||(this.parensStack=[]),this.parensStack.push(!0)},n.Eval.prototype.outOfParenthesis=function(){this.parensStack.pop()},n.Eval.prototype.isMathOn=function(){return this.strictMath?this.parensStack&&this.parensStack.length:!0},n.Eval.prototype.isPathRelative=function(e){return!/^(?:[a-z-]+:|\/|#)/i.test(e)},n.Eval.prototype.normalizePath=function(e){var t,n=e.split("/").reverse();for(e=[];0!==n.length;)switch(t=n.pop()){case".":break;case"..":0===e.length||".."===e[e.length-1]?e.push(t):e.pop();break;default:e.push(t)}return e.join("/")}},{}],11:[function(e,t){t.exports={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgrey:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",grey:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"}},{}],12:[function(e,t){t.exports={colors:e("./colors"),unitConversions:e("./unit-conversions")}},{"./colors":11,"./unit-conversions":13}],13:[function(e,t){t.exports={length:{m:1,cm:.01,mm:.001,"in":.0254,px:.0254/96,pt:.0254/72,pc:.0254/72*12},duration:{s:1,ms:.001},angle:{rad:1/(2*Math.PI),deg:1/360,grad:.0025,turn:1}}},{}],14:[function(e,t){var n=function(){};n.prototype.getPath=function(e){var t=e.lastIndexOf("?");return t>0&&(e=e.slice(0,t)),t=e.lastIndexOf("/"),0>t&&(t=e.lastIndexOf("\\")),0>t?"":e.slice(0,t+1)},n.prototype.tryAppendLessExtension=function(e){return/(\.[a-z]*$)|([\?;].*)$/.test(e)?e:e+".less"},n.prototype.supportsSync=function(){return!1},n.prototype.alwaysMakePathsAbsolute=function(){return!1},n.prototype.isPathAbsolute=function(e){return/^(?:[a-z-]+:|\/|\\|#)/i.test(e)},n.prototype.join=function(e,t){return e?e+t:t},n.prototype.pathDiff=function(e,t){var n,r,i,o,s=this.extractUrlParts(e),a=this.extractUrlParts(t),u="";if(s.hostPart!==a.hostPart)return"";for(r=Math.max(a.directories.length,s.directories.length),n=0;r>n&&a.directories[n]===s.directories[n];n++);for(o=a.directories.slice(n),i=s.directories.slice(n),n=0;n<o.length-1;n++)u+="../";for(n=0;n<i.length-1;n++)u+=i[n]+"/";return u},n.prototype.extractUrlParts=function(e,t){var n,r,i=/^((?:[a-z-]+:)?\/+?(?:[^\/\?#]*\/)|([\/\\]))?((?:[^\/\\\?#]*[\/\\])*)([^\/\\\?#]*)([#\?].*)?$/i,o=e.match(i),s={},a=[];if(!o)throw new Error("Could not parse sheet href - '"+e+"'");if(t&&(!o[1]||o[2])){if(r=t.match(i),!r)throw new Error("Could not parse page url - '"+t+"'");o[1]=o[1]||r[1]||"",o[2]||(o[3]=r[3]+o[3])}if(o[3]){for(a=o[3].replace(/\\/g,"/").split("/"),n=0;n<a.length;n++)"."===a[n]&&(a.splice(n,1),n-=1);for(n=0;n<a.length;n++)".."===a[n]&&n>0&&(a.splice(n-1,2),n-=2)}return s.hostPart=o[1],s.directories=a,s.path=(o[1]||"")+a.join("/"),s.fileUrl=s.path+(o[4]||""),s.url=s.fileUrl+(o[5]||""),s},t.exports=n},{}],15:[function(e,t){var n=e("../logger"),r=function(e,t){this.fileManagers=t||[],e=e||{};for(var n=["encodeBase64","mimeLookup","charsetLookup","getSourceMapGenerator"],r=[],i=r.concat(n),o=0;o<i.length;o++){var s=i[o],a=e[s];a?this[s]=a.bind(e):o<r.length&&this.warn("missing required function in environment - "+s)}};r.prototype.getFileManager=function(e,t,r,i,o){e||n.warn("getFileManager called with no filename.. Please report this issue. continuing."),null==t&&n.warn("getFileManager called with null directory.. Please report this issue. continuing.");var s=this.fileManagers;r.pluginManager&&(s=[].concat(s).concat(r.pluginManager.getFileManagers()));for(var a=s.length-1;a>=0;a--){var u=s[a];if(u[o?"supportsSync":"supports"](e,t,r,i))return u}return null},r.prototype.addFileManager=function(e){this.fileManagers.push(e)},r.prototype.clearFileManagers=function(){this.fileManagers=[]},t.exports=r},{"../logger":31}],16:[function(e){function t(e,t,r){var i,o,s,a,u=t.alpha,l=r.alpha,c=[];s=l+u*(1-l);for(var h=0;3>h;h++)i=t.rgb[h]/255,o=r.rgb[h]/255,a=e(i,o),s&&(a=(l*o+u*(i-l*(i+o-a)))/s),c[h]=255*a;return new n(c,s)}var n=e("../tree/color"),r=e("./function-registry"),i={multiply:function(e,t){return e*t},screen:function(e,t){return e+t-e*t},overlay:function(e,t){return e*=2,1>=e?i.multiply(e,t):i.screen(e-1,t)},softlight:function(e,t){var n=1,r=e;return t>.5&&(r=1,n=e>.25?Math.sqrt(e):((16*e-12)*e+4)*e),e-(1-2*t)*r*(n-e)},hardlight:function(e,t){return i.overlay(t,e)},difference:function(e,t){return Math.abs(e-t)},exclusion:function(e,t){return e+t-2*e*t},average:function(e,t){return(e+t)/2},negation:function(e,t){return 1-Math.abs(e+t-1)}};for(var o in i)i.hasOwnProperty(o)&&(t[o]=t.bind(null,i[o]));r.addMultiple(t)},{"../tree/color":47,"./function-registry":21}],17:[function(e){function t(e){return Math.min(1,Math.max(0,e))}function n(e){return o.hsla(e.h,e.s,e.l,e.a)}function r(e){if(e instanceof s)return parseFloat(e.unit.is("%")?e.value/100:e.value);if("number"==typeof e)return e;throw{type:"Argument",message:"color functions take numbers as parameters"}}function i(e,t){return e instanceof s&&e.unit.is("%")?parseFloat(e.value*t/100):r(e)}var o,s=e("../tree/dimension"),a=e("../tree/color"),u=e("../tree/quoted"),l=e("../tree/anonymous"),c=e("./function-registry");o={rgb:function(e,t,n){return o.rgba(e,t,n,1)},rgba:function(e,t,n,o){var s=[e,t,n].map(function(e){return i(e,255)});return o=r(o),new a(s,o)},hsl:function(e,t,n){return o.hsla(e,t,n,1)},hsla:function(e,n,i,s){function a(e){return e=0>e?e+1:e>1?e-1:e,1>6*e?l+(u-l)*e*6:1>2*e?u:2>3*e?l+(u-l)*(2/3-e)*6:l}e=r(e)%360/360,n=t(r(n)),i=t(r(i)),s=t(r(s));var u=.5>=i?i*(n+1):i+n-i*n,l=2*i-u;return o.rgba(255*a(e+1/3),255*a(e),255*a(e-1/3),s)},hsv:function(e,t,n){return o.hsva(e,t,n,1)},hsva:function(e,t,n,i){e=r(e)%360/360*360,t=r(t),n=r(n),i=r(i);var s,a;s=Math.floor(e/60%6),a=e/60-s;var u=[n,n*(1-t),n*(1-a*t),n*(1-(1-a)*t)],l=[[0,3,1],[2,0,1],[1,0,3],[1,2,0],[3,1,0],[0,1,2]];return o.rgba(255*u[l[s][0]],255*u[l[s][1]],255*u[l[s][2]],i)},hue:function(e){return new s(e.toHSL().h)},saturation:function(e){return new s(100*e.toHSL().s,"%")},lightness:function(e){return new s(100*e.toHSL().l,"%")},hsvhue:function(e){return new s(e.toHSV().h)},hsvsaturation:function(e){return new s(100*e.toHSV().s,"%")},hsvvalue:function(e){return new s(100*e.toHSV().v,"%")},red:function(e){return new s(e.rgb[0])},green:function(e){return new s(e.rgb[1])},blue:function(e){return new s(e.rgb[2])},alpha:function(e){return new s(e.toHSL().a)},luma:function(e){return new s(e.luma()*e.alpha*100,"%")},luminance:function(e){var t=.2126*e.rgb[0]/255+.7152*e.rgb[1]/255+.0722*e.rgb[2]/255;return new s(t*e.alpha*100,"%")},saturate:function(e,r){if(!e.rgb)return null;var i=e.toHSL();return i.s+=r.value/100,i.s=t(i.s),n(i)},desaturate:function(e,r){var i=e.toHSL();return i.s-=r.value/100,i.s=t(i.s),n(i)},lighten:function(e,r){var i=e.toHSL();return i.l+=r.value/100,i.l=t(i.l),n(i)},darken:function(e,r){var i=e.toHSL();return i.l-=r.value/100,i.l=t(i.l),n(i)},fadein:function(e,r){var i=e.toHSL();return i.a+=r.value/100,i.a=t(i.a),n(i)},fadeout:function(e,r){var i=e.toHSL();return i.a-=r.value/100,i.a=t(i.a),n(i)},fade:function(e,r){var i=e.toHSL();return i.a=r.value/100,i.a=t(i.a),n(i)},spin:function(e,t){var r=e.toHSL(),i=(r.h+t.value)%360;return r.h=0>i?360+i:i,n(r)},mix:function(e,t,n){n||(n=new s(50));var r=n.value/100,i=2*r-1,o=e.toHSL().a-t.toHSL().a,u=((i*o==-1?i:(i+o)/(1+i*o))+1)/2,l=1-u,c=[e.rgb[0]*u+t.rgb[0]*l,e.rgb[1]*u+t.rgb[1]*l,e.rgb[2]*u+t.rgb[2]*l],h=e.alpha*r+t.alpha*(1-r);return new a(c,h)},greyscale:function(e){return o.desaturate(e,new s(100))},contrast:function(e,t,n,i){if(!e.rgb)return null;if("undefined"==typeof n&&(n=o.rgba(255,255,255,1)),"undefined"==typeof t&&(t=o.rgba(0,0,0,1)),t.luma()>n.luma()){var s=n;n=t,t=s}return i="undefined"==typeof i?.43:r(i),e.luma()<i?n:t},argb:function(e){return new l(e.toARGB())},color:function(e){if(e instanceof u&&/^#([a-f0-9]{6}|[a-f0-9]{3})$/i.test(e.value))return new a(e.value.slice(1));if(e instanceof a||(e=a.fromKeyword(e.value)))return e.value=void 0,e;throw{type:"Argument",message:"argument must be a color keyword or 3/6 digit hex e.g. #FFF"}},tint:function(e,t){return o.mix(o.rgb(255,255,255),e,t)},shade:function(e,t){return o.mix(o.rgb(0,0,0),e,t)}},c.addMultiple(o)},{"../tree/anonymous":43,"../tree/color":47,"../tree/dimension":53,"../tree/quoted":70,"./function-registry":21}],18:[function(e,t){t.exports=function(t){var n=e("../tree/quoted"),r=e("../tree/url"),i=e("./function-registry"),o=function(e,t){return new r(t,e.index,e.currentFileInfo).eval(e.context)},s=e("../logger");i.add("data-uri",function(e,i){i||(i=e,e=null);var a=e&&e.value,u=i.value,l=this.currentFileInfo,c=l.relativeUrls?l.currentDirectory:l.entryPath,h=u.indexOf("#"),f="";-1!==h&&(f=u.slice(h),u=u.slice(0,h));var p=t.getFileManager(u,c,this.context,t,!0);if(!p)return o(this,i);var d=!1;if(e)d=/;base64$/.test(a);else{if(a=t.mimeLookup(u),"image/svg+xml"===a)d=!1;else{var v=t.charsetLookup(a);d=["US-ASCII","UTF-8"].indexOf(v)<0}d&&(a+=";base64")}var m=p.loadFileSync(u,c,this.context,t);if(!m.contents)return s.warn("Skipped data-uri embedding of "+u+" because file not found"),o(this,i||e);var g=m.contents;if(d&&!t.encodeBase64)return o(this,i);g=d?t.encodeBase64(g):encodeURIComponent(g);var y="data:"+a+","+g+f,w=32768;return y.length>=w&&this.context.ieCompat!==!1?(s.warn("Skipped data-uri embedding of "+u+" because its size ("+y.length+" characters) exceeds IE8-safe "+w+" characters!"),o(this,i||e)):new r(new n('"'+y+'"',y,!1,this.index,this.currentFileInfo),this.index,this.currentFileInfo)})}},{"../logger":31,"../tree/quoted":70,"../tree/url":77,"./function-registry":21}],19:[function(e,t){var n=e("../tree/keyword"),r=e("./function-registry"),i={eval:function(){var e=this.value_,t=this.error_;if(t)throw t;return null!=e?e?n.True:n.False:void 0},value:function(e){this.value_=e},error:function(e){this.error_=e},reset:function(){this.value_=this.error_=null}};r.add("default",i.eval.bind(i)),t.exports=i},{"../tree/keyword":62,"./function-registry":21}],20:[function(e,t){var n=e("./function-registry"),r=function(e,t,r,i){this.name=e.toLowerCase(),this.func=n.get(this.name),this.index=r,this.context=t,this.currentFileInfo=i};r.prototype.isValid=function(){return Boolean(this.func)},r.prototype.call=function(e){return this.func.apply(this,e)},t.exports=r},{"./function-registry":21}],21:[function(e,t){t.exports={_data:{},add:function(e,t){this._data.hasOwnProperty(e),this._data[e]=t},addMultiple:function(e){Object.keys(e).forEach(function(t){this.add(t,e[t])}.bind(this))},get:function(e){return this._data[e]}}},{}],22:[function(e,t){t.exports=function(t){var n={functionRegistry:e("./function-registry"),functionCaller:e("./function-caller")};return e("./default"),e("./color"),e("./color-blending"),e("./data-uri")(t),e("./math"),e("./number"),e("./string"),e("./svg")(t),e("./types"),n}},{"./color":17,"./color-blending":16,"./data-uri":18,"./default":19,"./function-caller":20,"./function-registry":21,"./math":23,"./number":24,"./string":25,"./svg":26,"./types":27}],23:[function(e){function t(e,t,r){if(!(r instanceof n))throw{type:"Argument",message:"argument must be a number"};return null==t?t=r.unit:r=r.unify(),new n(e(parseFloat(r.value)),t)}var n=e("../tree/dimension"),r=e("./function-registry"),i={ceil:null,floor:null,sqrt:null,abs:null,tan:"",sin:"",cos:"",atan:"rad",asin:"rad",acos:"rad"};for(var o in i)i.hasOwnProperty(o)&&(i[o]=t.bind(null,Math[o],i[o]));i.round=function(e,n){var r="undefined"==typeof n?0:n.value;return t(function(e){return e.toFixed(r)},null,e)},r.addMultiple(i)},{"../tree/dimension":53,"./function-registry":21}],24:[function(e){var t=e("../tree/dimension"),n=e("../tree/anonymous"),r=e("./function-registry"),i=function(e,r){switch(r=Array.prototype.slice.call(r),r.length){case 0:throw{type:"Argument",message:"one or more arguments required"}}var i,o,s,a,u,l,c,h,f=[],p={};for(i=0;i<r.length;i++)if(s=r[i],s instanceof t)if(a=""===s.unit.toString()&&void 0!==h?new t(s.value,h).unify():s.unify(),l=""===a.unit.toString()&&void 0!==c?c:a.unit.toString(),c=""!==l&&void 0===c||""!==l&&""===f[0].unify().unit.toString()?l:c,h=""!==l&&void 0===h?s.unit.toString():h,o=void 0!==p[""]&&""!==l&&l===c?p[""]:p[l],void 0!==o)u=""===f[o].unit.toString()&&void 0!==h?new t(f[o].value,h).unify():f[o].unify(),(e&&a.value<u.value||!e&&a.value>u.value)&&(f[o]=s);else{if(void 0!==c&&l!==c)throw{type:"Argument",message:"incompatible types"};p[l]=f.length,f.push(s)}else Array.isArray(r[i].value)&&Array.prototype.push.apply(r,Array.prototype.slice.call(r[i].value));return 1==f.length?f[0]:(r=f.map(function(e){return e.toCSS(this.context)}).join(this.context.compress?",":", "),new n((e?"min":"max")+"("+r+")"))};r.addMultiple({min:function(){return i(!0,arguments)},max:function(){return i(!1,arguments)},convert:function(e,t){return e.convertTo(t.value)},pi:function(){return new t(Math.PI)},mod:function(e,n){return new t(e.value%n.value,e.unit)},pow:function(e,n){if("number"==typeof e&&"number"==typeof n)e=new t(e),n=new t(n);else if(!(e instanceof t&&n instanceof t))throw{type:"Argument",message:"arguments must be numbers"};return new t(Math.pow(e.value,n.value),e.unit)},percentage:function(e){return new t(100*e.value,"%")}})},{"../tree/anonymous":43,"../tree/dimension":53,"./function-registry":21}],25:[function(e){var t=e("../tree/quoted"),n=e("../tree/anonymous"),r=e("../tree/javascript"),i=e("./function-registry");i.addMultiple({e:function(e){return new n(e instanceof r?e.evaluated:e.value)},escape:function(e){return new n(encodeURI(e.value).replace(/=/g,"%3D").replace(/:/g,"%3A").replace(/#/g,"%23").replace(/;/g,"%3B").replace(/\(/g,"%28").replace(/\)/g,"%29"))},replace:function(e,n,r,i){var o=e.value;return o=o.replace(new RegExp(n.value,i?i.value:""),r.value),new t(e.quote||"",o,e.escaped)},"%":function(e){for(var n=Array.prototype.slice.call(arguments,1),r=e.value,i=0;i<n.length;i++)r=r.replace(/%[sda]/i,function(e){var t=e.match(/s/i)?n[i].value:n[i].toCSS();return e.match(/[A-Z]$/)?encodeURIComponent(t):t});return r=r.replace(/%%/g,"%"),new t(e.quote||"",r,e.escaped)}})},{"../tree/anonymous":43,"../tree/javascript":60,"../tree/quoted":70,"./function-registry":21}],26:[function(e,t){t.exports=function(){var t=e("../tree/dimension"),n=e("../tree/color"),r=e("../tree/expression"),i=e("../tree/quoted"),o=e("../tree/url"),s=e("./function-registry");s.add("svg-gradient",function(e){function s(){throw{type:"Argument",message:"svg-gradient expects direction, start_color [start_position], [color position,]..., end_color [end_position]"}}arguments.length<3&&s();var a,u,l,c,h,f,p,d=Array.prototype.slice.call(arguments,1),v="linear",m='x="0" y="0" width="1" height="1"',g={compress:!1},y=e.toCSS(g);switch(y){case"to bottom":a='x1="0%" y1="0%" x2="0%" y2="100%"';break;case"to right":a='x1="0%" y1="0%" x2="100%" y2="0%"';break;case"to bottom right":a='x1="0%" y1="0%" x2="100%" y2="100%"';break;case"to top right":a='x1="0%" y1="100%" x2="100%" y2="0%"';break;case"ellipse":case"ellipse at center":v="radial",a='cx="50%" cy="50%" r="75%"',m='x="-50" y="-50" width="101" height="101"';break;default:throw{type:"Argument",message:"svg-gradient direction must be 'to bottom', 'to right', 'to bottom right', 'to top right' or 'ellipse at center'"}}for(u='<?xml version="1.0" ?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100%" height="100%" viewBox="0 0 1 1" preserveAspectRatio="none"><'+v+'Gradient id="gradient" gradientUnits="userSpaceOnUse" '+a+">",l=0;l<d.length;l+=1)d[l]instanceof r?(c=d[l].value[0],h=d[l].value[1]):(c=d[l],h=void 0),c instanceof n&&((0===l||l+1===d.length)&&void 0===h||h instanceof t)||s(),f=h?h.toCSS(g):0===l?"0%":"100%",p=c.alpha,u+='<stop offset="'+f+'" stop-color="'+c.toRGB()+'"'+(1>p?' stop-opacity="'+p+'"':"")+"/>";return u+="</"+v+"Gradient><rect "+m+' fill="url(#gradient)" /></svg>',u=encodeURIComponent(u),u="data:image/svg+xml,"+u,new o(new i("'"+u+"'",u,!1,this.index,this.currentFileInfo),this.index,this.currentFileInfo)})}},{"../tree/color":47,"../tree/dimension":53,"../tree/expression":56,"../tree/quoted":70,"../tree/url":77,"./function-registry":21}],27:[function(e){var t=e("../tree/keyword"),n=e("../tree/detached-ruleset"),r=e("../tree/dimension"),i=e("../tree/color"),o=e("../tree/quoted"),s=e("../tree/anonymous"),a=e("../tree/url"),u=e("../tree/operation"),l=e("./function-registry"),c=function(e,n){return e instanceof n?t.True:t.False},h=function(e,n){if(void 0===n)throw{type:"Argument",message:"missing the required second argument to isunit."};
if(n="string"==typeof n.value?n.value:n,"string"!=typeof n)throw{type:"Argument",message:"Second argument to isunit should be a unit or a string."};return e instanceof r&&e.unit.is(n)?t.True:t.False},f=function(e){var t=Array.isArray(e.value)?e.value:Array(e);return t.filter(function(e){return"Comment"===e.type?!1:!0})};l.addMultiple({isruleset:function(e){return c(e,n)},iscolor:function(e){return c(e,i)},isnumber:function(e){return c(e,r)},isstring:function(e){return c(e,o)},iskeyword:function(e){return c(e,t)},isurl:function(e){return c(e,a)},ispixel:function(e){return h(e,"px")},ispercentage:function(e){return h(e,"%")},isem:function(e){return h(e,"em")},isunit:h,unit:function(e,n){if(!(e instanceof r))throw{type:"Argument",message:"the first argument to unit must be a number"+(e instanceof u?". Have you forgotten parenthesis?":"")};return n=n?n instanceof t?n.value:n.toCSS():"",new r(e.value,n)},"get-unit":function(e){return new s(e.unit)},extract:function(e,t){return t=t.value-1,f(e)[t]},length:function(e){return new r(f(e).length)}})},{"../tree/anonymous":43,"../tree/color":47,"../tree/detached-ruleset":52,"../tree/dimension":53,"../tree/keyword":62,"../tree/operation":68,"../tree/quoted":70,"../tree/url":77,"./function-registry":21}],28:[function(e,t){var n=e("./contexts"),r=e("./parser/parser");t.exports=function(e){var t=function(e,t){this.rootFilename=t.filename,this.paths=e.paths||[],this.contents={},this.contentsIgnoredChars={},this.mime=e.mime,this.error=null,this.context=e,this.queue=[],this.files={}};return t.prototype.push=function(t,i,o,s,a){var u=this;this.queue.push(t);var l=function(e,n,r){u.queue.splice(u.queue.indexOf(t),1);var i=r===u.rootFilename;s.optional&&e?a(null,{rules:[]},!1,null):(u.files[r]=n,e&&!u.error&&(u.error=e),a(e,n,i,r))},c={relativeUrls:this.context.relativeUrls,entryPath:o.entryPath,rootpath:o.rootpath,rootFilename:o.rootFilename},h=e.getFileManager(t,o.currentDirectory,this.context,e);if(!h)return void l({message:"Could not find a file-manager for "+t});i&&(t=h.tryAppendLessExtension(t));var f=function(e){var t=e.filename,i=e.contents.replace(/^\uFEFF/,"");c.currentDirectory=h.getPath(t),c.relativeUrls&&(c.rootpath=h.join(u.context.rootpath||"",h.pathDiff(c.currentDirectory,c.entryPath)),!h.isPathAbsolute(c.rootpath)&&h.alwaysMakePathsAbsolute()&&(c.rootpath=h.join(c.entryPath,c.rootpath))),c.filename=t;var a=new n.Parse(u.context);a.processImports=!1,u.contents[t]=i,(o.reference||s.reference)&&(c.reference=!0),s.inline?l(null,i,t):new r(a,u,c).parse(i,function(e,n){l(e,n,t)})},p=h.loadFile(t,o.currentDirectory,this.context,e,function(e,t){e?l(e):f(t)});p&&p.then(f,l)},t}},{"./contexts":10,"./parser/parser":36}],29:[function(e,t){t.exports=function(t,n){var r,i,o,s,a,u={version:[2,4,0],data:e("./data"),tree:e("./tree"),Environment:a=e("./environment/environment"),AbstractFileManager:e("./environment/abstract-file-manager"),environment:t=new a(t,n),visitors:e("./visitors"),Parser:e("./parser/parser"),functions:e("./functions")(t),contexts:e("./contexts"),SourceMapOutput:r=e("./source-map-output")(t),SourceMapBuilder:i=e("./source-map-builder")(r,t),ParseTree:o=e("./parse-tree")(i),ImportManager:s=e("./import-manager")(t),render:e("./render")(t,o,s),parse:e("./parse")(t,o,s),LessError:e("./less-error"),transformTree:e("./transform-tree"),utils:e("./utils"),PluginManager:e("./plugin-manager"),logger:e("./logger")};return u}},{"./contexts":10,"./data":12,"./environment/abstract-file-manager":14,"./environment/environment":15,"./functions":22,"./import-manager":28,"./less-error":30,"./logger":31,"./parse":33,"./parse-tree":32,"./parser/parser":36,"./plugin-manager":37,"./render":38,"./source-map-builder":39,"./source-map-output":40,"./transform-tree":41,"./tree":59,"./utils":80,"./visitors":84}],30:[function(e,t){var n=e("./utils"),r=t.exports=function(e,t,r){Error.call(this);var i=e.filename||r;if(t&&i){var o=t.contents[i],s=n.getLocation(e.index,o),a=s.line,u=s.column,l=e.call&&n.getLocation(e.call,o).line,c=o.split("\n");this.type=e.type||"Syntax",this.filename=i,this.index=e.index,this.line="number"==typeof a?a+1:null,this.callLine=l+1,this.callExtract=c[l],this.column=u,this.extract=[c[a-1],c[a],c[a+1]]}this.message=e.message,this.stack=e.stack};if("undefined"==typeof Object.create){var i=function(){};i.prototype=Error.prototype,r.prototype=new i}else r.prototype=Object.create(Error.prototype);r.prototype.constructor=r},{"./utils":80}],31:[function(e,t){t.exports={error:function(e){this._fireEvent("error",e)},warn:function(e){this._fireEvent("warn",e)},info:function(e){this._fireEvent("info",e)},debug:function(e){this._fireEvent("debug",e)},addListener:function(e){this._listeners.push(e)},removeListener:function(e){for(var t=0;t<this._listeners.length;t++)if(this._listeners[t]===e)return void this._listeners.splice(t,1)},_fireEvent:function(e,t){for(var n=0;n<this._listeners.length;n++){var r=this._listeners[n][e];r&&r(t)}},_listeners:[]}},{}],32:[function(e,t){var n=e("./less-error"),r=e("./transform-tree"),i=e("./logger");t.exports=function(e){var t=function(e,t){this.root=e,this.imports=t};return t.prototype.toCSS=function(t){var o,s,a={};try{o=r(this.root,t)}catch(u){throw new n(u,this.imports)}try{var l=Boolean(t.compress);l&&i.warn("The compress option has been deprecated. We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.");var c={compress:l,dumpLineNumbers:t.dumpLineNumbers,strictUnits:Boolean(t.strictUnits),numPrecision:8};t.sourceMap?(s=new e(t.sourceMap),a.css=s.toCSS(o,c,this.imports)):a.css=o.toCSS(c)}catch(u){throw new n(u,this.imports)}if(t.pluginManager)for(var h=t.pluginManager.getPostProcessors(),f=0;f<h.length;f++)a.css=h[f].process(a.css,{sourceMap:s,options:t,imports:this.imports});t.sourceMap&&(a.map=s.getExternalSourceMap()),a.imports=[];for(var p in this.imports.files)this.imports.files.hasOwnProperty(p)&&p!==this.imports.rootFilename&&a.imports.push(p);return a},t}},{"./less-error":30,"./logger":31,"./transform-tree":41}],33:[function(e,t){var n,r=e("./contexts"),i=e("./parser/parser"),o=e("./plugin-manager");t.exports=function(t,s,a){var u=function(t,s,l){if(s=s||{},"function"==typeof s&&(l=s,s={}),!l){n||(n="undefined"==typeof Promise?e("promise"):Promise);var c=this;return new n(function(e,n){u.call(c,t,s,function(t,r){t?n(t):e(r)})})}var h,f,p=new o(this);if(p.addPlugins(s.plugins),s.pluginManager=p,h=new r.Parse(s),s.rootFileInfo)f=s.rootFileInfo;else{var d=s.filename||"input",v=d.replace(/[^\/\\]*$/,"");f={filename:d,relativeUrls:h.relativeUrls,rootpath:h.rootpath||"",currentDirectory:v,entryPath:v,rootFilename:d},f.rootpath&&"/"!==f.rootpath.slice(-1)&&(f.rootpath+="/")}var m=new a(h,f);new i(h,m,f).parse(t,function(e,t){return e?l(e):void l(null,t,m,s)},s)};return u}},{"./contexts":10,"./parser/parser":36,"./plugin-manager":37,promise:void 0}],34:[function(e,t){t.exports=function(e,t){function n(t){var n=a-m;512>n&&!t||!n||(v.push(e.slice(m,a+1)),m=a+1)}var r,i,o,s,a,u,l,c,h,f=e.length,p=0,d=0,v=[],m=0;for(a=0;f>a;a++)if(l=e.charCodeAt(a),!(l>=97&&122>=l||34>l))switch(l){case 40:d++,i=a;continue;case 41:if(--d<0)return t("missing opening `(`",a);continue;case 59:d||n();continue;case 123:p++,r=a;continue;case 125:if(--p<0)return t("missing opening `{`",a);p||d||n();continue;case 92:if(f-1>a){a++;continue}return t("unescaped `\\`",a);case 34:case 39:case 96:for(h=0,u=a,a+=1;f>a;a++)if(c=e.charCodeAt(a),!(c>96)){if(c==l){h=1;break}if(92==c){if(a==f-1)return t("unescaped `\\`",a);a++}}if(h)continue;return t("unmatched `"+String.fromCharCode(l)+"`",u);case 47:if(d||a==f-1)continue;if(c=e.charCodeAt(a+1),47==c)for(a+=2;f>a&&(c=e.charCodeAt(a),!(13>=c)||10!=c&&13!=c);a++);else if(42==c){for(o=u=a,a+=2;f-1>a&&(c=e.charCodeAt(a),125==c&&(s=a),42!=c||47!=e.charCodeAt(a+1));a++);if(a==f-1)return t("missing closing `*/`",u);a++}continue;case 42:if(f-1>a&&47==e.charCodeAt(a+1))return t("unmatched `/*`",a);continue}return 0!==p?o>r&&s>o?t("missing closing `}` or `*/`",r):t("missing closing `}`",r):0!==d?t("missing closing `)`",i):(n(!0),v)}},{}],35:[function(e,t){var n=e("./chunker");t.exports=function(){function e(){c.i>u&&(a=a.slice(c.i-u),u=c.i)}var t,r,i,o,s,a,u,l=[],c={};c.save=function(){u=c.i,l.push({current:a,i:c.i,j:r})},c.restore=function(e){(c.i>i||c.i===i&&e&&!o)&&(i=c.i,o=e);var t=l.pop();a=t.current,u=c.i=t.i,r=t.j},c.forget=function(){l.pop()},c.isWhitespace=function(e){var n=c.i+(e||0),r=t.charCodeAt(n);return r===h||r===d||r===f||r===p},c.$=function(n){var r,i,o=typeof n;return"string"===o?t.charAt(c.i)!==n?null:(w(1),n):(e(),(r=n.exec(a))?(i=r[0].length,w(i),"string"==typeof r?r:1===r.length?r[0]:r):null)},c.$re=function(e){c.i>u&&(a=a.slice(c.i-u),u=c.i);var t=e.exec(a);return t?(w(t[0].length),"string"==typeof t?t:1===t.length?t[0]:t):null},c.$char=function(e){return t.charAt(c.i)!==e?null:(w(1),e)};var h=32,f=9,p=10,d=13,v=43,m=44,g=47,y=57;c.autoCommentAbsorb=!0,c.commentStore=[],c.finished=!1;var w=function(e){for(var n,i,o,l=c.i,v=r,m=c.i-u,y=c.i+a.length-m,x=c.i+=e,b=t;c.i<y;c.i++){if(n=b.charCodeAt(c.i),c.autoCommentAbsorb&&n===g){if(i=b.charAt(c.i+1),"/"===i){o={index:c.i,isLineComment:!0};var S=b.indexOf("\n",c.i+1);0>S&&(S=y),c.i=S,o.text=b.substr(o.i,c.i-o.i),c.commentStore.push(o);continue}if("*"===i){var C=b.substr(c.i),k=C.match(/^\/\*(?:[^*]|\*+[^\/*])*\*+\//);if(k){o={index:c.i,text:k[0],isLineComment:!1},c.i+=o.text.length-1,c.commentStore.push(o);continue}}break}if(n!==h&&n!==p&&n!==f&&n!==d)break}if(a=a.slice(e+c.i-x+m),u=c.i,!a.length){if(r<s.length-1)return a=s[++r],w(0),!0;c.finished=!0}return l!==c.i||v!==r};return c.peek=function(e){return"string"==typeof e?t.charAt(c.i)===e:e.test(a)},c.peekChar=function(e){return t.charAt(c.i)===e},c.currentChar=function(){return t.charAt(c.i)},c.getInput=function(){return t},c.peekNotNumeric=function(){var e=t.charCodeAt(c.i);return e>y||v>e||e===g||e===m},c.start=function(e,o,l){t=e,c.i=r=u=i=0,s=o?n(e,l):[e],a=s[0],w(0)},c.end=function(){var e,n=c.i>=t.length;return c.i<i&&(e=o,c.i=i),{isFinished:n,furthest:c.i,furthestPossibleErrorMessage:e,furthestReachedEnd:c.i>=t.length-1,furthestChar:t[c.i]}},c}},{"./chunker":34}],36:[function(e,t){var n=e("../less-error"),r=e("../tree"),i=e("../visitors"),o=e("./parser-input"),s=e("../utils"),a=function u(e,t,a){function l(e,t){var n="[object Function]"===Object.prototype.toString.call(e)?e.call(p):d.$(e);return n?n:void h(t||("string"==typeof e?"expected '"+e+"' got '"+d.currentChar()+"'":"unexpected token"))}function c(e,t){return d.$char(e)?e:void h(t||"expected '"+e+"' got '"+d.currentChar()+"'")}function h(e,r){throw new n({index:d.i,filename:a.filename,type:r||"Syntax",message:e},t)}function f(e){var t=a.filename;return{lineNumber:s.getLocation(e,d.getInput()).line+1,fileName:t}}var p,d=o();return{parse:function(o,s,l){var c,h,f,p,v=null,m="";if(h=l&&l.globalVars?u.serializeVars(l.globalVars)+"\n":"",f=l&&l.modifyVars?"\n"+u.serializeVars(l.modifyVars):"",e.pluginManager)for(var g=e.pluginManager.getPreProcessors(),y=0;y<g.length;y++)o=g[y].process(o,{context:e,imports:t,fileInfo:a});(h||l&&l.banner)&&(m=(l&&l.banner?l.banner:"")+h,p=t.contentsIgnoredChars,p[a.filename]=p[a.filename]||0,p[a.filename]+=m.length),o=o.replace(/\r\n?/g,"\n"),o=m+o.replace(/^\uFEFF/,"")+f,t.contents[a.filename]=o;try{d.start(o,e.chunkInput,function(e,r){throw n({index:r,type:"Parse",message:e,filename:a.filename},t)}),c=new r.Ruleset(null,this.parsers.primary()),c.root=!0,c.firstRoot=!0}catch(w){return s(new n(w,t,a.filename))}var x=d.end();if(!x.isFinished){var b=x.furthestPossibleErrorMessage;b||(b="Unrecognised input","}"===x.furthestChar?b+=". Possibly missing opening '{'":")"===x.furthestChar?b+=". Possibly missing opening '('":x.furthestReachedEnd&&(b+=". Possibly missing something")),v=new n({type:"Parse",message:b,index:x.furthest,filename:a.filename},t)}var S=function(e){return e=v||e||t.error,e?(e instanceof n||(e=new n(e,t,a.filename)),s(e)):s(null,c)};return e.processImports===!1?S():void new i.ImportVisitor(t,S).run(c)},parsers:p={primary:function(){for(var e,t=this.mixin,n=[];;){for(;;){if(e=this.comment(),!e)break;n.push(e)}if(d.finished)break;if(d.peek("}"))break;if(e=this.extendRule())n=n.concat(e);else if(e=t.definition()||this.rule()||this.ruleset()||t.call()||this.rulesetCall()||this.directive())n.push(e);else if(!d.$re(/^[\s\n]+/)&&!d.$re(/^;+/))break}return n},comment:function(){if(d.commentStore.length){var e=d.commentStore.shift();return new r.Comment(e.text,e.isLineComment,e.index,a)}},entities:{quoted:function(){var e,t=d.i;return e=d.$re(/^(~)?("((?:[^"\\\r\n]|\\.)*)"|'((?:[^'\\\r\n]|\\.)*)')/),e?new r.Quoted(e[2],e[3]||e[4],Boolean(e[1]),t,a):void 0},keyword:function(){var e=d.$re(/^%|^[_A-Za-z-][_A-Za-z0-9-]*/);return e?r.Color.fromKeyword(e)||new r.Keyword(e):void 0},call:function(){var e,t,n,i,o=d.i;if(!d.peek(/^url\(/i))return d.save(),(e=d.$re(/^([\w-]+|%|progid:[\w\.]+)\(/))?(e=e[1],t=e.toLowerCase(),"alpha"===t&&(i=p.alpha())?i:(n=this.arguments(),d.$char(")")?(d.forget(),new r.Call(e,n,o,a)):void d.restore("Could not parse call arguments or missing ')'"))):void d.forget()},arguments:function(){for(var e,t=[];;){if(e=this.assignment()||p.expression(),!e)break;if(t.push(e),!d.$char(","))break}return t},literal:function(){return this.dimension()||this.color()||this.quoted()||this.unicodeDescriptor()},assignment:function(){var e,t;return e=d.$re(/^\w+(?=\s?=)/i),e&&d.$char("=")?(t=p.entity(),t?new r.Assignment(e,t):void 0):void 0},url:function(){var e,t=d.i;return d.autoCommentAbsorb=!1,"u"===d.currentChar()&&d.$re(/^url\(/)?(e=this.quoted()||this.variable()||d.$re(/^(?:(?:\\[\(\)'"])|[^\(\)'"])+/)||"",d.autoCommentAbsorb=!0,c(")"),new r.URL(null!=e.value||e instanceof r.Variable?e:new r.Anonymous(e),t,a)):void(d.autoCommentAbsorb=!0)},variable:function(){var e,t=d.i;return"@"===d.currentChar()&&(e=d.$re(/^@@?[\w-]+/))?new r.Variable(e,t,a):void 0},variableCurly:function(){var e,t=d.i;return"@"===d.currentChar()&&(e=d.$re(/^@\{([\w-]+)\}/))?new r.Variable("@"+e[1],t,a):void 0},color:function(){var e;if("#"===d.currentChar()&&(e=d.$re(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})/))){var t=e.input.match(/^#([\w]+).*/);return t=t[1],t.match(/^[A-Fa-f0-9]+$/)||h("Invalid HEX color code"),new r.Color(e[1])}},dimension:function(){if(!d.peekNotNumeric()){var e=d.$re(/^([+-]?\d*\.?\d+)(%|[a-z]+)?/i);return e?new r.Dimension(e[1],e[2]):void 0}},unicodeDescriptor:function(){var e;return e=d.$re(/^U\+[0-9a-fA-F?]+(\-[0-9a-fA-F?]+)?/),e?new r.UnicodeDescriptor(e[0]):void 0},javascript:function(){var e,t=d.i;return e=d.$re(/^(~)?`([^`]*)`/),e?new r.JavaScript(e[2],Boolean(e[1]),t,a):void 0}},variable:function(){var e;return"@"===d.currentChar()&&(e=d.$re(/^(@[\w-]+)\s*:/))?e[1]:void 0},rulesetCall:function(){var e;return"@"===d.currentChar()&&(e=d.$re(/^(@[\w-]+)\s*\(\s*\)\s*;/))?new r.RulesetCall(e[1]):void 0},extend:function(e){var t,n,i,o,s,a=d.i;if(d.$re(e?/^&:extend\(/:/^:extend\(/)){do{for(i=null,t=null;!(i=d.$re(/^(all)(?=\s*(\)|,))/))&&(n=this.element());)t?t.push(n):t=[n];i=i&&i[1],t||h("Missing target selector for :extend()."),s=new r.Extend(new r.Selector(t),i,a),o?o.push(s):o=[s]}while(d.$char(","));return l(/^\)/),e&&l(/^;/),o}},extendRule:function(){return this.extend(!0)},mixin:{call:function(){var e,t,n,i,o,s,u=d.currentChar(),l=!1,h=d.i;if("."===u||"#"===u){for(d.save();;){if(e=d.i,i=d.$re(/^[#.](?:[\w-]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/),!i)break;n=new r.Element(o,i,e,a),t?t.push(n):t=[n],o=d.$char(">")}return t&&(d.$char("(")&&(s=this.args(!0).args,c(")")),p.important()&&(l=!0),p.end())?(d.forget(),new r.mixin.Call(t,s,h,a,l)):void d.restore()}},args:function(e){var t,n,i,o,s,a,u=p.entities,l={args:null,variadic:!1},c=[],f=[],v=[];for(d.save();;){if(e)a=p.detachedRuleset()||p.expression();else{if(d.commentStore.length=0,"."===d.currentChar()&&d.$re(/^\.{3}/)){l.variadic=!0,d.$char(";")&&!t&&(t=!0),(t?f:v).push({variadic:!0});break}a=u.variable()||u.literal()||u.keyword()}if(!a)break;o=null,a.throwAwayComments&&a.throwAwayComments(),s=a;var m=null;if(e?a.value&&1==a.value.length&&(m=a.value[0]):m=a,m&&m instanceof r.Variable)if(d.$char(":")){if(c.length>0&&(t&&h("Cannot mix ; and , as delimiter types"),n=!0),s=e&&p.detachedRuleset()||p.expression(),!s){if(!e)return d.restore(),l.args=[],l;h("could not understand value for named argument")}o=i=m.name}else{if(!e&&d.$re(/^\.{3}/)){l.variadic=!0,d.$char(";")&&!t&&(t=!0),(t?f:v).push({name:a.name,variadic:!0});break}e||(i=o=m.name,s=null)}s&&c.push(s),v.push({name:o,value:s}),d.$char(",")||(d.$char(";")||t)&&(n&&h("Cannot mix ; and , as delimiter types"),t=!0,c.length>1&&(s=new r.Value(c)),f.push({name:i,value:s}),i=null,c=[],n=!1)}return d.forget(),l.args=t?f:v,l},definition:function(){var e,t,n,i,o=[],s=!1;if(!("."!==d.currentChar()&&"#"!==d.currentChar()||d.peek(/^[^{]*\}/)))if(d.save(),t=d.$re(/^([#.](?:[\w-]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\s*\(/)){e=t[1];var a=this.args(!1);if(o=a.args,s=a.variadic,!d.$char(")"))return void d.restore("Missing closing ')'");if(d.commentStore.length=0,d.$re(/^when/)&&(i=l(p.conditions,"expected condition")),n=p.block())return d.forget(),new r.mixin.Definition(e,o,n,i,s);d.restore()}else d.forget()}},entity:function(){var e=this.entities;return this.comment()||e.literal()||e.variable()||e.url()||e.call()||e.keyword()||e.javascript()},end:function(){return d.$char(";")||d.peek("}")},alpha:function(){var e;if(d.$re(/^opacity=/i))return e=d.$re(/^\d+/),e||(e=l(this.entities.variable,"Could not parse alpha")),c(")"),new r.Alpha(e)},element:function(){var e,t,n,i=d.i;return t=this.combinator(),e=d.$re(/^(?:\d+\.\d+|\d+)%/)||d.$re(/^(?:[.#]?|:*)(?:[\w-]|[^\x00-\x9f]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/)||d.$char("*")||d.$char("&")||this.attribute()||d.$re(/^\([^&()@]+\)/)||d.$re(/^[\.#:](?=@)/)||this.entities.variableCurly(),e||(d.save(),d.$char("(")?(n=this.selector())&&d.$char(")")?(e=new r.Paren(n),d.forget()):d.restore("Missing closing ')'"):d.forget()),e?new r.Element(t,e,i,a):void 0},combinator:function(){var e=d.currentChar();if("/"===e){d.save();var t=d.$re(/^\/[a-z]+\//i);if(t)return d.forget(),new r.Combinator(t);d.restore()}if(">"===e||"+"===e||"~"===e||"|"===e||"^"===e){for(d.i++,"^"===e&&"^"===d.currentChar()&&(e="^^",d.i++);d.isWhitespace();)d.i++;return new r.Combinator(e)}return new r.Combinator(d.isWhitespace(-1)?" ":null)},lessSelector:function(){return this.selector(!0)},selector:function(e){for(var t,n,i,o,s,u,c,f=d.i;(e&&(n=this.extend())||e&&(u=d.$re(/^when/))||(o=this.element()))&&(u?c=l(this.conditions,"expected condition"):c?h("CSS guard can only be used at the end of selector"):n?s=s?s.concat(n):n:(s&&h("Extend can only be used at the end of selector"),i=d.currentChar(),t?t.push(o):t=[o],o=null),"{"!==i&&"}"!==i&&";"!==i&&","!==i&&")"!==i););return t?new r.Selector(t,s,c,f,a):void(s&&h("Extend must be used to extend a selector, it cannot be used on its own"))},attribute:function(){if(d.$char("[")){var e,t,n,i=this.entities;return(e=i.variableCurly())||(e=l(/^(?:[_A-Za-z0-9-\*]*\|)?(?:[_A-Za-z0-9-]|\\.)+/)),n=d.$re(/^[|~*$^]?=/),n&&(t=i.quoted()||d.$re(/^[0-9]+%/)||d.$re(/^[\w-]+/)||i.variableCurly()),c("]"),new r.Attribute(e,n,t)}},block:function(){var e;return d.$char("{")&&(e=this.primary())&&d.$char("}")?e:void 0},blockRuleset:function(){var e=this.block();return e&&(e=new r.Ruleset(null,e)),e},detachedRuleset:function(){var e=this.blockRuleset();return e?new r.DetachedRuleset(e):void 0},ruleset:function(){var t,n,i,o;for(d.save(),e.dumpLineNumbers&&(o=f(d.i));;){if(n=this.lessSelector(),!n)break;if(t?t.push(n):t=[n],d.commentStore.length=0,n.condition&&t.length>1&&h("Guards are only currently allowed on a single selector."),!d.$char(","))break;n.condition&&h("Guards are only currently allowed on a single selector."),d.commentStore.length=0}if(t&&(i=this.block())){d.forget();var s=new r.Ruleset(t,i,e.strictImports);return e.dumpLineNumbers&&(s.debugInfo=o),s}d.restore()},rule:function(t){var n,i,o,s,u,l=d.i,c=d.currentChar();if("."!==c&&"#"!==c&&"&"!==c)if(d.save(),n=this.variable()||this.ruleProperty()){if(u="string"==typeof n,u&&(i=this.detachedRuleset()),d.commentStore.length=0,!i){s=!u&&n.pop().value;var h=!t&&(e.compress||u);if(h&&(i=this.value()),!i&&(i=this.anonymousValue()))return d.forget(),new r.Rule(n,i,!1,s,l,a);h||i||(i=this.value()),o=this.important()}if(i&&this.end())return d.forget(),new r.Rule(n,i,o,s,l,a);if(d.restore(),i&&!t)return this.rule(!0)}else d.forget()},anonymousValue:function(){var e=d.$re(/^([^@+\/'"*`(;{}-]*);/);return e?new r.Anonymous(e[1]):void 0},"import":function(){var e,t,n=d.i,i=d.$re(/^@import?\s+/);if(i){var o=(i?this.importOptions():null)||{};if(e=this.entities.quoted()||this.entities.url())return t=this.mediaFeatures(),d.$(";")||(d.i=n,h("missing semi-colon or unrecognised media features on import")),t=t&&new r.Value(t),new r.Import(e,t,o,n,a);d.i=n,h("malformed import statement")}},importOptions:function(){var e,t,n,r={};if(!d.$char("("))return null;do if(e=this.importOption()){switch(t=e,n=!0,t){case"css":t="less",n=!1;break;case"once":t="multiple",n=!1}if(r[t]=n,!d.$char(","))break}while(e);return c(")"),r},importOption:function(){var e=d.$re(/^(less|css|multiple|once|inline|reference|optional)/);return e?e[1]:void 0},mediaFeature:function(){var e,t,n=this.entities,i=[];d.save();do if(e=n.keyword()||n.variable())i.push(e);else if(d.$char("(")){if(t=this.property(),e=this.value(),!d.$char(")"))return d.restore("Missing closing ')'"),null;if(t&&e)i.push(new r.Paren(new r.Rule(t,e,null,null,d.i,a,!0)));else{if(!e)return d.restore("badly formed media feature definition"),null;i.push(new r.Paren(e))}}while(e);return d.forget(),i.length>0?new r.Expression(i):void 0},mediaFeatures:function(){var e,t=this.entities,n=[];do if(e=this.mediaFeature()){if(n.push(e),!d.$char(","))break}else if(e=t.variable(),e&&(n.push(e),!d.$char(",")))break;while(e);return n.length>0?n:null},media:function(){var t,n,i,o;return e.dumpLineNumbers&&(o=f(d.i)),d.$re(/^@media/)&&(t=this.mediaFeatures(),n=this.block())?(i=new r.Media(n,t,d.i,a),e.dumpLineNumbers&&(i.debugInfo=o),i):void 0},directive:function(){var t,n,i,o,s,u,l,c=d.i,p=!0;if("@"===d.currentChar()){if(n=this["import"]()||this.media())return n;if(d.save(),t=d.$re(/^@[a-z-]+/)){switch(o=t,"-"==t.charAt(1)&&t.indexOf("-",2)>0&&(o="@"+t.slice(t.indexOf("-",2)+1)),o){case"@counter-style":s=!0,p=!0;break;case"@charset":s=!0,p=!1;break;case"@namespace":u=!0,p=!1;break;case"@keyframes":s=!0;break;case"@host":case"@page":case"@document":case"@supports":l=!0}return d.commentStore.length=0,s?(n=this.entity(),n||h("expected "+t+" identifier")):u?(n=this.expression(),n||h("expected "+t+" expression")):l&&(n=(d.$re(/^[^{;]+/)||"").trim(),n&&(n=new r.Anonymous(n))),p&&(i=this.blockRuleset()),i||!p&&n&&d.$char(";")?(d.forget(),new r.Directive(t,n,i,c,a,e.dumpLineNumbers?f(c):null)):void d.restore("directive options not recognised")}}},value:function(){var e,t=[];do if(e=this.expression(),e&&(t.push(e),!d.$char(",")))break;while(e);return t.length>0?new r.Value(t):void 0},important:function(){return"!"===d.currentChar()?d.$re(/^! *important/):void 0},sub:function(){var e,t;return d.save(),d.$char("(")?(e=this.addition(),e&&d.$char(")")?(d.forget(),t=new r.Expression([e]),t.parens=!0,t):void d.restore("Expected ')'")):void d.restore()},multiplication:function(){var e,t,n,i,o;if(e=this.operand()){for(o=d.isWhitespace(-1);;){if(d.peek(/^\/[*\/]/))break;if(d.save(),n=d.$char("/")||d.$char("*"),!n){d.forget();break}if(t=this.operand(),!t){d.restore();break}d.forget(),e.parensInOp=!0,t.parensInOp=!0,i=new r.Operation(n,[i||e,t],o),o=d.isWhitespace(-1)}return i||e}},addition:function(){var e,t,n,i,o;if(e=this.multiplication()){for(o=d.isWhitespace(-1);;){if(n=d.$re(/^[-+]\s+/)||!o&&(d.$char("+")||d.$char("-")),!n)break;if(t=this.multiplication(),!t)break;e.parensInOp=!0,t.parensInOp=!0,i=new r.Operation(n,[i||e,t],o),o=d.isWhitespace(-1)}return i||e}},conditions:function(){var e,t,n,i=d.i;if(e=this.condition()){for(;;){if(!d.peek(/^,\s*(not\s*)?\(/)||!d.$char(","))break;if(t=this.condition(),!t)break;n=new r.Condition("or",n||e,t,i)}return n||e}},condition:function(){var e,t,n,i,o=this.entities,s=d.i,a=!1;return d.$re(/^not/)&&(a=!0),c("("),e=this.addition()||o.keyword()||o.quoted(),e?(i=d.$re(/^(?:>=|<=|=<|[<=>])/),i?(t=this.addition()||o.keyword()||o.quoted(),t?n=new r.Condition(i,e,t,s,a):h("expected expression")):n=new r.Condition("=",e,new r.Keyword("true"),s,a),c(")"),d.$re(/^and/)?new r.Condition("and",n,this.condition()):n):void 0},operand:function(){var e,t=this.entities;d.peek(/^-[@\(]/)&&(e=d.$char("-"));var n=this.sub()||t.dimension()||t.color()||t.variable()||t.call();return e&&(n.parensInOp=!0,n=new r.Negative(n)),n},expression:function(){var e,t,n=[];do e=this.comment(),e?n.push(e):(e=this.addition()||this.entity(),e&&(n.push(e),d.peek(/^\/[\/*]/)||(t=d.$char("/"),t&&n.push(new r.Anonymous(t)))));while(e);return n.length>0?new r.Expression(n):void 0},property:function(){var e=d.$re(/^(\*?-?[_a-zA-Z0-9-]+)\s*:/);return e?e[1]:void 0},ruleProperty:function(){function e(e){var t=d.i,n=d.$re(e);return n?(o.push(t),i.push(n[1])):void 0}var t,n,i=[],o=[];for(d.save(),e(/^(\*?)/);;)if(!e(/^((?:[\w-]+)|(?:@\{[\w-]+\}))/))break;if(i.length>1&&e(/^((?:\+_|\+)?)\s*:/)){for(d.forget(),""===i[0]&&(i.shift(),o.shift()),n=0;n<i.length;n++)t=i[n],i[n]="@"!==t.charAt(0)?new r.Keyword(t):new r.Variable("@"+t.slice(2,-1),o[n],a);return i}d.restore()}}}};a.serializeVars=function(e){var t="";for(var n in e)if(Object.hasOwnProperty.call(e,n)){var r=e[n];t+=("@"===n[0]?"":"@")+n+": "+r+(";"===String(r).slice(-1)?"":";")}return t},t.exports=a},{"../less-error":30,"../tree":59,"../utils":80,"../visitors":84,"./parser-input":35}],37:[function(e,t){var n=function(e){this.less=e,this.visitors=[],this.preProcessors=[],this.postProcessors=[],this.installedPlugins=[],this.fileManagers=[]};n.prototype.addPlugins=function(e){if(e)for(var t=0;t<e.length;t++)this.addPlugin(e[t])},n.prototype.addPlugin=function(e){this.installedPlugins.push(e),e.install(this.less,this)},n.prototype.addVisitor=function(e){this.visitors.push(e)},n.prototype.addPreProcessor=function(e,t){var n;for(n=0;n<this.preProcessors.length&&!(this.preProcessors[n].priority>=t);n++);this.preProcessors.splice(n,0,{preProcessor:e,priority:t})},n.prototype.addPostProcessor=function(e,t){var n;for(n=0;n<this.postProcessors.length&&!(this.postProcessors[n].priority>=t);n++);this.postProcessors.splice(n,0,{postProcessor:e,priority:t})},n.prototype.addFileManager=function(e){this.fileManagers.push(e)},n.prototype.getPreProcessors=function(){for(var e=[],t=0;t<this.preProcessors.length;t++)e.push(this.preProcessors[t].preProcessor);return e},n.prototype.getPostProcessors=function(){for(var e=[],t=0;t<this.postProcessors.length;t++)e.push(this.postProcessors[t].postProcessor);return e},n.prototype.getVisitors=function(){return this.visitors},n.prototype.getFileManagers=function(){return this.fileManagers},t.exports=n},{}],38:[function(e,t){var n;t.exports=function(t,r){var i=function(t,o,s){if("function"==typeof o&&(s=o,o={}),!s){n||(n="undefined"==typeof Promise?e("promise"):Promise);var a=this;return new n(function(e,n){i.call(a,t,o,function(t,r){t?n(t):e(r)})})}this.parse(t,o,function(e,t,n,i){if(e)return s(e);var o;try{var a=new r(t,n);o=a.toCSS(i)}catch(e){return s(e)}s(null,o)})};return i}},{promise:void 0}],39:[function(e,t){t.exports=function(e,t){var n=function(e){this.options=e};return n.prototype.toCSS=function(t,n,r){var i=new e({contentsIgnoredCharsMap:r.contentsIgnoredChars,rootNode:t,contentsMap:r.contents,sourceMapFilename:this.options.sourceMapFilename,sourceMapURL:this.options.sourceMapURL,outputFilename:this.options.sourceMapOutputFilename,sourceMapBasepath:this.options.sourceMapBasepath,sourceMapRootpath:this.options.sourceMapRootpath,outputSourceFiles:this.options.outputSourceFiles,sourceMapGenerator:this.options.sourceMapGenerator,sourceMapFileInline:this.options.sourceMapFileInline}),o=i.toCSS(n);return this.sourceMap=i.sourceMap,this.sourceMapURL=i.sourceMapURL,this.options.sourceMapInputFilename&&(this.sourceMapInputFilename=i.normalizeFilename(this.options.sourceMapInputFilename)),o+this.getCSSAppendage()},n.prototype.getCSSAppendage=function(){var e=this.sourceMapURL;if(this.options.sourceMapFileInline){if(void 0===this.sourceMap)return"";e="data:application/json;base64,"+t.encodeBase64(this.sourceMap)}return e?"/*# sourceMappingURL="+e+" */":""},n.prototype.getExternalSourceMap=function(){return this.sourceMap},n.prototype.setExternalSourceMap=function(e){this.sourceMap=e},n.prototype.isInline=function(){return this.options.sourceMapFileInline},n.prototype.getSourceMapURL=function(){return this.sourceMapURL},n.prototype.getOutputFilename=function(){return this.options.sourceMapOutputFilename},n.prototype.getInputFilename=function(){return this.sourceMapInputFilename},n}},{}],40:[function(e,t){t.exports=function(e){var t=function(t){this._css=[],this._rootNode=t.rootNode,this._contentsMap=t.contentsMap,this._contentsIgnoredCharsMap=t.contentsIgnoredCharsMap,t.sourceMapFilename&&(this._sourceMapFilename=t.sourceMapFilename.replace(/\\/g,"/")),this._outputFilename=t.outputFilename,this.sourceMapURL=t.sourceMapURL,t.sourceMapBasepath&&(this._sourceMapBasepath=t.sourceMapBasepath.replace(/\\/g,"/")),t.sourceMapRootpath?(this._sourceMapRootpath=t.sourceMapRootpath.replace(/\\/g,"/"),"/"!==this._sourceMapRootpath.charAt(this._sourceMapRootpath.length-1)&&(this._sourceMapRootpath+="/")):this._sourceMapRootpath="",this._outputSourceFiles=t.outputSourceFiles,this._sourceMapGeneratorConstructor=e.getSourceMapGenerator(),this._lineNumber=0,this._column=0};return t.prototype.normalizeFilename=function(e){return e=e.replace(/\\/g,"/"),this._sourceMapBasepath&&0===e.indexOf(this._sourceMapBasepath)&&(e=e.substring(this._sourceMapBasepath.length),("\\"===e.charAt(0)||"/"===e.charAt(0))&&(e=e.substring(1))),(this._sourceMapRootpath||"")+e},t.prototype.add=function(e,t,n,r){if(e){var i,o,s,a,u;if(t){var l=this._contentsMap[t.filename];this._contentsIgnoredCharsMap[t.filename]&&(n-=this._contentsIgnoredCharsMap[t.filename],0>n&&(n=0),l=l.slice(this._contentsIgnoredCharsMap[t.filename])),l=l.substring(0,n),o=l.split("\n"),a=o[o.length-1]}if(i=e.split("\n"),s=i[i.length-1],t)if(r)for(u=0;u<i.length;u++)this._sourceMapGenerator.addMapping({generated:{line:this._lineNumber+u+1,column:0===u?this._column:0},original:{line:o.length+u,column:0===u?a.length:0},source:this.normalizeFilename(t.filename)});else this._sourceMapGenerator.addMapping({generated:{line:this._lineNumber+1,column:this._column},original:{line:o.length,column:a.length},source:this.normalizeFilename(t.filename)});1===i.length?this._column+=s.length:(this._lineNumber+=i.length-1,this._column=s.length),this._css.push(e)}},t.prototype.isEmpty=function(){return 0===this._css.length},t.prototype.toCSS=function(e){if(this._sourceMapGenerator=new this._sourceMapGeneratorConstructor({file:this._outputFilename,sourceRoot:null}),this._outputSourceFiles)for(var t in this._contentsMap)if(this._contentsMap.hasOwnProperty(t)){var n=this._contentsMap[t];this._contentsIgnoredCharsMap[t]&&(n=n.slice(this._contentsIgnoredCharsMap[t])),this._sourceMapGenerator.setSourceContent(this.normalizeFilename(t),n)}if(this._rootNode.genCSS(e,this),this._css.length>0){var r,i=JSON.stringify(this._sourceMapGenerator.toJSON());this.sourceMapURL?r=this.sourceMapURL:this._sourceMapFilename&&(r=this._sourceMapFilename),this.sourceMapURL=r,this.sourceMap=i}return this._css.join("")},t}},{}],41:[function(e,t){var n=e("./contexts"),r=e("./visitors"),i=e("./tree");t.exports=function(e,t){t=t||{};var o,s=t.variables,a=new n.Eval(t);"object"!=typeof s||Array.isArray(s)||(s=Object.keys(s).map(function(e){var t=s[e];return t instanceof i.Value||(t instanceof i.Expression||(t=new i.Expression([t])),t=new i.Value([t])),new i.Rule("@"+e,t,!1,null,0)
}),a.frames=[new i.Ruleset(null,s)]);var u,l=[],c=[new r.JoinSelectorVisitor,new r.ExtendVisitor,new r.ToCSSVisitor({compress:Boolean(t.compress)})];if(t.pluginManager){var h=t.pluginManager.getVisitors();for(u=0;u<h.length;u++){var f=h[u];f.isPreEvalVisitor?l.push(f):f.isPreVisitor?c.splice(0,0,f):c.push(f)}}for(u=0;u<l.length;u++)l[u].run(e);for(o=e.eval(a),u=0;u<c.length;u++)c[u].run(o);return o}},{"./contexts":10,"./tree":59,"./visitors":84}],42:[function(e,t){var n=e("./node"),r=function(e){this.value=e};r.prototype=new n,r.prototype.type="Alpha",r.prototype.accept=function(e){this.value=e.visit(this.value)},r.prototype.eval=function(e){return this.value.eval?new r(this.value.eval(e)):this},r.prototype.genCSS=function(e,t){t.add("alpha(opacity="),this.value.genCSS?this.value.genCSS(e,t):t.add(this.value),t.add(")")},t.exports=r},{"./node":67}],43:[function(e,t){var n=e("./node"),r=function(e,t,n,r,i){this.value=e,this.index=t,this.mapLines=r,this.currentFileInfo=n,this.rulesetLike="undefined"==typeof i?!1:i};r.prototype=new n,r.prototype.type="Anonymous",r.prototype.eval=function(){return new r(this.value,this.index,this.currentFileInfo,this.mapLines,this.rulesetLike)},r.prototype.compare=function(e){return e.toCSS&&this.toCSS()===e.toCSS()?0:void 0},r.prototype.isRulesetLike=function(){return this.rulesetLike},r.prototype.genCSS=function(e,t){t.add(this.value,this.currentFileInfo,this.index,this.mapLines)},t.exports=r},{"./node":67}],44:[function(e,t){var n=e("./node"),r=function(e,t){this.key=e,this.value=t};r.prototype=new n,r.prototype.type="Assignment",r.prototype.accept=function(e){this.value=e.visit(this.value)},r.prototype.eval=function(e){return this.value.eval?new r(this.key,this.value.eval(e)):this},r.prototype.genCSS=function(e,t){t.add(this.key+"="),this.value.genCSS?this.value.genCSS(e,t):t.add(this.value)},t.exports=r},{"./node":67}],45:[function(e,t){var n=e("./node"),r=function(e,t,n){this.key=e,this.op=t,this.value=n};r.prototype=new n,r.prototype.type="Attribute",r.prototype.eval=function(e){return new r(this.key.eval?this.key.eval(e):this.key,this.op,this.value&&this.value.eval?this.value.eval(e):this.value)},r.prototype.genCSS=function(e,t){t.add(this.toCSS(e))},r.prototype.toCSS=function(e){var t=this.key.toCSS?this.key.toCSS(e):this.key;return this.op&&(t+=this.op,t+=this.value.toCSS?this.value.toCSS(e):this.value),"["+t+"]"},t.exports=r},{"./node":67}],46:[function(e,t){var n=e("./node"),r=e("../functions/function-caller"),i=function(e,t,n,r){this.name=e,this.args=t,this.index=n,this.currentFileInfo=r};i.prototype=new n,i.prototype.type="Call",i.prototype.accept=function(e){this.args&&(this.args=e.visitArray(this.args))},i.prototype.eval=function(e){var t,n=this.args.map(function(t){return t.eval(e)}),o=new r(this.name,e,this.index,this.currentFileInfo);if(o.isValid())try{if(t=o.call(n),null!=t)return t}catch(s){throw{type:s.type||"Runtime",message:"error evaluating function `"+this.name+"`"+(s.message?": "+s.message:""),index:this.index,filename:this.currentFileInfo.filename}}return new i(this.name,n,this.index,this.currentFileInfo)},i.prototype.genCSS=function(e,t){t.add(this.name+"(",this.currentFileInfo,this.index);for(var n=0;n<this.args.length;n++)this.args[n].genCSS(e,t),n+1<this.args.length&&t.add(", ");t.add(")")},t.exports=i},{"../functions/function-caller":20,"./node":67}],47:[function(e,t){function n(e,t){return Math.min(Math.max(e,0),t)}function r(e){return"#"+e.map(function(e){return e=n(Math.round(e),255),(16>e?"0":"")+e.toString(16)}).join("")}var i=e("./node"),o=e("../data/colors"),s=function(e,t){this.rgb=Array.isArray(e)?e:6==e.length?e.match(/.{2}/g).map(function(e){return parseInt(e,16)}):e.split("").map(function(e){return parseInt(e+e,16)}),this.alpha="number"==typeof t?t:1};s.prototype=new i,s.prototype.type="Color",s.prototype.luma=function(){var e=this.rgb[0]/255,t=this.rgb[1]/255,n=this.rgb[2]/255;return e=.03928>=e?e/12.92:Math.pow((e+.055)/1.055,2.4),t=.03928>=t?t/12.92:Math.pow((t+.055)/1.055,2.4),n=.03928>=n?n/12.92:Math.pow((n+.055)/1.055,2.4),.2126*e+.7152*t+.0722*n},s.prototype.genCSS=function(e,t){t.add(this.toCSS(e))},s.prototype.toCSS=function(e,t){var r,i,o=e&&e.compress&&!t;if(this.value)return this.value;if(i=this.fround(e,this.alpha),1>i)return"rgba("+this.rgb.map(function(e){return n(Math.round(e),255)}).concat(n(i,1)).join(","+(o?"":" "))+")";if(r=this.toRGB(),o){var s=r.split("");s[1]===s[2]&&s[3]===s[4]&&s[5]===s[6]&&(r="#"+s[1]+s[3]+s[5])}return r},s.prototype.operate=function(e,t,n){for(var r=[],i=this.alpha*(1-n.alpha)+n.alpha,o=0;3>o;o++)r[o]=this._operate(e,t,this.rgb[o],n.rgb[o]);return new s(r,i)},s.prototype.toRGB=function(){return r(this.rgb)},s.prototype.toHSL=function(){var e,t,n=this.rgb[0]/255,r=this.rgb[1]/255,i=this.rgb[2]/255,o=this.alpha,s=Math.max(n,r,i),a=Math.min(n,r,i),u=(s+a)/2,l=s-a;if(s===a)e=t=0;else{switch(t=u>.5?l/(2-s-a):l/(s+a),s){case n:e=(r-i)/l+(i>r?6:0);break;case r:e=(i-n)/l+2;break;case i:e=(n-r)/l+4}e/=6}return{h:360*e,s:t,l:u,a:o}},s.prototype.toHSV=function(){var e,t,n=this.rgb[0]/255,r=this.rgb[1]/255,i=this.rgb[2]/255,o=this.alpha,s=Math.max(n,r,i),a=Math.min(n,r,i),u=s,l=s-a;if(t=0===s?0:l/s,s===a)e=0;else{switch(s){case n:e=(r-i)/l+(i>r?6:0);break;case r:e=(i-n)/l+2;break;case i:e=(n-r)/l+4}e/=6}return{h:360*e,s:t,v:u,a:o}},s.prototype.toARGB=function(){return r([255*this.alpha].concat(this.rgb))},s.prototype.compare=function(e){return e.rgb&&e.rgb[0]===this.rgb[0]&&e.rgb[1]===this.rgb[1]&&e.rgb[2]===this.rgb[2]&&e.alpha===this.alpha?0:void 0},s.fromKeyword=function(e){var t,n=e.toLowerCase();return o.hasOwnProperty(n)?t=new s(o[n].slice(1)):"transparent"===n&&(t=new s([0,0,0],0)),t?(t.value=e,t):void 0},t.exports=s},{"../data/colors":11,"./node":67}],48:[function(e,t){var n=e("./node"),r=function(e){" "===e?(this.value=" ",this.emptyOrWhitespace=!0):(this.value=e?e.trim():"",this.emptyOrWhitespace=""===this.value)};r.prototype=new n,r.prototype.type="Combinator";var i={"":!0," ":!0,"|":!0};r.prototype.genCSS=function(e,t){var n=e.compress||i[this.value]?"":" ";t.add(n+this.value+n)},t.exports=r},{"./node":67}],49:[function(e,t){var n=e("./node"),r=e("./debug-info"),i=function(e,t,n,r){this.value=e,this.isLineComment=t,this.currentFileInfo=r};i.prototype=new n,i.prototype.type="Comment",i.prototype.genCSS=function(e,t){this.debugInfo&&t.add(r(e,this),this.currentFileInfo,this.index),t.add(this.value)},i.prototype.isSilent=function(e){var t=this.currentFileInfo&&this.currentFileInfo.reference&&!this.isReferenced,n=e.compress&&"!"!==this.value[2];return this.isLineComment||t||n},i.prototype.markReferenced=function(){this.isReferenced=!0},i.prototype.isRulesetLike=function(e){return Boolean(e)},t.exports=i},{"./debug-info":51,"./node":67}],50:[function(e,t){var n=e("./node"),r=function(e,t,n,r,i){this.op=e.trim(),this.lvalue=t,this.rvalue=n,this.index=r,this.negate=i};r.prototype=new n,r.prototype.type="Condition",r.prototype.accept=function(e){this.lvalue=e.visit(this.lvalue),this.rvalue=e.visit(this.rvalue)},r.prototype.eval=function(e){var t=function(e,t,r){switch(e){case"and":return t&&r;case"or":return t||r;default:switch(n.compare(t,r)){case-1:return"<"===e||"=<"===e||"<="===e;case 0:return"="===e||">="===e||"=<"===e||"<="===e;case 1:return">"===e||">="===e;default:return!1}}}(this.op,this.lvalue.eval(e),this.rvalue.eval(e));return this.negate?!t:t},t.exports=r},{"./node":67}],51:[function(e,t){var n=function(e,t,r){var i="";if(e.dumpLineNumbers&&!e.compress)switch(e.dumpLineNumbers){case"comments":i=n.asComment(t);break;case"mediaquery":i=n.asMediaQuery(t);break;case"all":i=n.asComment(t)+(r||"")+n.asMediaQuery(t)}return i};n.asComment=function(e){return"/* line "+e.debugInfo.lineNumber+", "+e.debugInfo.fileName+" */\n"},n.asMediaQuery=function(e){var t=e.debugInfo.fileName;return/^[a-z]+:\/\//i.test(t)||(t="file://"+t),"@media -sass-debug-info{filename{font-family:"+t.replace(/([.:\/\\])/g,function(e){return"\\"==e&&(e="/"),"\\"+e})+"}line{font-family:\\00003"+e.debugInfo.lineNumber+"}}\n"},t.exports=n},{}],52:[function(e,t){var n=e("./node"),r=e("../contexts"),i=function(e,t){this.ruleset=e,this.frames=t};i.prototype=new n,i.prototype.type="DetachedRuleset",i.prototype.evalFirst=!0,i.prototype.accept=function(e){this.ruleset=e.visit(this.ruleset)},i.prototype.eval=function(e){var t=this.frames||e.frames.slice(0);return new i(this.ruleset,t)},i.prototype.callEval=function(e){return this.ruleset.eval(this.frames?new r.Eval(e,this.frames.concat(e.frames)):e)},t.exports=i},{"../contexts":10,"./node":67}],53:[function(e,t){var n=e("./node"),r=e("../data/unit-conversions"),i=e("./unit"),o=e("./color"),s=function(e,t){this.value=parseFloat(e),this.unit=t&&t instanceof i?t:new i(t?[t]:void 0)};s.prototype=new n,s.prototype.type="Dimension",s.prototype.accept=function(e){this.unit=e.visit(this.unit)},s.prototype.eval=function(){return this},s.prototype.toColor=function(){return new o([this.value,this.value,this.value])},s.prototype.genCSS=function(e,t){if(e&&e.strictUnits&&!this.unit.isSingular())throw new Error("Multiple units in dimension. Correct the units or use the unit function. Bad unit: "+this.unit.toString());var n=this.fround(e,this.value),r=String(n);if(0!==n&&1e-6>n&&n>-1e-6&&(r=n.toFixed(20).replace(/0+$/,"")),e&&e.compress){if(0===n&&this.unit.isLength())return void t.add(r);n>0&&1>n&&(r=r.substr(1))}t.add(r),this.unit.genCSS(e,t)},s.prototype.operate=function(e,t,n){var r=this._operate(e,t,this.value,n.value),i=this.unit.clone();if("+"===t||"-"===t)if(0===i.numerator.length&&0===i.denominator.length)i.numerator=n.unit.numerator.slice(0),i.denominator=n.unit.denominator.slice(0);else if(0===n.unit.numerator.length&&0===i.denominator.length);else{if(n=n.convertTo(this.unit.usedUnits()),e.strictUnits&&n.unit.toString()!==i.toString())throw new Error("Incompatible units. Change the units or use the unit function. Bad units: '"+i.toString()+"' and '"+n.unit.toString()+"'.");r=this._operate(e,t,this.value,n.value)}else"*"===t?(i.numerator=i.numerator.concat(n.unit.numerator).sort(),i.denominator=i.denominator.concat(n.unit.denominator).sort(),i.cancel()):"/"===t&&(i.numerator=i.numerator.concat(n.unit.denominator).sort(),i.denominator=i.denominator.concat(n.unit.numerator).sort(),i.cancel());return new s(r,i)},s.prototype.compare=function(e){var t,r;if(!(e instanceof s))return void 0;if(this.unit.isEmpty()||e.unit.isEmpty())t=this,r=e;else if(t=this.unify(),r=e.unify(),0!==t.unit.compare(r.unit))return void 0;return n.numericCompare(t.value,r.value)},s.prototype.unify=function(){return this.convertTo({length:"px",duration:"s",angle:"rad"})},s.prototype.convertTo=function(e){var t,n,i,o,a,u=this.value,l=this.unit.clone(),c={};if("string"==typeof e){for(t in r)r[t].hasOwnProperty(e)&&(c={},c[t]=e);e=c}a=function(e,t){return i.hasOwnProperty(e)?(t?u/=i[e]/i[o]:u*=i[e]/i[o],o):e};for(n in e)e.hasOwnProperty(n)&&(o=e[n],i=r[n],l.map(a));return l.cancel(),new s(u,l)},t.exports=s},{"../data/unit-conversions":13,"./color":47,"./node":67,"./unit":76}],54:[function(e,t){var n=e("./node"),r=e("./ruleset"),i=function(e,t,n,r,i,o,s){this.name=e,this.value=t,n&&(this.rules=n,this.rules.allowImports=!0),this.index=r,this.currentFileInfo=i,this.debugInfo=o,this.isReferenced=s};i.prototype=new n,i.prototype.type="Directive",i.prototype.accept=function(e){var t=this.value,n=this.rules;n&&(this.rules=e.visit(n)),t&&(this.value=e.visit(t))},i.prototype.isRulesetLike=function(){return this.rules||!this.isCharset()},i.prototype.isCharset=function(){return"@charset"===this.name},i.prototype.genCSS=function(e,t){var n=this.value,r=this.rules;t.add(this.name,this.currentFileInfo,this.index),n&&(t.add(" "),n.genCSS(e,t)),r?("Ruleset"===r.type&&(r=[r]),this.outputRuleset(e,t,r)):t.add(";")},i.prototype.eval=function(e){var t=this.value,n=this.rules;return t&&(t=t.eval(e)),n&&(n=n.eval(e),n.root=!0),new i(this.name,t,n,this.index,this.currentFileInfo,this.debugInfo,this.isReferenced)},i.prototype.variable=function(e){return this.rules?r.prototype.variable.call(this.rules,e):void 0},i.prototype.find=function(){return this.rules?r.prototype.find.apply(this.rules,arguments):void 0},i.prototype.rulesets=function(){return this.rules?r.prototype.rulesets.apply(this.rules):void 0},i.prototype.markReferenced=function(){var e,t;if(this.isReferenced=!0,this.rules)for(t=this.rules.rules,e=0;e<t.length;e++)t[e].markReferenced&&t[e].markReferenced()},i.prototype.getIsReferenced=function(){return!this.currentFileInfo||!this.currentFileInfo.reference||this.isReferenced},i.prototype.outputRuleset=function(e,t,n){var r,i=n.length;if(e.tabLevel=(0|e.tabLevel)+1,e.compress){for(t.add("{"),r=0;i>r;r++)n[r].genCSS(e,t);return t.add("}"),void e.tabLevel--}var o="\n"+Array(e.tabLevel).join("  "),s=o+"  ";if(i){for(t.add(" {"+s),n[0].genCSS(e,t),r=1;i>r;r++)t.add(s),n[r].genCSS(e,t);t.add(o+"}")}else t.add(" {"+o+"}");e.tabLevel--},t.exports=i},{"./node":67,"./ruleset":73}],55:[function(e,t){var n=e("./node"),r=e("./paren"),i=e("./combinator"),o=function(e,t,n,r){this.combinator=e instanceof i?e:new i(e),this.value="string"==typeof t?t.trim():t?t:"",this.index=n,this.currentFileInfo=r};o.prototype=new n,o.prototype.type="Element",o.prototype.accept=function(e){var t=this.value;this.combinator=e.visit(this.combinator),"object"==typeof t&&(this.value=e.visit(t))},o.prototype.eval=function(e){return new o(this.combinator,this.value.eval?this.value.eval(e):this.value,this.index,this.currentFileInfo)},o.prototype.genCSS=function(e,t){t.add(this.toCSS(e),this.currentFileInfo,this.index)},o.prototype.toCSS=function(e){e=e||{};var t=this.value,n=e.firstSelector;return t instanceof r&&(e.firstSelector=!0),t=t.toCSS?t.toCSS(e):t,e.firstSelector=n,""===t&&"&"===this.combinator.value.charAt(0)?"":this.combinator.toCSS(e)+t},t.exports=o},{"./combinator":48,"./node":67,"./paren":69}],56:[function(e,t){var n=e("./node"),r=e("./paren"),i=e("./comment"),o=function(e){if(this.value=e,!e)throw new Error("Expression requires an array parameter")};o.prototype=new n,o.prototype.type="Expression",o.prototype.accept=function(e){this.value=e.visitArray(this.value)},o.prototype.eval=function(e){var t,n=this.parens&&!this.parensInOp,i=!1;return n&&e.inParenthesis(),this.value.length>1?t=new o(this.value.map(function(t){return t.eval(e)})):1===this.value.length?(this.value[0].parens&&!this.value[0].parensInOp&&(i=!0),t=this.value[0].eval(e)):t=this,n&&e.outOfParenthesis(),this.parens&&this.parensInOp&&!e.isMathOn()&&!i&&(t=new r(t)),t},o.prototype.genCSS=function(e,t){for(var n=0;n<this.value.length;n++)this.value[n].genCSS(e,t),n+1<this.value.length&&t.add(" ")},o.prototype.throwAwayComments=function(){this.value=this.value.filter(function(e){return!(e instanceof i)})},t.exports=o},{"./comment":49,"./node":67,"./paren":69}],57:[function(e,t){var n=e("./node"),r=function i(e,t,n){switch(this.selector=e,this.option=t,this.index=n,this.object_id=i.next_id++,this.parent_ids=[this.object_id],t){case"all":this.allowBefore=!0,this.allowAfter=!0;break;default:this.allowBefore=!1,this.allowAfter=!1}};r.next_id=0,r.prototype=new n,r.prototype.type="Extend",r.prototype.accept=function(e){this.selector=e.visit(this.selector)},r.prototype.eval=function(e){return new r(this.selector.eval(e),this.option,this.index)},r.prototype.clone=function(){return new r(this.selector,this.option,this.index)},r.prototype.findSelfSelectors=function(e){var t,n,r=[];for(t=0;t<e.length;t++)n=e[t].elements,t>0&&n.length&&""===n[0].combinator.value&&(n[0].combinator.value=" "),r=r.concat(e[t].elements);this.selfSelectors=[{elements:r}]},t.exports=r},{"./node":67}],58:[function(e,t){var n=e("./node"),r=e("./media"),i=e("./url"),o=e("./quoted"),s=e("./ruleset"),a=e("./anonymous"),u=function(e,t,n,r,i){if(this.options=n,this.index=r,this.path=e,this.features=t,this.currentFileInfo=i,void 0!==this.options.less||this.options.inline)this.css=!this.options.less||this.options.inline;else{var o=this.getPath();o&&/[#\.\&\?\/]css([\?;].*)?$/.test(o)&&(this.css=!0)}};u.prototype=new n,u.prototype.type="Import",u.prototype.accept=function(e){this.features&&(this.features=e.visit(this.features)),this.path=e.visit(this.path),!this.options.inline&&this.root&&(this.root=e.visit(this.root))},u.prototype.genCSS=function(e,t){this.css&&(t.add("@import ",this.currentFileInfo,this.index),this.path.genCSS(e,t),this.features&&(t.add(" "),this.features.genCSS(e,t)),t.add(";"))},u.prototype.getPath=function(){return this.path instanceof o?this.path.value:this.path instanceof i?this.path.value.value:null},u.prototype.isVariableImport=function(){var e=this.path;return e instanceof i&&(e=e.value),e instanceof o?e.containsVariables():!0},u.prototype.evalForImport=function(e){var t=this.path;return t instanceof i&&(t=t.value),new u(t.eval(e),this.features,this.options,this.index,this.currentFileInfo)},u.prototype.evalPath=function(e){var t=this.path.eval(e),n=this.currentFileInfo&&this.currentFileInfo.rootpath;if(!(t instanceof i)){if(n){var r=t.value;r&&e.isPathRelative(r)&&(t.value=n+r)}t.value=e.normalizePath(t.value)}return t},u.prototype.eval=function(e){var t,n=this.features&&this.features.eval(e);if(this.skip&&("function"==typeof this.skip&&(this.skip=this.skip()),this.skip))return[];if(this.options.inline){var i=new a(this.root,0,{filename:this.importedFilename},!0,!0);return this.features?new r([i],this.features.value):[i]}if(this.css){var o=new u(this.evalPath(e),n,this.options,this.index);if(!o.css&&this.error)throw this.error;return o}return t=new s(null,this.root.rules.slice(0)),t.evalImports(e),this.features?new r(t.rules,this.features.value):t.rules},t.exports=u},{"./anonymous":43,"./media":63,"./node":67,"./quoted":70,"./ruleset":73,"./url":77}],59:[function(e,t){var n={};n.Node=e("./node"),n.Alpha=e("./alpha"),n.Color=e("./color"),n.Directive=e("./directive"),n.DetachedRuleset=e("./detached-ruleset"),n.Operation=e("./operation"),n.Dimension=e("./dimension"),n.Unit=e("./unit"),n.Keyword=e("./keyword"),n.Variable=e("./variable"),n.Ruleset=e("./ruleset"),n.Element=e("./element"),n.Attribute=e("./attribute"),n.Combinator=e("./combinator"),n.Selector=e("./selector"),n.Quoted=e("./quoted"),n.Expression=e("./expression"),n.Rule=e("./rule"),n.Call=e("./call"),n.URL=e("./url"),n.Import=e("./import"),n.mixin={Call:e("./mixin-call"),Definition:e("./mixin-definition")},n.Comment=e("./comment"),n.Anonymous=e("./anonymous"),n.Value=e("./value"),n.JavaScript=e("./javascript"),n.Assignment=e("./assignment"),n.Condition=e("./condition"),n.Paren=e("./paren"),n.Media=e("./media"),n.UnicodeDescriptor=e("./unicode-descriptor"),n.Negative=e("./negative"),n.Extend=e("./extend"),n.RulesetCall=e("./ruleset-call"),t.exports=n},{"./alpha":42,"./anonymous":43,"./assignment":44,"./attribute":45,"./call":46,"./color":47,"./combinator":48,"./comment":49,"./condition":50,"./detached-ruleset":52,"./dimension":53,"./directive":54,"./element":55,"./expression":56,"./extend":57,"./import":58,"./javascript":60,"./keyword":62,"./media":63,"./mixin-call":64,"./mixin-definition":65,"./negative":66,"./node":67,"./operation":68,"./paren":69,"./quoted":70,"./rule":71,"./ruleset":73,"./ruleset-call":72,"./selector":74,"./unicode-descriptor":75,"./unit":76,"./url":77,"./value":78,"./variable":79}],60:[function(e,t){var n=e("./js-eval-node"),r=e("./dimension"),i=e("./quoted"),o=e("./anonymous"),s=function(e,t,n,r){this.escaped=t,this.expression=e,this.index=n,this.currentFileInfo=r};s.prototype=new n,s.prototype.type="JavaScript",s.prototype.eval=function(e){var t=this.evaluateJavaScript(this.expression,e);return"number"==typeof t?new r(t):"string"==typeof t?new i('"'+t+'"',t,this.escaped,this.index):new o(Array.isArray(t)?t.join(", "):t)},t.exports=s},{"./anonymous":43,"./dimension":53,"./js-eval-node":61,"./quoted":70}],61:[function(e,t){var n=e("./node"),r=e("./variable"),i=function(){};i.prototype=new n,i.prototype.evaluateJavaScript=function(e,t){var n,i=this,o={};if(void 0!==t.javascriptEnabled&&!t.javascriptEnabled)throw{message:"You are using JavaScript, which has been disabled.",filename:this.currentFileInfo.filename,index:this.index};e=e.replace(/@\{([\w-]+)\}/g,function(e,n){return i.jsify(new r("@"+n,i.index,i.currentFileInfo).eval(t))});try{e=new Function("return ("+e+")")}catch(s){throw{message:"JavaScript evaluation error: "+s.message+" from `"+e+"`",filename:this.currentFileInfo.filename,index:this.index}}var a=t.frames[0].variables();for(var u in a)a.hasOwnProperty(u)&&(o[u.slice(1)]={value:a[u].value,toJS:function(){return this.value.eval(t).toCSS()}});try{n=e.call(o)}catch(s){throw{message:"JavaScript evaluation error: '"+s.name+": "+s.message.replace(/["]/g,"'")+"'",filename:this.currentFileInfo.filename,index:this.index}}return n},i.prototype.jsify=function(e){return Array.isArray(e.value)&&e.value.length>1?"["+e.value.map(function(e){return e.toCSS()}).join(", ")+"]":e.toCSS()},t.exports=i},{"./node":67,"./variable":79}],62:[function(e,t){var n=e("./node"),r=function(e){this.value=e};r.prototype=new n,r.prototype.type="Keyword",r.prototype.genCSS=function(e,t){if("%"===this.value)throw{type:"Syntax",message:"Invalid % without number"};t.add(this.value)},r.True=new r("true"),r.False=new r("false"),t.exports=r},{"./node":67}],63:[function(e,t){var n=e("./ruleset"),r=e("./value"),i=e("./element"),o=e("./selector"),s=e("./anonymous"),a=e("./expression"),u=e("./directive"),l=function(e,t,i,o){this.index=i,this.currentFileInfo=o;var s=this.emptySelectors();this.features=new r(t),this.rules=[new n(s,e)],this.rules[0].allowImports=!0};l.prototype=new u,l.prototype.type="Media",l.prototype.isRulesetLike=!0,l.prototype.accept=function(e){this.features&&(this.features=e.visit(this.features)),this.rules&&(this.rules=e.visitArray(this.rules))},l.prototype.genCSS=function(e,t){t.add("@media ",this.currentFileInfo,this.index),this.features.genCSS(e,t),this.outputRuleset(e,t,this.rules)},l.prototype.eval=function(e){e.mediaBlocks||(e.mediaBlocks=[],e.mediaPath=[]);var t=new l(null,[],this.index,this.currentFileInfo);this.debugInfo&&(this.rules[0].debugInfo=this.debugInfo,t.debugInfo=this.debugInfo);var n=!1;e.strictMath||(n=!0,e.strictMath=!0);try{t.features=this.features.eval(e)}finally{n&&(e.strictMath=!1)}return e.mediaPath.push(t),e.mediaBlocks.push(t),e.frames.unshift(this.rules[0]),t.rules=[this.rules[0].eval(e)],e.frames.shift(),e.mediaPath.pop(),0===e.mediaPath.length?t.evalTop(e):t.evalNested(e)},l.prototype.variable=function(e){return n.prototype.variable.call(this.rules[0],e)},l.prototype.find=function(){return n.prototype.find.apply(this.rules[0],arguments)},l.prototype.rulesets=function(){return n.prototype.rulesets.apply(this.rules[0])},l.prototype.emptySelectors=function(){var e=new i("","&",this.index,this.currentFileInfo),t=[new o([e],null,null,this.index,this.currentFileInfo)];return t[0].mediaEmpty=!0,t},l.prototype.markReferenced=function(){var e,t=this.rules[0].rules;for(this.rules[0].markReferenced(),this.isReferenced=!0,e=0;e<t.length;e++)t[e].markReferenced&&t[e].markReferenced()},l.prototype.evalTop=function(e){var t=this;if(e.mediaBlocks.length>1){var r=this.emptySelectors();t=new n(r,e.mediaBlocks),t.multiMedia=!0}return delete e.mediaBlocks,delete e.mediaPath,t},l.prototype.evalNested=function(e){var t,i,o=e.mediaPath.concat([this]);for(t=0;t<o.length;t++)i=o[t].features instanceof r?o[t].features.value:o[t].features,o[t]=Array.isArray(i)?i:[i];return this.features=new r(this.permute(o).map(function(e){for(e=e.map(function(e){return e.toCSS?e:new s(e)}),t=e.length-1;t>0;t--)e.splice(t,0,new s("and"));return new a(e)})),new n([],[])},l.prototype.permute=function(e){if(0===e.length)return[];if(1===e.length)return e[0];for(var t=[],n=this.permute(e.slice(1)),r=0;r<n.length;r++)for(var i=0;i<e[0].length;i++)t.push([e[0][i]].concat(n[r]));return t},l.prototype.bubbleSelectors=function(e){e&&(this.rules=[new n(e.slice(0),[this.rules[0]])])},t.exports=l},{"./anonymous":43,"./directive":54,"./element":55,"./expression":56,"./ruleset":73,"./selector":74,"./value":78}],64:[function(e,t){var n=e("./node"),r=e("./selector"),i=e("./mixin-definition"),o=e("../functions/default"),s=function(e,t,n,i,o){this.selector=new r(e),this.arguments=t&&t.length?t:null,this.index=n,this.currentFileInfo=i,this.important=o};s.prototype=new n,s.prototype.type="MixinCall",s.prototype.accept=function(e){this.selector&&(this.selector=e.visit(this.selector)),this.arguments&&(this.arguments=e.visitArray(this.arguments))},s.prototype.eval=function(e){function t(t,n){var r,i;for(c=0;2>c;c++){for(S[c]=!0,o.value(c),r=0;r<n.length&&S[c];r++)i=n[r],i.matchCondition&&(S[c]=S[c]&&i.matchCondition(null,e));t.matchCondition&&(S[c]=S[c]&&t.matchCondition(a,e))}return S[0]||S[1]?S[0]!=S[1]?S[1]?I:M:k:C}var n,r,s,a,u,l,c,h,f,p,d,v,m,g,y,w=[],x=!1,b=[],S=[],C=-1,k=0,I=1,M=2;for(a=this.arguments&&this.arguments.map(function(t){return{name:t.name,value:t.value.eval(e)}}),y=function(t){return t.matchArgs(null,e)},u=0;u<e.frames.length;u++)if((n=e.frames[u].find(this.selector,null,y)).length>0){for(f=!0,l=0;l<n.length;l++){for(r=n[l].rule,s=n[l].path,h=!1,c=0;c<e.frames.length;c++)if(!(r instanceof i)&&r===(e.frames[c].originalRuleset||e.frames[c])){h=!0;break}h||r.matchArgs(a,e)&&(d={mixin:r,group:t(r,s)},d.group!==C&&b.push(d),x=!0)}for(o.reset(),m=[0,0,0],l=0;l<b.length;l++)m[b[l].group]++;if(m[k]>0)v=M;else if(v=I,m[I]+m[M]>1)throw{type:"Runtime",message:"Ambiguous use of `default()` found when matching for `"+this.format(a)+"`",index:this.index,filename:this.currentFileInfo.filename};for(l=0;l<b.length;l++)if(d=b[l].group,d===k||d===v)try{r=b[l].mixin,r instanceof i||(g=r.originalRuleset||r,r=new i("",[],r.rules,null,!1),r.originalRuleset=g),Array.prototype.push.apply(w,r.evalCall(e,a,this.important).rules)}catch(F){throw{message:F.message,index:this.index,filename:this.currentFileInfo.filename,stack:F.stack}}if(x){if(!this.currentFileInfo||!this.currentFileInfo.reference)for(u=0;u<w.length;u++)p=w[u],p.markReferenced&&p.markReferenced();return w}}throw f?{type:"Runtime",message:"No matching definition was found for `"+this.format(a)+"`",index:this.index,filename:this.currentFileInfo.filename}:{type:"Name",message:this.selector.toCSS().trim()+" is undefined",index:this.index,filename:this.currentFileInfo.filename}},s.prototype.format=function(e){return this.selector.toCSS().trim()+"("+(e?e.map(function(e){var t="";return e.name&&(t+=e.name+":"),t+=e.value.toCSS?e.value.toCSS():"???"}).join(", "):"")+")"},t.exports=s},{"../functions/default":19,"./mixin-definition":65,"./node":67,"./selector":74}],65:[function(e,t){var n=e("./selector"),r=e("./element"),i=e("./ruleset"),o=e("./rule"),s=e("./expression"),a=e("../contexts"),u=function(e,t,i,o,s,a){this.name=e,this.selectors=[new n([new r(null,e,this.index,this.currentFileInfo)])],this.params=t,this.condition=o,this.variadic=s,this.arity=t.length,this.rules=i,this._lookups={},this.required=t.reduce(function(e,t){return!t.name||t.name&&!t.value?e+1:e},0),this.frames=a};u.prototype=new i,u.prototype.type="MixinDefinition",u.prototype.evalFirst=!0,u.prototype.accept=function(e){this.params&&this.params.length&&(this.params=e.visitArray(this.params)),this.rules=e.visitArray(this.rules),this.condition&&(this.condition=e.visit(this.condition))},u.prototype.evalParams=function(e,t,n,r){var u,l,c,h,f,p,d,v,m=new i(null,null),g=this.params.slice(0),y=0;if(t=new a.Eval(t,[m].concat(t.frames)),n)for(n=n.slice(0),y=n.length,c=0;y>c;c++)if(l=n[c],p=l&&l.name){for(d=!1,h=0;h<g.length;h++)if(!r[h]&&p===g[h].name){r[h]=l.value.eval(e),m.prependRule(new o(p,l.value.eval(e))),d=!0;break}if(d){n.splice(c,1),c--;continue}throw{type:"Runtime",message:"Named argument for "+this.name+" "+n[c].name+" not found"}}for(v=0,c=0;c<g.length;c++)if(!r[c]){if(l=n&&n[v],p=g[c].name)if(g[c].variadic){for(u=[],h=v;y>h;h++)u.push(n[h].value.eval(e));m.prependRule(new o(p,new s(u).eval(e)))}else{if(f=l&&l.value)f=f.eval(e);else{if(!g[c].value)throw{type:"Runtime",message:"wrong number of arguments for "+this.name+" ("+y+" for "+this.arity+")"};f=g[c].value.eval(t),m.resetCache()}m.prependRule(new o(p,f)),r[c]=f}if(g[c].variadic&&n)for(h=v;y>h;h++)r[h]=n[h].value.eval(e);v++}return m},u.prototype.makeImportant=function(){var e=this.rules?this.rules.map(function(e){return e.makeImportant?e.makeImportant(!0):e}):this.rules,t=new u(this.name,this.params,e,this.condition,this.variadic,this.frames);return t},u.prototype.eval=function(e){return new u(this.name,this.params,this.rules,this.condition,this.variadic,this.frames||e.frames.slice(0))},u.prototype.evalCall=function(e,t,n){var r,u,l=[],c=this.frames?this.frames.concat(e.frames):e.frames,h=this.evalParams(e,new a.Eval(e,c),t,l);return h.prependRule(new o("@arguments",new s(l).eval(e))),r=this.rules.slice(0),u=new i(null,r),u.originalRuleset=this,u=u.eval(new a.Eval(e,[this,h].concat(c))),n&&(u=u.makeImportant()),u},u.prototype.matchCondition=function(e,t){return this.condition&&!this.condition.eval(new a.Eval(t,[this.evalParams(t,new a.Eval(t,this.frames?this.frames.concat(t.frames):t.frames),e,[])].concat(this.frames).concat(t.frames)))?!1:!0},u.prototype.matchArgs=function(e,t){var n,r=e&&e.length||0;if(this.variadic){if(r<this.required-1)return!1}else{if(r<this.required)return!1;if(r>this.params.length)return!1}n=Math.min(r,this.arity);for(var i=0;n>i;i++)if(!this.params[i].name&&!this.params[i].variadic&&e[i].value.eval(t).toCSS()!=this.params[i].value.eval(t).toCSS())return!1;return!0},t.exports=u},{"../contexts":10,"./element":55,"./expression":56,"./rule":71,"./ruleset":73,"./selector":74}],66:[function(e,t){var n=e("./node"),r=e("./operation"),i=e("./dimension"),o=function(e){this.value=e};o.prototype=new n,o.prototype.type="Negative",o.prototype.genCSS=function(e,t){t.add("-"),this.value.genCSS(e,t)},o.prototype.eval=function(e){return e.isMathOn()?new r("*",[new i(-1),this.value]).eval(e):new o(this.value.eval(e))},t.exports=o},{"./dimension":53,"./node":67,"./operation":68}],67:[function(e,t){var n=function(){};n.prototype.toCSS=function(e){var t=[];return this.genCSS(e,{add:function(e){t.push(e)},isEmpty:function(){return 0===t.length}}),t.join("")},n.prototype.genCSS=function(e,t){t.add(this.value)},n.prototype.accept=function(e){this.value=e.visit(this.value)},n.prototype.eval=function(){return this},n.prototype._operate=function(e,t,n,r){switch(t){case"+":return n+r;case"-":return n-r;case"*":return n*r;case"/":return n/r}},n.prototype.fround=function(e,t){var n=e&&e.numPrecision;return null==n?t:Number((t+2e-16).toFixed(n))},n.compare=function(e,t){if(e.compare&&"Quoted"!==t.type&&"Anonymous"!==t.type)return e.compare(t);if(t.compare)return-t.compare(e);if(e.type!==t.type)return void 0;if(e=e.value,t=t.value,!Array.isArray(e))return e===t?0:void 0;if(e.length!==t.length)return void 0;for(var r=0;r<e.length;r++)if(0!==n.compare(e[r],t[r]))return void 0;return 0},n.numericCompare=function(e,t){return t>e?-1:e===t?0:e>t?1:void 0},t.exports=n},{}],68:[function(e,t){var n=e("./node"),r=e("./color"),i=e("./dimension"),o=function(e,t,n){this.op=e.trim(),this.operands=t,this.isSpaced=n};o.prototype=new n,o.prototype.type="Operation",o.prototype.accept=function(e){this.operands=e.visit(this.operands)},o.prototype.eval=function(e){var t=this.operands[0].eval(e),n=this.operands[1].eval(e);if(e.isMathOn()){if(t instanceof i&&n instanceof r&&(t=t.toColor()),n instanceof i&&t instanceof r&&(n=n.toColor()),!t.operate)throw{type:"Operation",message:"Operation on an invalid type"};return t.operate(e,this.op,n)}return new o(this.op,[t,n],this.isSpaced)},o.prototype.genCSS=function(e,t){this.operands[0].genCSS(e,t),this.isSpaced&&t.add(" "),t.add(this.op),this.isSpaced&&t.add(" "),this.operands[1].genCSS(e,t)},t.exports=o},{"./color":47,"./dimension":53,"./node":67}],69:[function(e,t){var n=e("./node"),r=function(e){this.value=e};r.prototype=new n,r.prototype.type="Paren",r.prototype.genCSS=function(e,t){t.add("("),this.value.genCSS(e,t),t.add(")")
},r.prototype.eval=function(e){return new r(this.value.eval(e))},t.exports=r},{"./node":67}],70:[function(e,t){var n=e("./node"),r=e("./js-eval-node"),i=e("./variable"),o=function(e,t,n,r,i){this.escaped=null==n?!0:n,this.value=t||"",this.quote=e.charAt(0),this.index=r,this.currentFileInfo=i};o.prototype=new r,o.prototype.type="Quoted",o.prototype.genCSS=function(e,t){this.escaped||t.add(this.quote,this.currentFileInfo,this.index),t.add(this.value),this.escaped||t.add(this.quote)},o.prototype.containsVariables=function(){return this.value.match(/(`([^`]+)`)|@\{([\w-]+)\}/)},o.prototype.eval=function(e){function t(e,t,n){var r=e;do e=r,r=e.replace(t,n);while(e!==r);return r}var n=this,r=this.value,s=function(t,r){return String(n.evaluateJavaScript(r,e))},a=function(t,r){var s=new i("@"+r,n.index,n.currentFileInfo).eval(e,!0);return s instanceof o?s.value:s.toCSS()};return r=t(r,/`([^`]+)`/g,s),r=t(r,/@\{([\w-]+)\}/g,a),new o(this.quote+r+this.quote,r,this.escaped,this.index,this.currentFileInfo)},o.prototype.compare=function(e){return"Quoted"!==e.type||this.escaped||e.escaped?e.toCSS&&this.toCSS()===e.toCSS()?0:void 0:n.numericCompare(this.value,e.value)},t.exports=o},{"./js-eval-node":61,"./node":67,"./variable":79}],71:[function(e,t){function n(e,t){var n,r="",i=t.length,o={add:function(e){r+=e}};for(n=0;i>n;n++)t[n].eval(e).genCSS(e,o);return r}var r=e("./node"),i=e("./value"),o=e("./keyword"),s=function(e,t,n,o,s,a,u,l){this.name=e,this.value=t instanceof r?t:new i([t]),this.important=n?" "+n.trim():"",this.merge=o,this.index=s,this.currentFileInfo=a,this.inline=u||!1,this.variable=void 0!==l?l:e.charAt&&"@"===e.charAt(0)};s.prototype=new r,s.prototype.type="Rule",s.prototype.genCSS=function(e,t){t.add(this.name+(e.compress?":":": "),this.currentFileInfo,this.index);try{this.value.genCSS(e,t)}catch(n){throw n.index=this.index,n.filename=this.currentFileInfo.filename,n}t.add(this.important+(this.inline||e.lastRule&&e.compress?"":";"),this.currentFileInfo,this.index)},s.prototype.eval=function(e){var t,r=!1,i=this.name,a=this.variable;"string"!=typeof i&&(i=1===i.length&&i[0]instanceof o?i[0].value:n(e,i),a=!1),"font"!==i||e.strictMath||(r=!0,e.strictMath=!0);try{if(e.importantScope.push({}),t=this.value.eval(e),!this.variable&&"DetachedRuleset"===t.type)throw{message:"Rulesets cannot be evaluated on a property.",index:this.index,filename:this.currentFileInfo.filename};var u=this.important,l=e.importantScope.pop();return!u&&l.important&&(u=l.important),new s(i,t,u,this.merge,this.index,this.currentFileInfo,this.inline,a)}catch(c){throw"number"!=typeof c.index&&(c.index=this.index,c.filename=this.currentFileInfo.filename),c}finally{r&&(e.strictMath=!1)}},s.prototype.makeImportant=function(){return new s(this.name,this.value,"!important",this.merge,this.index,this.currentFileInfo,this.inline)},t.exports=s},{"./keyword":62,"./node":67,"./value":78}],72:[function(e,t){var n=e("./node"),r=e("./variable"),i=function(e){this.variable=e};i.prototype=new n,i.prototype.type="RulesetCall",i.prototype.eval=function(e){var t=new r(this.variable).eval(e);return t.callEval(e)},t.exports=i},{"./node":67,"./variable":79}],73:[function(e,t){var n=e("./node"),r=e("./rule"),i=e("./selector"),o=e("./element"),s=e("./paren"),a=e("../contexts"),u=e("../functions/default"),l=e("./debug-info"),c=function(e,t,n){this.selectors=e,this.rules=t,this._lookups={},this.strictImports=n};c.prototype=new n,c.prototype.type="Ruleset",c.prototype.isRuleset=!0,c.prototype.isRulesetLike=!0,c.prototype.accept=function(e){this.paths?e.visitArray(this.paths,!0):this.selectors&&(this.selectors=e.visitArray(this.selectors)),this.rules&&this.rules.length&&(this.rules=e.visitArray(this.rules))},c.prototype.eval=function(e){var t,n,i,o,s=this.selectors,a=!1;if(s&&(n=s.length)){for(t=[],u.error({type:"Syntax",message:"it is currently only allowed in parametric mixin guards,"}),o=0;n>o;o++)i=s[o].eval(e),t.push(i),i.evaldCondition&&(a=!0);u.reset()}else a=!0;var l,h,f=this.rules?this.rules.slice(0):null,p=new c(t,f,this.strictImports);p.originalRuleset=this,p.root=this.root,p.firstRoot=this.firstRoot,p.allowImports=this.allowImports,this.debugInfo&&(p.debugInfo=this.debugInfo),a||(f.length=0);var d=e.frames;d.unshift(p);var v=e.selectors;v||(e.selectors=v=[]),v.unshift(this.selectors),(p.root||p.allowImports||!p.strictImports)&&p.evalImports(e);var m=p.rules,g=m?m.length:0;for(o=0;g>o;o++)m[o].evalFirst&&(m[o]=m[o].eval(e));var y=e.mediaBlocks&&e.mediaBlocks.length||0;for(o=0;g>o;o++)"MixinCall"===m[o].type?(f=m[o].eval(e).filter(function(e){return e instanceof r&&e.variable?!p.variable(e.name):!0}),m.splice.apply(m,[o,1].concat(f)),g+=f.length-1,o+=f.length-1,p.resetCache()):"RulesetCall"===m[o].type&&(f=m[o].eval(e).rules.filter(function(e){return e instanceof r&&e.variable?!1:!0}),m.splice.apply(m,[o,1].concat(f)),g+=f.length-1,o+=f.length-1,p.resetCache());for(o=0;o<m.length;o++)l=m[o],l.evalFirst||(m[o]=l=l.eval?l.eval(e):l);for(o=0;o<m.length;o++)if(l=m[o],l instanceof c&&l.selectors&&1===l.selectors.length&&l.selectors[0].isJustParentSelector()){m.splice(o--,1);for(var w=0;w<l.rules.length;w++)h=l.rules[w],h instanceof r&&h.variable||m.splice(++o,0,h)}if(d.shift(),v.shift(),e.mediaBlocks)for(o=y;o<e.mediaBlocks.length;o++)e.mediaBlocks[o].bubbleSelectors(t);return p},c.prototype.evalImports=function(e){var t,n,r=this.rules;if(r)for(t=0;t<r.length;t++)"Import"===r[t].type&&(n=r[t].eval(e),n&&n.length?(r.splice.apply(r,[t,1].concat(n)),t+=n.length-1):r.splice(t,1,n),this.resetCache())},c.prototype.makeImportant=function(){var e=new c(this.selectors,this.rules.map(function(e){return e.makeImportant?e.makeImportant():e}),this.strictImports);return e},c.prototype.matchArgs=function(e){return!e||0===e.length},c.prototype.matchCondition=function(e,t){var n=this.selectors[this.selectors.length-1];return n.evaldCondition?n.condition&&!n.condition.eval(new a.Eval(t,t.frames))?!1:!0:!1},c.prototype.resetCache=function(){this._rulesets=null,this._variables=null,this._lookups={}},c.prototype.variables=function(){return this._variables||(this._variables=this.rules?this.rules.reduce(function(e,t){if(t instanceof r&&t.variable===!0&&(e[t.name]=t),"Import"===t.type&&t.root&&t.root.variables){var n=t.root.variables();for(var i in n)n.hasOwnProperty(i)&&(e[i]=n[i])}return e},{}):{}),this._variables},c.prototype.variable=function(e){return this.variables()[e]},c.prototype.rulesets=function(){if(!this.rules)return null;var e,t,n=[],r=this.rules,i=r.length;for(e=0;i>e;e++)t=r[e],t.isRuleset&&n.push(t);return n},c.prototype.prependRule=function(e){var t=this.rules;t?t.unshift(e):this.rules=[e]},c.prototype.find=function(e,t,n){t=t||this;var r,o,s=[],a=e.toCSS();return a in this._lookups?this._lookups[a]:(this.rulesets().forEach(function(a){if(a!==t)for(var u=0;u<a.selectors.length;u++)if(r=e.match(a.selectors[u])){if(e.elements.length>r){if(!n||n(a)){o=a.find(new i(e.elements.slice(r)),t,n);for(var l=0;l<o.length;++l)o[l].path.push(a);Array.prototype.push.apply(s,o)}}else s.push({rule:a,path:[]});break}}),this._lookups[a]=s,s)},c.prototype.genCSS=function(e,t){function n(e,t){return"boolean"==typeof e.isRulesetLike?e.isRulesetLike:"function"==typeof e.isRulesetLike?e.isRulesetLike(t):!1}var r,i,o,s,a,u,c=[],h=[],f=[];e.tabLevel=e.tabLevel||0,this.root||e.tabLevel++;var p,d=e.compress?"":Array(e.tabLevel+1).join("  "),v=e.compress?"":Array(e.tabLevel).join("  ");for(r=0;r<this.rules.length;r++)a=this.rules[r],n(a,this.root)?f.push(a):a.isCharset&&a.isCharset()?c.push(a):h.push(a);if(h=c.concat(h),!this.root){s=l(e,this,v),s&&(t.add(s),t.add(v));var m,g=this.paths,y=g.length;for(p=e.compress?",":",\n"+v,r=0;y>r;r++)if(u=g[r],m=u.length)for(r>0&&t.add(p),e.firstSelector=!0,u[0].genCSS(e,t),e.firstSelector=!1,i=1;m>i;i++)u[i].genCSS(e,t);t.add((e.compress?"{":" {\n")+d)}for(r=0;r<h.length;r++)a=h[r],r+1!==h.length||this.root&&0!==f.length&&!this.firstRoot||(e.lastRule=!0),a.genCSS?a.genCSS(e,t):a.value&&t.add(a.value.toString()),e.lastRule?e.lastRule=!1:t.add(e.compress?"":"\n"+d);if(this.root||(t.add(e.compress?"}":"\n"+v+"}"),e.tabLevel--),p=(e.compress?"":"\n")+(this.root?d:v),o=f.length)for(h.length&&p&&t.add(p),f[0].genCSS(e,t),r=1;o>r;r++)p&&t.add(p),f[r].genCSS(e,t);t.isEmpty()||e.compress||!this.firstRoot||t.add("\n")},c.prototype.markReferenced=function(){var e;if(this.selectors)for(e=0;e<this.selectors.length;e++)this.selectors[e].markReferenced();if(this.rules)for(e=0;e<this.rules.length;e++)this.rules[e].markReferenced&&this.rules[e].markReferenced()},c.prototype.getIsReferenced=function(){var e,t,n,r;if(this.paths)for(e=0;e<this.paths.length;e++)for(n=this.paths[e],t=0;t<n.length;t++)if(n[t].getIsReferenced&&n[t].getIsReferenced())return!0;if(this.selectors)for(e=0;e<this.selectors.length;e++)if(r=this.selectors[e],r.getIsReferenced&&r.getIsReferenced())return!0;return!1},c.prototype.joinSelectors=function(e,t,n){for(var r=0;r<n.length;r++)this.joinSelector(e,t,n[r])},c.prototype.joinSelector=function(e,t,n){function r(e,t){var n,r;if(0===e.length)n=new s(e[0]);else{var a=[];for(r=0;r<e.length;r++)a.push(new o(null,e[r],t.index,t.currentFileInfo));n=new s(new i(a))}return n}function a(e,t){var n,r;return n=new o(null,e,t.index,t.currentFileInfo),r=new i([n])}function u(e,t,n){function i(e){var t;return"Paren"!==e.value.type?null:(t=e.value.value,"Selector"!==t.type?null:t)}var s,f,p,d,v,m,g,y,w,x,b=!1;for(d=[],v=[[]],s=0;s<n.elements.length;s++)if(y=n.elements[s],"&"!==y.value){var S=i(y);if(null!=S){h(d,v);var C,k=[],I=[];for(C=u(k,t,S),b=b||C,p=0;p<k.length;p++){var M=a(r(k[p],y),y);c(v,[M],y,n,I)}v=I,d=[]}else d.push(y)}else{for(b=!0,m=[],h(d,v),f=0;f<v.length;f++)if(g=v[f],0===t.length)g.length>0&&g[0].elements.push(new o(y.combinator,"",y.index,y.currentFileInfo)),m.push(g);else for(p=0;p<t.length;p++){var F=l(g,t[p],y,n);m.push(F)}v=m,d=[]}for(h(d,v),s=0;s<v.length;s++)w=v[s].length,w>0&&(e.push(v[s]),x=v[s][w-1],v[s][w-1]=x.createDerived(x.elements,n.extendList));return b}function l(e,t,n,r){var i,s,a;if(i=[],e.length>0?(i=e.slice(0),s=i.pop(),a=r.createDerived(s.elements.slice(0))):a=r.createDerived([]),t.length>0){var u=n.combinator,l=t[0].elements[0];u.emptyOrWhitespace&&!l.combinator.emptyOrWhitespace&&(u=l.combinator),a.elements.push(new o(u,l.value,n.index,n.currentFileInfo)),a.elements=a.elements.concat(t[0].elements.slice(1))}return 0!==a.elements.length&&i.push(a),t.length>1&&(i=i.concat(t.slice(1))),i}function c(e,t,n,r,i){var o;for(o=0;o<e.length;o++){var s=l(e[o],t,n,r);i.push(s)}return i}function h(e,t){var n,r;if(0!==e.length){if(0===t.length)return void t.push([new i(e)]);for(n=0;n<t.length;n++)r=t[n],r.length>0?r[r.length-1]=r[r.length-1].createDerived(r[r.length-1].elements.concat(e)):r.push(new i(e))}}var f,p,d;if(p=[],d=u(p,t,n),!d)if(t.length>0)for(p=[],f=0;f<t.length;f++)p.push(t[f].concat(n));else p=[[n]];for(f=0;f<p.length;f++)e.push(p[f])},t.exports=c},{"../contexts":10,"../functions/default":19,"./debug-info":51,"./element":55,"./node":67,"./paren":69,"./rule":71,"./selector":74}],74:[function(e,t){var n=e("./node"),r=function(e,t,n,r,i,o){this.elements=e,this.extendList=t,this.condition=n,this.currentFileInfo=i||{},this.isReferenced=o,n||(this.evaldCondition=!0)};r.prototype=new n,r.prototype.type="Selector",r.prototype.accept=function(e){this.elements&&(this.elements=e.visitArray(this.elements)),this.extendList&&(this.extendList=e.visitArray(this.extendList)),this.condition&&(this.condition=e.visit(this.condition))},r.prototype.createDerived=function(e,t,n){n=null!=n?n:this.evaldCondition;var i=new r(e,t||this.extendList,null,this.index,this.currentFileInfo,this.isReferenced);return i.evaldCondition=n,i.mediaEmpty=this.mediaEmpty,i},r.prototype.match=function(e){var t,n,r=this.elements,i=r.length;if(e.CacheElements(),t=e._elements.length,0===t||t>i)return 0;for(n=0;t>n;n++)if(r[n].value!==e._elements[n])return 0;return t},r.prototype.CacheElements=function(){if(!this._elements){var e=this.elements.map(function(e){return e.combinator.value+(e.value.value||e.value)}).join("").match(/[,&#\*\.\w-]([\w-]|(\\.))*/g);e?"&"===e[0]&&e.shift():e=[],this._elements=e}},r.prototype.isJustParentSelector=function(){return!this.mediaEmpty&&1===this.elements.length&&"&"===this.elements[0].value&&(" "===this.elements[0].combinator.value||""===this.elements[0].combinator.value)},r.prototype.eval=function(e){var t=this.condition&&this.condition.eval(e),n=this.elements,r=this.extendList;return n=n&&n.map(function(t){return t.eval(e)}),r=r&&r.map(function(t){return t.eval(e)}),this.createDerived(n,r,t)},r.prototype.genCSS=function(e,t){var n,r;if(e&&e.firstSelector||""!==this.elements[0].combinator.value||t.add(" ",this.currentFileInfo,this.index),!this._css)for(n=0;n<this.elements.length;n++)r=this.elements[n],r.genCSS(e,t)},r.prototype.markReferenced=function(){this.isReferenced=!0},r.prototype.getIsReferenced=function(){return!this.currentFileInfo.reference||this.isReferenced},r.prototype.getIsOutput=function(){return this.evaldCondition},t.exports=r},{"./node":67}],75:[function(e,t){var n=e("./node"),r=function(e){this.value=e};r.prototype=new n,r.prototype.type="UnicodeDescriptor",t.exports=r},{"./node":67}],76:[function(e,t){var n=e("./node"),r=e("../data/unit-conversions"),i=function(e,t,n){this.numerator=e?e.slice(0).sort():[],this.denominator=t?t.slice(0).sort():[],n?this.backupUnit=n:e&&e.length&&(this.backupUnit=e[0])};i.prototype=new n,i.prototype.type="Unit",i.prototype.clone=function(){return new i(this.numerator.slice(0),this.denominator.slice(0),this.backupUnit)},i.prototype.genCSS=function(e,t){var n=e&&e.strictUnits;1===this.numerator.length?t.add(this.numerator[0]):!n&&this.backupUnit?t.add(this.backupUnit):!n&&this.denominator.length&&t.add(this.denominator[0])},i.prototype.toString=function(){var e,t=this.numerator.join("*");for(e=0;e<this.denominator.length;e++)t+="/"+this.denominator[e];return t},i.prototype.compare=function(e){return this.is(e.toString())?0:void 0},i.prototype.is=function(e){return this.toString().toUpperCase()===e.toUpperCase()},i.prototype.isLength=function(){return Boolean(this.toCSS().match(/px|em|%|in|cm|mm|pc|pt|ex/))},i.prototype.isEmpty=function(){return 0===this.numerator.length&&0===this.denominator.length},i.prototype.isSingular=function(){return this.numerator.length<=1&&0===this.denominator.length},i.prototype.map=function(e){var t;for(t=0;t<this.numerator.length;t++)this.numerator[t]=e(this.numerator[t],!1);for(t=0;t<this.denominator.length;t++)this.denominator[t]=e(this.denominator[t],!0)},i.prototype.usedUnits=function(){var e,t,n={};t=function(t){return e.hasOwnProperty(t)&&!n[i]&&(n[i]=t),t};for(var i in r)r.hasOwnProperty(i)&&(e=r[i],this.map(t));return n},i.prototype.cancel=function(){var e,t,n={};for(t=0;t<this.numerator.length;t++)e=this.numerator[t],n[e]=(n[e]||0)+1;for(t=0;t<this.denominator.length;t++)e=this.denominator[t],n[e]=(n[e]||0)-1;this.numerator=[],this.denominator=[];for(e in n)if(n.hasOwnProperty(e)){var r=n[e];if(r>0)for(t=0;r>t;t++)this.numerator.push(e);else if(0>r)for(t=0;-r>t;t++)this.denominator.push(e)}this.numerator.sort(),this.denominator.sort()},t.exports=i},{"../data/unit-conversions":13,"./node":67}],77:[function(e,t){var n=e("./node"),r=function(e,t,n,r){this.value=e,this.currentFileInfo=n,this.index=t,this.isEvald=r};r.prototype=new n,r.prototype.type="Url",r.prototype.accept=function(e){this.value=e.visit(this.value)},r.prototype.genCSS=function(e,t){t.add("url("),this.value.genCSS(e,t),t.add(")")},r.prototype.eval=function(e){var t,n=this.value.eval(e);if(!this.isEvald&&(t=this.currentFileInfo&&this.currentFileInfo.rootpath,t&&"string"==typeof n.value&&e.isPathRelative(n.value)&&(n.quote||(t=t.replace(/[\(\)'"\s]/g,function(e){return"\\"+e})),n.value=t+n.value),n.value=e.normalizePath(n.value),e.urlArgs&&!n.value.match(/^\s*data:/))){var i=-1===n.value.indexOf("?")?"?":"&",o=i+e.urlArgs;-1!==n.value.indexOf("#")?n.value=n.value.replace("#",o+"#"):n.value+=o}return new r(n,this.index,this.currentFileInfo,!0)},t.exports=r},{"./node":67}],78:[function(e,t){var n=e("./node"),r=function(e){if(this.value=e,!e)throw new Error("Value requires an array argument")};r.prototype=new n,r.prototype.type="Value",r.prototype.accept=function(e){this.value&&(this.value=e.visitArray(this.value))},r.prototype.eval=function(e){return 1===this.value.length?this.value[0].eval(e):new r(this.value.map(function(t){return t.eval(e)}))},r.prototype.genCSS=function(e,t){var n;for(n=0;n<this.value.length;n++)this.value[n].genCSS(e,t),n+1<this.value.length&&t.add(e&&e.compress?",":", ")},t.exports=r},{"./node":67}],79:[function(e,t){var n=e("./node"),r=function(e,t,n){this.name=e,this.index=t,this.currentFileInfo=n||{}};r.prototype=new n,r.prototype.type="Variable",r.prototype.eval=function(e){var t,n=this.name;if(0===n.indexOf("@@")&&(n="@"+new r(n.slice(1),this.index,this.currentFileInfo).eval(e).value),this.evaluating)throw{type:"Name",message:"Recursive variable definition for "+n,filename:this.currentFileInfo.filename,index:this.index};if(this.evaluating=!0,t=this.find(e.frames,function(t){var r=t.variable(n);if(r){if(r.important){var i=e.importantScope[e.importantScope.length-1];i.important=r.important}return r.value.eval(e)}}))return this.evaluating=!1,t;throw{type:"Name",message:"variable "+n+" is undefined",filename:this.currentFileInfo.filename,index:this.index}},r.prototype.find=function(e,t){for(var n,r=0;r<e.length;r++)if(n=t.call(e,e[r]))return n;return null},t.exports=r},{"./node":67}],80:[function(e,t){t.exports={getLocation:function(e,t){for(var n=e+1,r=null,i=-1;--n>=0&&"\n"!==t.charAt(n);)i++;return"number"==typeof e&&(r=(t.slice(0,e).match(/\n/g)||"").length),{line:r,column:i}}}},{}],81:[function(e,t){var n=e("../tree"),r=e("./visitor"),i=e("../logger"),o=function(){this._visitor=new r(this),this.contexts=[],this.allExtendsStack=[[]]};o.prototype={run:function(e){return e=this._visitor.visit(e),e.allExtends=this.allExtendsStack[0],e},visitRule:function(e,t){t.visitDeeper=!1},visitMixinDefinition:function(e,t){t.visitDeeper=!1},visitRuleset:function(e){if(!e.root){var t,r,i,o,s=[],a=e.rules,u=a?a.length:0;for(t=0;u>t;t++)e.rules[t]instanceof n.Extend&&(s.push(a[t]),e.extendOnEveryPath=!0);var l=e.paths;for(t=0;t<l.length;t++){var c=l[t],h=c[c.length-1],f=h.extendList;for(o=f?f.slice(0).concat(s):s,o&&(o=o.map(function(e){return e.clone()})),r=0;r<o.length;r++)this.foundExtends=!0,i=o[r],i.findSelfSelectors(c),i.ruleset=e,0===r&&(i.firstExtendOnThisSelectorPath=!0),this.allExtendsStack[this.allExtendsStack.length-1].push(i)}this.contexts.push(e.selectors)}},visitRulesetOut:function(e){e.root||(this.contexts.length=this.contexts.length-1)},visitMedia:function(e){e.allExtends=[],this.allExtendsStack.push(e.allExtends)},visitMediaOut:function(){this.allExtendsStack.length=this.allExtendsStack.length-1},visitDirective:function(e){e.allExtends=[],this.allExtendsStack.push(e.allExtends)},visitDirectiveOut:function(){this.allExtendsStack.length=this.allExtendsStack.length-1}};var s=function(){this._visitor=new r(this)};s.prototype={run:function(e){var t=new o;if(this.extendIndicies={},t.run(e),!t.foundExtends)return e;e.allExtends=e.allExtends.concat(this.doExtendChaining(e.allExtends,e.allExtends)),this.allExtendsStack=[e.allExtends];var n=this._visitor.visit(e);return this.checkExtendsForNonMatched(e.allExtends),n},checkExtendsForNonMatched:function(e){var t=this.extendIndicies;e.filter(function(e){return!e.hasFoundMatches&&1==e.parent_ids.length}).forEach(function(e){var n="_unknown_";try{n=e.selector.toCSS({})}catch(r){}t[e.index+" "+n]||(t[e.index+" "+n]=!0,i.warn("extend '"+n+"' has no matches"))})},doExtendChaining:function(e,t,r){var i,o,s,a,u,l,c,h,f=[],p=this;for(r=r||0,i=0;i<e.length;i++)for(o=0;o<t.length;o++)l=e[i],c=t[o],l.parent_ids.indexOf(c.object_id)>=0||(u=[c.selfSelectors[0]],s=p.findMatch(l,u),s.length&&(l.hasFoundMatches=!0,l.selfSelectors.forEach(function(e){a=p.extendSelector(s,u,e),h=new n.Extend(c.selector,c.option,0),h.selfSelectors=a,a[a.length-1].extendList=[h],f.push(h),h.ruleset=c.ruleset,h.parent_ids=h.parent_ids.concat(c.parent_ids,l.parent_ids),c.firstExtendOnThisSelectorPath&&(h.firstExtendOnThisSelectorPath=!0,c.ruleset.paths.push(a))})));if(f.length){if(this.extendChainCount++,r>100){var d="{unable to calculate}",v="{unable to calculate}";try{d=f[0].selfSelectors[0].toCSS(),v=f[0].selector.toCSS()}catch(m){}throw{message:"extend circular reference detected. One of the circular extends is currently:"+d+":extend("+v+")"}}return f.concat(p.doExtendChaining(f,t,r+1))}return f},visitRule:function(e,t){t.visitDeeper=!1},visitMixinDefinition:function(e,t){t.visitDeeper=!1},visitSelector:function(e,t){t.visitDeeper=!1},visitRuleset:function(e){if(!e.root){var t,n,r,i,o=this.allExtendsStack[this.allExtendsStack.length-1],s=[],a=this;for(r=0;r<o.length;r++)for(n=0;n<e.paths.length;n++)if(i=e.paths[n],!e.extendOnEveryPath){var u=i[i.length-1].extendList;u&&u.length||(t=this.findMatch(o[r],i),t.length&&(o[r].hasFoundMatches=!0,o[r].selfSelectors.forEach(function(e){s.push(a.extendSelector(t,i,e))})))}e.paths=e.paths.concat(s)}},findMatch:function(e,t){var n,r,i,o,s,a,u,l=this,c=e.selector.elements,h=[],f=[];for(n=0;n<t.length;n++)for(r=t[n],i=0;i<r.elements.length;i++)for(o=r.elements[i],(e.allowBefore||0===n&&0===i)&&h.push({pathIndex:n,index:i,matched:0,initialCombinator:o.combinator}),a=0;a<h.length;a++)u=h[a],s=o.combinator.value,""===s&&0===i&&(s=" "),!l.isElementValuesEqual(c[u.matched].value,o.value)||u.matched>0&&c[u.matched].combinator.value!==s?u=null:u.matched++,u&&(u.finished=u.matched===c.length,u.finished&&!e.allowAfter&&(i+1<r.elements.length||n+1<t.length)&&(u=null)),u?u.finished&&(u.length=c.length,u.endPathIndex=n,u.endPathElementIndex=i+1,h.length=0,f.push(u)):(h.splice(a,1),a--);return f},isElementValuesEqual:function(e,t){if("string"==typeof e||"string"==typeof t)return e===t;if(e instanceof n.Attribute)return e.op!==t.op||e.key!==t.key?!1:e.value&&t.value?(e=e.value.value||e.value,t=t.value.value||t.value,e===t):e.value||t.value?!1:!0;if(e=e.value,t=t.value,e instanceof n.Selector){if(!(t instanceof n.Selector)||e.elements.length!==t.elements.length)return!1;for(var r=0;r<e.elements.length;r++){if(e.elements[r].combinator.value!==t.elements[r].combinator.value&&(0!==r||(e.elements[r].combinator.value||" ")!==(t.elements[r].combinator.value||" ")))return!1;if(!this.isElementValuesEqual(e.elements[r].value,t.elements[r].value))return!1}return!0}return!1},extendSelector:function(e,t,r){var i,o,s,a,u,l=0,c=0,h=[];for(i=0;i<e.length;i++)a=e[i],o=t[a.pathIndex],s=new n.Element(a.initialCombinator,r.elements[0].value,r.elements[0].index,r.elements[0].currentFileInfo),a.pathIndex>l&&c>0&&(h[h.length-1].elements=h[h.length-1].elements.concat(t[l].elements.slice(c)),c=0,l++),u=o.elements.slice(c,a.index).concat([s]).concat(r.elements.slice(1)),l===a.pathIndex&&i>0?h[h.length-1].elements=h[h.length-1].elements.concat(u):(h=h.concat(t.slice(l,a.pathIndex)),h.push(new n.Selector(u))),l=a.endPathIndex,c=a.endPathElementIndex,c>=t[l].elements.length&&(c=0,l++);return l<t.length&&c>0&&(h[h.length-1].elements=h[h.length-1].elements.concat(t[l].elements.slice(c)),l++),h=h.concat(t.slice(l,t.length))},visitRulesetOut:function(){},visitMedia:function(e){var t=e.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length-1]);t=t.concat(this.doExtendChaining(t,e.allExtends)),this.allExtendsStack.push(t)},visitMediaOut:function(){var e=this.allExtendsStack.length-1;this.checkExtendsForNonMatched(this.allExtendsStack[e]),this.allExtendsStack.length=e},visitDirective:function(e){var t=e.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length-1]);t=t.concat(this.doExtendChaining(t,e.allExtends)),this.allExtendsStack.push(t)},visitDirectiveOut:function(){var e=this.allExtendsStack.length-1;this.checkExtendsForNonMatched(this.allExtendsStack[e]),this.allExtendsStack.length=e}},t.exports=s},{"../logger":31,"../tree":59,"./visitor":87}],82:[function(e,t){function n(e){this.imports=[],this.variableImports=[],this._onSequencerEmpty=e,this._currentDepth=0}n.prototype.addImport=function(e){var t=this,n={callback:e,args:null,isReady:!1};return this.imports.push(n),function(){n.args=Array.prototype.slice.call(arguments,0),n.isReady=!0,t.tryRun()}},n.prototype.addVariableImport=function(e){this.variableImports.push(e)},n.prototype.tryRun=function(){this._currentDepth++;try{for(;;){for(;this.imports.length>0;){var e=this.imports[0];if(!e.isReady)return;this.imports=this.imports.slice(1),e.callback.apply(null,e.args)}if(0===this.variableImports.length)break;var t=this.variableImports[0];this.variableImports=this.variableImports.slice(1),t()}}finally{this._currentDepth--}0===this._currentDepth&&this._onSequencerEmpty&&this._onSequencerEmpty()},t.exports=n},{}],83:[function(e,t){var n=e("../contexts"),r=e("./visitor"),i=e("./import-sequencer"),o=function(e,t){this._visitor=new r(this),this._importer=e,this._finish=t,this.context=new n.Eval,this.importCount=0,this.onceFileDetectionMap={},this.recursionDetector={},this._sequencer=new i(this._onSequencerEmpty.bind(this))};o.prototype={isReplacing:!1,run:function(e){try{this._visitor.visit(e)}catch(t){this.error=t}this.isFinished=!0,this._sequencer.tryRun()},_onSequencerEmpty:function(){this.isFinished&&this._finish(this.error)},visitImport:function(e,t){var r=e.options.inline;if(!e.css||r){var i=new n.Eval(this.context,this.context.frames.slice(0)),o=i.frames[0];this.importCount++,e.isVariableImport()?this._sequencer.addVariableImport(this.processImportNode.bind(this,e,i,o)):this.processImportNode(e,i,o)}t.visitDeeper=!1},processImportNode:function(e,t,n){var r,i=e.options.inline;try{r=e.evalForImport(t)}catch(o){o.filename||(o.index=e.index,o.filename=e.currentFileInfo.filename),e.css=!0,e.error=o}if(!r||r.css&&!i)this.importCount--,this.isFinished&&this._sequencer.tryRun();else{r.options.multiple&&(t.importMultiple=!0);for(var s=void 0===r.css,a=0;a<n.rules.length;a++)if(n.rules[a]===e){n.rules[a]=r;break}var u=this.onImported.bind(this,r,t),l=this._sequencer.addImport(u);this._importer.push(r.getPath(),s,r.currentFileInfo,r.options,l)}},onImported:function(e,t,n,r,i,o){n&&(n.filename||(n.index=e.index,n.filename=e.currentFileInfo.filename),this.error=n);var s=this,a=e.options.inline,u=i||o in s.recursionDetector;if(t.importMultiple||(e.skip=u?!0:function(){return o in s.onceFileDetectionMap?!0:(s.onceFileDetectionMap[o]=!0,!1)}),r&&(e.root=r,e.importedFilename=o,!a&&(t.importMultiple||!u))){s.recursionDetector[o]=!0;var l=this.context;this.context=t;try{this._visitor.visit(r)}catch(n){this.error=n}this.context=l}s.importCount--,s.isFinished&&s._sequencer.tryRun()},visitRule:function(e,t){t.visitDeeper=!1},visitDirective:function(e){this.context.frames.unshift(e)},visitDirectiveOut:function(){this.context.frames.shift()},visitMixinDefinition:function(e){this.context.frames.unshift(e)},visitMixinDefinitionOut:function(){this.context.frames.shift()},visitRuleset:function(e){this.context.frames.unshift(e)},visitRulesetOut:function(){this.context.frames.shift()},visitMedia:function(e){this.context.frames.unshift(e.rules[0])},visitMediaOut:function(){this.context.frames.shift()}},t.exports=o},{"../contexts":10,"./import-sequencer":82,"./visitor":87}],84:[function(e,t){var n={Visitor:e("./visitor"),ImportVisitor:e("./import-visitor"),ExtendVisitor:e("./extend-visitor"),JoinSelectorVisitor:e("./join-selector-visitor"),ToCSSVisitor:e("./to-css-visitor")};t.exports=n},{"./extend-visitor":81,"./import-visitor":83,"./join-selector-visitor":85,"./to-css-visitor":86,"./visitor":87}],85:[function(e,t){var n=e("./visitor"),r=function(){this.contexts=[[]],this._visitor=new n(this)};r.prototype={run:function(e){return this._visitor.visit(e)},visitRule:function(e,t){t.visitDeeper=!1},visitMixinDefinition:function(e,t){t.visitDeeper=!1},visitRuleset:function(e){var t,n=this.contexts[this.contexts.length-1],r=[];this.contexts.push(r),e.root||(t=e.selectors,t&&(t=t.filter(function(e){return e.getIsOutput()}),e.selectors=t.length?t:t=null,t&&e.joinSelectors(r,n,t)),t||(e.rules=null),e.paths=r)},visitRulesetOut:function(){this.contexts.length=this.contexts.length-1},visitMedia:function(e){var t=this.contexts[this.contexts.length-1];e.rules[0].root=0===t.length||t[0].multiMedia}},t.exports=r},{"./visitor":87}],86:[function(e,t){var n=e("../tree"),r=e("./visitor"),i=function(e){this._visitor=new r(this),this._context=e};i.prototype={isReplacing:!0,run:function(e){return this._visitor.visit(e)},visitRule:function(e){return e.variable?void 0:e},visitMixinDefinition:function(e){e.frames=[]},visitExtend:function(){},visitComment:function(e){return e.isSilent(this._context)?void 0:e},visitMedia:function(e,t){return e.accept(this._visitor),t.visitDeeper=!1,e.rules.length?e:void 0},visitDirective:function(e,t){if("@charset"===e.name){if(!e.getIsReferenced())return;if(this.charset){if(e.debugInfo){var r=new n.Comment("/* "+e.toCSS(this._context).replace(/\n/g,"")+" */\n");return r.debugInfo=e.debugInfo,this._visitor.visit(r)}return}this.charset=!0}if(e.rules&&e.rules.rules){if(this._mergeRules(e.rules.rules),e.accept(this._visitor),t.visitDeeper=!1,e.getIsReferenced())return e;if(!e.rules.rules)return;for(var i=0;i<e.rules.rules.length;i++){var o=e.rules.rules[i];if(o.getIsReferenced&&o.getIsReferenced())return e.markReferenced(),e}}else if(e.getIsReferenced())return e},checkPropertiesInRoot:function(e){for(var t,r=0;r<e.length;r++)if(t=e[r],t instanceof n.Rule&&!t.variable)throw{message:"properties must be inside selector blocks, they cannot be in the root.",index:t.index,filename:t.currentFileInfo?t.currentFileInfo.filename:null}},visitRuleset:function(e,t){var r,i=[];if(e.firstRoot&&this.checkPropertiesInRoot(e.rules),e.root)e.accept(this._visitor),t.visitDeeper=!1,(e.firstRoot||e.rules&&e.rules.length>0)&&i.splice(0,0,e);else{e.paths&&(e.paths=e.paths.filter(function(e){var t;for(" "===e[0].elements[0].combinator.value&&(e[0].elements[0].combinator=new n.Combinator("")),t=0;t<e.length;t++)if(e[t].getIsReferenced()&&e[t].getIsOutput())return!0;return!1}));for(var o=e.rules,s=o?o.length:0,a=0;s>a;)r=o[a],r&&r.rules?(i.push(this._visitor.visit(r)),o.splice(a,1),s--):a++;s>0?e.accept(this._visitor):e.rules=null,t.visitDeeper=!1,o=e.rules,o&&(this._mergeRules(o),o=e.rules),o&&(this._removeDuplicateRules(o),o=e.rules),o&&o.length>0&&e.paths.length>0&&i.splice(0,0,e)}return 1===i.length?i[0]:i},_removeDuplicateRules:function(e){if(e){var t,r,i,o={};for(i=e.length-1;i>=0;i--)if(r=e[i],r instanceof n.Rule)if(o[r.name]){t=o[r.name],t instanceof n.Rule&&(t=o[r.name]=[o[r.name].toCSS(this._context)]);var s=r.toCSS(this._context);-1!==t.indexOf(s)?e.splice(i,1):t.push(s)}else o[r.name]=r}},_mergeRules:function(e){if(e){for(var t,r,i,o={},s=0;s<e.length;s++)r=e[s],r instanceof n.Rule&&r.merge&&(i=[r.name,r.important?"!":""].join(","),o[i]?e.splice(s--,1):o[i]=[],o[i].push(r));Object.keys(o).map(function(e){function i(e){return new n.Expression(e.map(function(e){return e.value}))}function s(e){return new n.Value(e.map(function(e){return e}))}if(t=o[e],t.length>1){r=t[0];var a=[],u=[];t.map(function(e){"+"===e.merge&&(u.length>0&&a.push(i(u)),u=[]),u.push(e)}),a.push(i(u)),r.value=s(a)}})}}},t.exports=i},{"../tree":59,"./visitor":87}],87:[function(e,t){function n(e){return e}function r(e,t){var n,i;for(n in e)if(e.hasOwnProperty(n))switch(i=e[n],typeof i){case"function":i.prototype&&i.prototype.type&&(i.prototype.typeIndex=t++);break;case"object":t=r(i,t)}return t}var i=e("../tree"),o={visitDeeper:!0},s=!1,a=function(e){this._implementation=e,this._visitFnCache=[],s||(r(i,1),s=!0)};a.prototype={visit:function(e){if(!e)return e;var t=e.typeIndex;if(!t)return e;var r,i=this._visitFnCache,s=this._implementation,a=t<<1,u=1|a,l=i[a],c=i[u],h=o;if(h.visitDeeper=!0,l||(r="visit"+e.type,l=s[r]||n,c=s[r+"Out"]||n,i[a]=l,i[u]=c),l!==n){var f=l.call(s,e,h);
s.isReplacing&&(e=f)}return h.visitDeeper&&e&&e.accept&&e.accept(this),c!=n&&c.call(s,e),e},visitArray:function(e,t){if(!e)return e;var n,r=e.length;if(t||!this._implementation.isReplacing){for(n=0;r>n;n++)this.visit(e[n]);return e}var i=[];for(n=0;r>n;n++){var o=this.visit(e[n]);void 0!==o&&(o.splice?o.length&&this.flatten(o,i):i.push(o))}return i},flatten:function(e,t){t||(t=[]);var n,r,i,o,s,a;for(r=0,n=e.length;n>r;r++)if(i=e[r],void 0!==i)if(i.splice)for(s=0,o=i.length;o>s;s++)a=i[s],void 0!==a&&(a.splice?a.length&&this.flatten(a,t):t.push(a));else t.push(i);return t}},t.exports=a},{"../tree":59}],88:[function(e,t){function n(){if(!s){s=!0;for(var e,t=o.length;t;){e=o,o=[];for(var n=-1;++n<t;)e[n]();t=o.length}s=!1}}function r(){}var i=t.exports={},o=[],s=!1;i.nextTick=function(e){o.push(e),s||setTimeout(n,0)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.on=r,i.addListener=r,i.once=r,i.off=r,i.removeListener=r,i.removeAllListeners=r,i.emit=r,i.binding=function(){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},{}],89:[function(e,t){"use strict";function n(e){function t(e){return null===u?void c.push(e):void o(function(){var t=u?e.onFulfilled:e.onRejected;if(null===t)return void(u?e.resolve:e.reject)(l);var n;try{n=t(l)}catch(r){return void e.reject(r)}e.resolve(n)})}function n(e){try{if(e===h)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var t=e.then;if("function"==typeof t)return void i(t.bind(e),n,s)}u=!0,l=e,a()}catch(r){s(r)}}function s(e){u=!1,l=e,a()}function a(){for(var e=0,n=c.length;n>e;e++)t(c[e]);c=null}if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");var u=null,l=null,c=[],h=this;this.then=function(e,n){return new h.constructor(function(i,o){t(new r(e,n,i,o))})},i(e,n,s)}function r(e,t,n,r){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.resolve=n,this.reject=r}function i(e,t,n){var r=!1;try{e(function(e){r||(r=!0,t(e))},function(e){r||(r=!0,n(e))})}catch(i){if(r)return;r=!0,n(i)}}var o=e("asap");t.exports=n},{asap:91}],90:[function(e,t){"use strict";function n(e){this.then=function(t){return"function"!=typeof t?this:new r(function(n,r){i(function(){try{n(t(e))}catch(i){r(i)}})})}}var r=e("./core.js"),i=e("asap");t.exports=r,n.prototype=r.prototype;var o=new n(!0),s=new n(!1),a=new n(null),u=new n(void 0),l=new n(0),c=new n("");r.resolve=function(e){if(e instanceof r)return e;if(null===e)return a;if(void 0===e)return u;if(e===!0)return o;if(e===!1)return s;if(0===e)return l;if(""===e)return c;if("object"==typeof e||"function"==typeof e)try{var t=e.then;if("function"==typeof t)return new r(t.bind(e))}catch(i){return new r(function(e,t){t(i)})}return new n(e)},r.all=function(e){var t=Array.prototype.slice.call(e);return new r(function(e,n){function r(o,s){try{if(s&&("object"==typeof s||"function"==typeof s)){var a=s.then;if("function"==typeof a)return void a.call(s,function(e){r(o,e)},n)}t[o]=s,0===--i&&e(t)}catch(u){n(u)}}if(0===t.length)return e([]);for(var i=t.length,o=0;o<t.length;o++)r(o,t[o])})},r.reject=function(e){return new r(function(t,n){n(e)})},r.race=function(e){return new r(function(t,n){e.forEach(function(e){r.resolve(e).then(t,n)})})},r.prototype["catch"]=function(e){return this.then(null,e)}},{"./core.js":89,asap:91}],91:[function(e,t){(function(e){function n(){for(;i.next;){i=i.next;var e=i.task;i.task=void 0;var t=i.domain;t&&(i.domain=void 0,t.enter());try{e()}catch(r){if(u)throw t&&t.exit(),setTimeout(n,0),t&&t.enter(),r;setTimeout(function(){throw r},0)}t&&t.exit()}s=!1}function r(t){o=o.next={task:t,domain:u&&e.domain,next:null},s||(s=!0,a())}var i={task:void 0,next:null},o=i,s=!1,a=void 0,u=!1;if("undefined"!=typeof e&&e.nextTick)u=!0,a=function(){e.nextTick(n)};else if("function"==typeof setImmediate)a="undefined"!=typeof window?setImmediate.bind(window,n):function(){setImmediate(n)};else if("undefined"!=typeof MessageChannel){var l=new MessageChannel;l.port1.onmessage=n,a=function(){l.port2.postMessage(0)}}else a=function(){setTimeout(n,0)};t.exports=r}).call(this,e("_process"))},{_process:88}],92:[function(){"function"!=typeof Promise.prototype.done&&(Promise.prototype.done=function(){var e=arguments.length?this.then.apply(this,arguments):this;e.then(null,function(e){setTimeout(function(){throw e},0)})})},{}],"promise/polyfill.js":[function(e){e("asap");"undefined"==typeof Promise&&(Promise=e("./lib/core.js"),e("./lib/es6-extensions.js")),e("./polyfill-done.js")},{"./lib/core.js":89,"./lib/es6-extensions.js":90,"./polyfill-done.js":92,asap:91}]},{},[2])(2)});
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;"undefined"!=typeof window?t=window:"undefined"!=typeof global?t=global:"undefined"!=typeof self&&(t=self),t.less=e()}}(function(){return function e(t,n,r){function i(s,a){if(!n[s]){if(!t[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(o)return o(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[s]={exports:{}};t[s][0].call(c.exports,function(e){var n=t[s][1][e];return i(n?n:e)},c,c.exports,e,t,n,r)}return n[s].exports}for(var o="function"==typeof require&&require,s=0;r.length>s;s++)i(r[s]);return i}({1:[function(e,t){var n=e("./utils").addDataAttr,r=e("./browser");t.exports=function(e,t){n(t,r.currentScript(e)),void 0===t.isFileProtocol&&(t.isFileProtocol=/^(file|(chrome|safari)(-extension)?|resource|qrc|app):/.test(e.location.protocol)),t.async=t.async||!1,t.fileAsync=t.fileAsync||!1,t.poll=t.poll||(t.isFileProtocol?1e3:1500),t.env=t.env||("127.0.0.1"==e.location.hostname||"0.0.0.0"==e.location.hostname||"localhost"==e.location.hostname||e.location.port&&e.location.port.length>0||t.isFileProtocol?"development":"production");var i=/!dumpLineNumbers:(comments|mediaquery|all)/.exec(e.location.hash);i&&(t.dumpLineNumbers=i[1]),void 0===t.useFileCache&&(t.useFileCache=!0),void 0===t.onReady&&(t.onReady=!0)}},{"./browser":3,"./utils":9}],2:[function(e,t){e("promise/polyfill.js");var n=window.less||{};e("./add-default-options")(window,n);var r=t.exports=e("./index")(window,n);n.onReady&&(/!watch/.test(window.location.hash)&&r.watch(),r.pageLoadFinished=r.registerStylesheets().then(function(){return r.refresh("development"===r.env)}))},{"./add-default-options":1,"./index":7,"promise/polyfill.js":"promise/polyfill.js"}],3:[function(e,t){var n=e("./utils");t.exports={createCSS:function(e,t,r){var i=r.href||"",o="less:"+(r.title||n.extractId(i)),s=e.getElementById(o),a=!1,u=e.createElement("style");u.setAttribute("type","text/css"),r.media&&u.setAttribute("media",r.media),u.id=o,u.styleSheet||(u.appendChild(e.createTextNode(t)),a=null!==s&&s.childNodes.length>0&&u.childNodes.length>0&&s.firstChild.nodeValue===u.firstChild.nodeValue);var l=e.getElementsByTagName("head")[0];if(null===s||a===!1){var c=r&&r.nextSibling||null;c?c.parentNode.insertBefore(u,c):l.appendChild(u)}if(s&&a===!1&&s.parentNode.removeChild(s),u.styleSheet)try{u.styleSheet.cssText=t}catch(h){throw new Error("Couldn't reassign styleSheet.cssText.")}},currentScript:function(e){var t=e.document;return t.currentScript||function(){var e=t.getElementsByTagName("script");return e[e.length-1]}()}}},{"./utils":9}],4:[function(e,t){t.exports=function(e,t,n){var r=null;if("development"!==t.env)try{r="undefined"==typeof e.localStorage?null:e.localStorage}catch(i){}return{setCSS:function(e,t,i){if(r){n.info("saving "+e+" to cache.");try{r.setItem(e,i),r.setItem(e+":timestamp",t)}catch(o){n.error('failed to save "'+e+'" to local storage for caching.')}}},getCSS:function(e,t){var n=r&&r.getItem(e),i=r&&r.getItem(e+":timestamp");return i&&t.lastModified&&new Date(t.lastModified).valueOf()===new Date(i).valueOf()?n:void 0}}}},{}],5:[function(e,t){var n=e("./utils"),r=e("./browser");t.exports=function(e,t,i){function o(t,o){var s,a,u="less-error-message:"+n.extractId(o||""),l='<li><label>{line}</label><pre class="{class}">{content}</pre></li>',c=e.document.createElement("div"),h=[],f=t.filename||o,p=f.match(/([^\/]+(\?.*)?)$/)[1];c.id=u,c.className="less-error-message",a="<h3>"+(t.type||"Syntax")+"Error: "+(t.message||"There is an error in your .less file")+'</h3><p>in <a href="'+f+'">'+p+"</a> ";var d=function(e,t,n){void 0!==e.extract[t]&&h.push(l.replace(/\{line\}/,(parseInt(e.line,10)||0)+(t-1)).replace(/\{class\}/,n).replace(/\{content\}/,e.extract[t]))};t.extract&&(d(t,0,""),d(t,1,"line"),d(t,2,""),a+="on line "+t.line+", column "+(t.column+1)+":</p><ul>"+h.join("")+"</ul>"),t.stack&&(t.extract||i.logLevel>=4)&&(a+="<br/>Stack Trace</br />"+t.stack.split("\n").slice(1).join("<br/>")),c.innerHTML=a,r.createCSS(e.document,[".less-error-message ul, .less-error-message li {","list-style-type: none;","margin-right: 15px;","padding: 4px 0;","margin: 0;","}",".less-error-message label {","font-size: 12px;","margin-right: 15px;","padding: 4px 0;","color: #cc7777;","}",".less-error-message pre {","color: #dd6666;","padding: 4px 0;","margin: 0;","display: inline-block;","}",".less-error-message pre.line {","color: #ff0000;","}",".less-error-message h3 {","font-size: 20px;","font-weight: bold;","padding: 15px 0 5px 0;","margin: 0;","}",".less-error-message a {","color: #10a","}",".less-error-message .error {","color: red;","font-weight: bold;","padding-bottom: 2px;","border-bottom: 1px dashed red;","}"].join("\n"),{title:"error-message"}),c.style.cssText=["font-family: Arial, sans-serif","border: 1px solid #e00","background-color: #eee","border-radius: 5px","-webkit-border-radius: 5px","-moz-border-radius: 5px","color: #e00","padding: 15px","margin-bottom: 15px"].join(";"),"development"===i.env&&(s=setInterval(function(){var t=e.document,n=t.body;n&&(t.getElementById(u)?n.replaceChild(c,t.getElementById(u)):n.insertBefore(c,n.firstChild),clearInterval(s))},10))}function s(e,t){i.errorReporting&&"html"!==i.errorReporting?"console"===i.errorReporting?c(e,t):"function"==typeof i.errorReporting&&i.errorReporting("add",e,t):o(e,t)}function a(t){var r=e.document.getElementById("less-error-message:"+n.extractId(t));r&&r.parentNode.removeChild(r)}function u(){}function l(e){i.errorReporting&&"html"!==i.errorReporting?"console"===i.errorReporting?u(e):"function"==typeof i.errorReporting&&i.errorReporting("remove",e):a(e)}function c(e,n){var r="{line} {content}",o=e.filename||n,s=[],a=(e.type||"Syntax")+"Error: "+(e.message||"There is an error in your .less file")+" in "+o+" ",u=function(e,t,n){void 0!==e.extract[t]&&s.push(r.replace(/\{line\}/,(parseInt(e.line,10)||0)+(t-1)).replace(/\{class\}/,n).replace(/\{content\}/,e.extract[t]))};e.extract&&(u(e,0,""),u(e,1,"line"),u(e,2,""),a+="on line "+e.line+", column "+(e.column+1)+":\n"+s.join("\n")),e.stack&&(e.extract||i.logLevel>=4)&&(a+="\nStack Trace\n"+e.stack),t.logger.error(a)}return{add:s,remove:l}}},{"./browser":3,"./utils":9}],6:[function(e,t){t.exports=function(t,n){function r(){if(window.XMLHttpRequest&&!("file:"===window.location.protocol&&"ActiveXObject"in window))return new XMLHttpRequest;try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(e){return n.error("browser doesn't support AJAX."),null}}var i=e("../less/environment/abstract-file-manager.js"),o={},s=function(){};return s.prototype=new i,s.prototype.alwaysMakePathsAbsolute=function(){return!0},s.prototype.join=function(e,t){return e?this.extractUrlParts(t,e).path:t},s.prototype.doXHR=function(e,i,o,s){function a(t,n,r){t.status>=200&&300>t.status?n(t.responseText,t.getResponseHeader("Last-Modified")):"function"==typeof r&&r(t.status,e)}var u=r(),l=t.isFileProtocol?t.fileAsync:t.async;"function"==typeof u.overrideMimeType&&u.overrideMimeType("text/css"),n.debug("XHR: Getting '"+e+"'"),u.open("GET",e,l),u.setRequestHeader("Accept",i||"text/x-less, text/css; q=0.9, */*; q=0.5"),u.send(null),t.isFileProtocol&&!t.fileAsync?0===u.status||u.status>=200&&300>u.status?o(u.responseText):s(u.status,e):l?u.onreadystatechange=function(){4==u.readyState&&a(u,o,s)}:a(u,o,s)},s.prototype.supports=function(){return!0},s.prototype.clearFileCache=function(){o={}},s.prototype.loadFile=function(e,t,n,r,i){t&&!this.isPathAbsolute(e)&&(e=t+e),n=n||{};var s=this.extractUrlParts(e,window.location.href),a=s.url;if(n.useFileCache&&o[a])try{var u=o[a];i(null,{contents:u,filename:a,webInfo:{lastModified:new Date}})}catch(l){i({filename:a,message:"Error loading file "+a+" error was "+l.message})}else this.doXHR(a,n.mime,function(e,t){o[a]=e,i(null,{contents:e,filename:a,webInfo:{lastModified:t}})},function(e,t){i({type:"File",message:"'"+t+"' wasn't found ("+e+")",href:a})})},s}},{"../less/environment/abstract-file-manager.js":14}],7:[function(e,t){var n=e("./utils").addDataAttr,r=e("./browser");t.exports=function(t,i){function o(e){return i.postProcessor&&"function"==typeof i.postProcessor&&(e=i.postProcessor.call(e,e)||e),e}function s(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}function a(e,t){var n=Array.prototype.slice.call(arguments,2);return function(){var r=n.concat(Array.prototype.slice.call(arguments,0));return e.apply(t,r)}}function u(e){for(var t,n=f.getElementsByTagName("style"),r=0;n.length>r;r++)if(t=n[r],t.type.match(w)){var o=s(i);o.modifyVars=e;var u=t.innerHTML||"";o.filename=f.location.href.replace(/#.*$/,""),p.render(u,o,a(function(e,t,n){t?g.add(t,"inline"):(e.type="text/css",e.styleSheet?e.styleSheet.cssText=n.css:e.innerHTML=n.css)},null,t))}}function l(e,t,r,a,u){function l(n){var i=n.contents,s=n.filename,u=n.webInfo,l={currentDirectory:m.getPath(s),filename:s,rootFilename:s,relativeUrls:c.relativeUrls};if(l.entryPath=l.currentDirectory,l.rootpath=c.rootpath||l.currentDirectory,u&&(u.remaining=a,!c.modifyVars)){var h=y.getCSS(s,u);if(!r&&h)return u.local=!0,void t(null,h,i,e,u,s)}g.remove(s),c.rootFileInfo=l,p.render(i,c,function(n,r){n?(n.href=s,t(n)):(r.css=o(r.css),c.modifyVars||y.setCSS(e.href,u.lastModified,r.css),t(null,r.css,i,e,u,s))})}var c=s(i);n(c,e),c.mime=e.type,u&&(c.modifyVars=u),m.loadFile(e.href,null,c,d,function(e,n){return e?void t(e):void l(n)})}function c(e,t,n){for(var r=0;p.sheets.length>r;r++)l(p.sheets[r],e,t,p.sheets.length-(r+1),n)}function h(){"development"===p.env&&(p.watchTimer=setInterval(function(){p.watchMode&&(m.clearFileCache(),c(function(e,n,i,o){e?g.add(e,e.href||o.href):n&&r.createCSS(t.document,n,o)}))},i.poll))}var f=t.document,p=e("../less")();p.options=i;var d=p.environment,v=e("./file-manager")(i,p.logger),m=new v;d.addFileManager(m),p.FileManager=v,e("./log-listener")(p,i);var g=e("./error-reporting")(t,p,i),y=p.cache=i.cache||e("./cache")(t,i,p.logger);i.functions&&p.functions.functionRegistry.addMultiple(i.functions);var w=/^text\/(x-)?less$/;return p.watch=function(){return p.watchMode||(p.env="development",h()),this.watchMode=!0,!0},p.unwatch=function(){return clearInterval(p.watchTimer),this.watchMode=!1,!1},p.registerStylesheets=function(){return new Promise(function(e){var t=f.getElementsByTagName("link");p.sheets=[];for(var n=0;t.length>n;n++)("stylesheet/less"===t[n].rel||t[n].rel.match(/stylesheet/)&&t[n].type.match(w))&&p.sheets.push(t[n]);e()})},p.modifyVars=function(e){return p.refresh(!0,e,!1)},p.refresh=function(e,n,i){return(e||i)&&i!==!1&&m.clearFileCache(),new Promise(function(i,o){var s,a,l;s=a=new Date,c(function(e,n,u,c,h){return e?(g.add(e,e.href||c.href),void o(e)):(p.logger.info(h.local?"loading "+c.href+" from cache.":"rendered "+c.href+" successfully."),r.createCSS(t.document,n,c),p.logger.info("css for "+c.href+" generated in "+(new Date-a)+"ms"),0===h.remaining&&(l=new Date-s,p.logger.info("less has finished. css generated in "+l+"ms"),i({startTime:s,endTime:a,totalMilliseconds:l,sheets:p.sheets.length})),void(a=new Date))},e,n),u(n)})},p.refreshStyles=u,p}},{"../less":29,"./browser":3,"./cache":4,"./error-reporting":5,"./file-manager":6,"./log-listener":8,"./utils":9}],8:[function(e,t){t.exports=function(e,t){var n=4,r=3,i=2,o=1;t.logLevel="undefined"!=typeof t.logLevel?t.logLevel:"development"===t.env?r:o,t.loggers||(t.loggers=[{debug:function(e){t.logLevel>=n&&console.log(e)},info:function(e){t.logLevel>=r&&console.log(e)},warn:function(e){t.logLevel>=i&&console.warn(e)},error:function(e){t.logLevel>=o&&console.error(e)}}]);for(var s=0;t.loggers.length>s;s++)e.logger.addListener(t.loggers[s])}},{}],9:[function(e,t){t.exports={extractId:function(e){return e.replace(/^[a-z-]+:\/+?[^\/]+/,"").replace(/[\?\&]livereload=\w+/,"").replace(/^\//,"").replace(/\.[a-zA-Z]+$/,"").replace(/[^\.\w-]+/g,"-").replace(/\./g,":")},addDataAttr:function(e,t){for(var n in t.dataset)if(t.dataset.hasOwnProperty(n))if("env"===n||"dumpLineNumbers"===n||"rootpath"===n||"errorReporting"===n)e[n]=t.dataset[n];else try{e[n]=JSON.parse(t.dataset[n])}catch(r){}}}},{}],10:[function(e,t){var n={};t.exports=n;var r=function(e,t,n){if(e)for(var r=0;n.length>r;r++)e.hasOwnProperty(n[r])&&(t[n[r]]=e[n[r]])},i=["paths","relativeUrls","rootpath","strictImports","insecure","dumpLineNumbers","compress","syncImport","chunkInput","mime","useFileCache","processImports","reference","pluginManager"];n.Parse=function(e){r(e,this,i),"string"==typeof this.paths&&(this.paths=[this.paths])};var o=["paths","compress","ieCompat","strictMath","strictUnits","sourceMap","importMultiple","urlArgs","javascriptEnabled","pluginManager","importantScope"];n.Eval=function(e,t){r(e,this,o),this.frames=t||[],this.importantScope=this.importantScope||[]},n.Eval.prototype.inParenthesis=function(){this.parensStack||(this.parensStack=[]),this.parensStack.push(!0)},n.Eval.prototype.outOfParenthesis=function(){this.parensStack.pop()},n.Eval.prototype.isMathOn=function(){return this.strictMath?this.parensStack&&this.parensStack.length:!0},n.Eval.prototype.isPathRelative=function(e){return!/^(?:[a-z-]+:|\/|#)/i.test(e)},n.Eval.prototype.normalizePath=function(e){var t,n=e.split("/").reverse();for(e=[];0!==n.length;)switch(t=n.pop()){case".":break;case"..":0===e.length||".."===e[e.length-1]?e.push(t):e.pop();break;default:e.push(t)}return e.join("/")}},{}],11:[function(e,t){t.exports={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgrey:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",grey:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"}},{}],12:[function(e,t){t.exports={colors:e("./colors"),unitConversions:e("./unit-conversions")}},{"./colors":11,"./unit-conversions":13}],13:[function(e,t){t.exports={length:{m:1,cm:.01,mm:.001,"in":.0254,px:.0254/96,pt:.0254/72,pc:.0254/72*12},duration:{s:1,ms:.001},angle:{rad:1/(2*Math.PI),deg:1/360,grad:.0025,turn:1}}},{}],14:[function(e,t){var n=function(){};n.prototype.getPath=function(e){var t=e.lastIndexOf("?");return t>0&&(e=e.slice(0,t)),t=e.lastIndexOf("/"),0>t&&(t=e.lastIndexOf("\\")),0>t?"":e.slice(0,t+1)},n.prototype.tryAppendLessExtension=function(e){return/(\.[a-z]*$)|([\?;].*)$/.test(e)?e:e+".less"},n.prototype.supportsSync=function(){return!1},n.prototype.alwaysMakePathsAbsolute=function(){return!1},n.prototype.isPathAbsolute=function(e){return/^(?:[a-z-]+:|\/|\\|#)/i.test(e)},n.prototype.join=function(e,t){return e?e+t:t},n.prototype.pathDiff=function(e,t){var n,r,i,o,s=this.extractUrlParts(e),a=this.extractUrlParts(t),u="";if(s.hostPart!==a.hostPart)return"";for(r=Math.max(a.directories.length,s.directories.length),n=0;r>n&&a.directories[n]===s.directories[n];n++);for(o=a.directories.slice(n),i=s.directories.slice(n),n=0;o.length-1>n;n++)u+="../";for(n=0;i.length-1>n;n++)u+=i[n]+"/";return u},n.prototype.extractUrlParts=function(e,t){var n,r,i=/^((?:[a-z-]+:)?\/+?(?:[^\/\?#]*\/)|([\/\\]))?((?:[^\/\\\?#]*[\/\\])*)([^\/\\\?#]*)([#\?].*)?$/i,o=e.match(i),s={},a=[];if(!o)throw new Error("Could not parse sheet href - '"+e+"'");if(t&&(!o[1]||o[2])){if(r=t.match(i),!r)throw new Error("Could not parse page url - '"+t+"'");o[1]=o[1]||r[1]||"",o[2]||(o[3]=r[3]+o[3])}if(o[3]){for(a=o[3].replace(/\\/g,"/").split("/"),n=0;a.length>n;n++)"."===a[n]&&(a.splice(n,1),n-=1);for(n=0;a.length>n;n++)".."===a[n]&&n>0&&(a.splice(n-1,2),n-=2)}return s.hostPart=o[1],s.directories=a,s.path=(o[1]||"")+a.join("/"),s.fileUrl=s.path+(o[4]||""),s.url=s.fileUrl+(o[5]||""),s},t.exports=n},{}],15:[function(e,t){var n=e("../logger"),r=function(e,t){this.fileManagers=t||[],e=e||{};for(var n=["encodeBase64","mimeLookup","charsetLookup","getSourceMapGenerator"],r=[],i=r.concat(n),o=0;i.length>o;o++){var s=i[o],a=e[s];a?this[s]=a.bind(e):r.length>o&&this.warn("missing required function in environment - "+s)}};r.prototype.getFileManager=function(e,t,r,i,o){e||n.warn("getFileManager called with no filename.. Please report this issue. continuing."),null==t&&n.warn("getFileManager called with null directory.. Please report this issue. continuing.");var s=this.fileManagers;r.pluginManager&&(s=[].concat(s).concat(r.pluginManager.getFileManagers()));for(var a=s.length-1;a>=0;a--){var u=s[a];if(u[o?"supportsSync":"supports"](e,t,r,i))return u}return null},r.prototype.addFileManager=function(e){this.fileManagers.push(e)},r.prototype.clearFileManagers=function(){this.fileManagers=[]},t.exports=r},{"../logger":31}],16:[function(e){function t(e,t,r){var i,o,s,a,u=t.alpha,l=r.alpha,c=[];s=l+u*(1-l);for(var h=0;3>h;h++)i=t.rgb[h]/255,o=r.rgb[h]/255,a=e(i,o),s&&(a=(l*o+u*(i-l*(i+o-a)))/s),c[h]=255*a;return new n(c,s)}var n=e("../tree/color"),r=e("./function-registry"),i={multiply:function(e,t){return e*t},screen:function(e,t){return e+t-e*t},overlay:function(e,t){return e*=2,1>=e?i.multiply(e,t):i.screen(e-1,t)},softlight:function(e,t){var n=1,r=e;return t>.5&&(r=1,n=e>.25?Math.sqrt(e):((16*e-12)*e+4)*e),e-(1-2*t)*r*(n-e)},hardlight:function(e,t){return i.overlay(t,e)},difference:function(e,t){return Math.abs(e-t)},exclusion:function(e,t){return e+t-2*e*t},average:function(e,t){return(e+t)/2},negation:function(e,t){return 1-Math.abs(e+t-1)}};for(var o in i)i.hasOwnProperty(o)&&(t[o]=t.bind(null,i[o]));r.addMultiple(t)},{"../tree/color":47,"./function-registry":21}],17:[function(e){function t(e){return Math.min(1,Math.max(0,e))}function n(e){return o.hsla(e.h,e.s,e.l,e.a)}function r(e){if(e instanceof s)return parseFloat(e.unit.is("%")?e.value/100:e.value);if("number"==typeof e)return e;throw{type:"Argument",message:"color functions take numbers as parameters"}}function i(e,t){return e instanceof s&&e.unit.is("%")?parseFloat(e.value*t/100):r(e)}var o,s=e("../tree/dimension"),a=e("../tree/color"),u=e("../tree/quoted"),l=e("../tree/anonymous"),c=e("./function-registry");o={rgb:function(e,t,n){return o.rgba(e,t,n,1)},rgba:function(e,t,n,o){var s=[e,t,n].map(function(e){return i(e,255)});return o=r(o),new a(s,o)},hsl:function(e,t,n){return o.hsla(e,t,n,1)},hsla:function(e,n,i,s){function a(e){return e=0>e?e+1:e>1?e-1:e,1>6*e?l+(u-l)*e*6:1>2*e?u:2>3*e?l+(u-l)*(2/3-e)*6:l}e=r(e)%360/360,n=t(r(n)),i=t(r(i)),s=t(r(s));var u=.5>=i?i*(n+1):i+n-i*n,l=2*i-u;return o.rgba(255*a(e+1/3),255*a(e),255*a(e-1/3),s)},hsv:function(e,t,n){return o.hsva(e,t,n,1)},hsva:function(e,t,n,i){e=r(e)%360/360*360,t=r(t),n=r(n),i=r(i);var s,a;s=Math.floor(e/60%6),a=e/60-s;var u=[n,n*(1-t),n*(1-a*t),n*(1-(1-a)*t)],l=[[0,3,1],[2,0,1],[1,0,3],[1,2,0],[3,1,0],[0,1,2]];return o.rgba(255*u[l[s][0]],255*u[l[s][1]],255*u[l[s][2]],i)},hue:function(e){return new s(e.toHSL().h)},saturation:function(e){return new s(100*e.toHSL().s,"%")},lightness:function(e){return new s(100*e.toHSL().l,"%")},hsvhue:function(e){return new s(e.toHSV().h)},hsvsaturation:function(e){return new s(100*e.toHSV().s,"%")},hsvvalue:function(e){return new s(100*e.toHSV().v,"%")},red:function(e){return new s(e.rgb[0])},green:function(e){return new s(e.rgb[1])},blue:function(e){return new s(e.rgb[2])},alpha:function(e){return new s(e.toHSL().a)},luma:function(e){return new s(e.luma()*e.alpha*100,"%")},luminance:function(e){var t=.2126*e.rgb[0]/255+.7152*e.rgb[1]/255+.0722*e.rgb[2]/255;return new s(t*e.alpha*100,"%")},saturate:function(e,r){if(!e.rgb)return null;var i=e.toHSL();return i.s+=r.value/100,i.s=t(i.s),n(i)},desaturate:function(e,r){var i=e.toHSL();return i.s-=r.value/100,i.s=t(i.s),n(i)},lighten:function(e,r){var i=e.toHSL();return i.l+=r.value/100,i.l=t(i.l),n(i)},darken:function(e,r){var i=e.toHSL();return i.l-=r.value/100,i.l=t(i.l),n(i)},fadein:function(e,r){var i=e.toHSL();return i.a+=r.value/100,i.a=t(i.a),n(i)},fadeout:function(e,r){var i=e.toHSL();return i.a-=r.value/100,i.a=t(i.a),n(i)},fade:function(e,r){var i=e.toHSL();return i.a=r.value/100,i.a=t(i.a),n(i)},spin:function(e,t){var r=e.toHSL(),i=(r.h+t.value)%360;return r.h=0>i?360+i:i,n(r)},mix:function(e,t,n){n||(n=new s(50));var r=n.value/100,i=2*r-1,o=e.toHSL().a-t.toHSL().a,u=((i*o==-1?i:(i+o)/(1+i*o))+1)/2,l=1-u,c=[e.rgb[0]*u+t.rgb[0]*l,e.rgb[1]*u+t.rgb[1]*l,e.rgb[2]*u+t.rgb[2]*l],h=e.alpha*r+t.alpha*(1-r);return new a(c,h)},greyscale:function(e){return o.desaturate(e,new s(100))},contrast:function(e,t,n,i){if(!e.rgb)return null;if("undefined"==typeof n&&(n=o.rgba(255,255,255,1)),"undefined"==typeof t&&(t=o.rgba(0,0,0,1)),t.luma()>n.luma()){var s=n;n=t,t=s}return i="undefined"==typeof i?.43:r(i),e.luma()<i?n:t},argb:function(e){return new l(e.toARGB())},color:function(e){if(e instanceof u&&/^#([a-f0-9]{6}|[a-f0-9]{3})$/i.test(e.value))return new a(e.value.slice(1));if(e instanceof a||(e=a.fromKeyword(e.value)))return e.value=void 0,e;throw{type:"Argument",message:"argument must be a color keyword or 3/6 digit hex e.g. #FFF"}},tint:function(e,t){return o.mix(o.rgb(255,255,255),e,t)},shade:function(e,t){return o.mix(o.rgb(0,0,0),e,t)}},c.addMultiple(o)},{"../tree/anonymous":43,"../tree/color":47,"../tree/dimension":53,"../tree/quoted":70,"./function-registry":21}],18:[function(e,t){t.exports=function(t){var n=e("../tree/quoted"),r=e("../tree/url"),i=e("./function-registry"),o=function(e,t){return new r(t,e.index,e.currentFileInfo).eval(e.context)},s=e("../logger");i.add("data-uri",function(e,i){i||(i=e,e=null);var a=e&&e.value,u=i.value,l=this.currentFileInfo,c=l.relativeUrls?l.currentDirectory:l.entryPath,h=u.indexOf("#"),f="";-1!==h&&(f=u.slice(h),u=u.slice(0,h));var p=t.getFileManager(u,c,this.context,t,!0);if(!p)return o(this,i);var d=!1;if(e)d=/;base64$/.test(a);else{if(a=t.mimeLookup(u),"image/svg+xml"===a)d=!1;else{var v=t.charsetLookup(a);d=["US-ASCII","UTF-8"].indexOf(v)<0}d&&(a+=";base64")}var m=p.loadFileSync(u,c,this.context,t);if(!m.contents)return s.warn("Skipped data-uri embedding of "+u+" because file not found"),o(this,i||e);var g=m.contents;if(d&&!t.encodeBase64)return o(this,i);g=d?t.encodeBase64(g):encodeURIComponent(g);var y="data:"+a+","+g+f,w=32768;return y.length>=w&&this.context.ieCompat!==!1?(s.warn("Skipped data-uri embedding of "+u+" because its size ("+y.length+" characters) exceeds IE8-safe "+w+" characters!"),o(this,i||e)):new r(new n('"'+y+'"',y,!1,this.index,this.currentFileInfo),this.index,this.currentFileInfo)})}},{"../logger":31,"../tree/quoted":70,"../tree/url":77,"./function-registry":21}],19:[function(e,t){var n=e("../tree/keyword"),r=e("./function-registry"),i={eval:function(){var e=this.value_,t=this.error_;if(t)throw t;return null!=e?e?n.True:n.False:void 0},value:function(e){this.value_=e},error:function(e){this.error_=e},reset:function(){this.value_=this.error_=null}};r.add("default",i.eval.bind(i)),t.exports=i},{"../tree/keyword":62,"./function-registry":21}],20:[function(e,t){var n=e("./function-registry"),r=function(e,t,r,i){this.name=e.toLowerCase(),this.func=n.get(this.name),this.index=r,this.context=t,this.currentFileInfo=i};r.prototype.isValid=function(){return Boolean(this.func)},r.prototype.call=function(e){return this.func.apply(this,e)},t.exports=r},{"./function-registry":21}],21:[function(e,t){t.exports={_data:{},add:function(e,t){this._data.hasOwnProperty(e),this._data[e]=t},addMultiple:function(e){Object.keys(e).forEach(function(t){this.add(t,e[t])}.bind(this))},get:function(e){return this._data[e]}}},{}],22:[function(e,t){t.exports=function(t){var n={functionRegistry:e("./function-registry"),functionCaller:e("./function-caller")};return e("./default"),e("./color"),e("./color-blending"),e("./data-uri")(t),e("./math"),e("./number"),e("./string"),e("./svg")(t),e("./types"),n}},{"./color":17,"./color-blending":16,"./data-uri":18,"./default":19,"./function-caller":20,"./function-registry":21,"./math":23,"./number":24,"./string":25,"./svg":26,"./types":27}],23:[function(e){function t(e,t,r){if(!(r instanceof n))throw{type:"Argument",message:"argument must be a number"};return null==t?t=r.unit:r=r.unify(),new n(e(parseFloat(r.value)),t)}var n=e("../tree/dimension"),r=e("./function-registry"),i={ceil:null,floor:null,sqrt:null,abs:null,tan:"",sin:"",cos:"",atan:"rad",asin:"rad",acos:"rad"};for(var o in i)i.hasOwnProperty(o)&&(i[o]=t.bind(null,Math[o],i[o]));i.round=function(e,n){var r="undefined"==typeof n?0:n.value;return t(function(e){return e.toFixed(r)},null,e)},r.addMultiple(i)},{"../tree/dimension":53,"./function-registry":21}],24:[function(e){var t=e("../tree/dimension"),n=e("../tree/anonymous"),r=e("./function-registry"),i=function(e,r){switch(r=Array.prototype.slice.call(r),r.length){case 0:throw{type:"Argument",message:"one or more arguments required"}}var i,o,s,a,u,l,c,h,f=[],p={};for(i=0;r.length>i;i++)if(s=r[i],s instanceof t)if(a=""===s.unit.toString()&&void 0!==h?new t(s.value,h).unify():s.unify(),l=""===a.unit.toString()&&void 0!==c?c:a.unit.toString(),c=""!==l&&void 0===c||""!==l&&""===f[0].unify().unit.toString()?l:c,h=""!==l&&void 0===h?s.unit.toString():h,o=void 0!==p[""]&&""!==l&&l===c?p[""]:p[l],void 0!==o)u=""===f[o].unit.toString()&&void 0!==h?new t(f[o].value,h).unify():f[o].unify(),(e&&u.value>a.value||!e&&a.value>u.value)&&(f[o]=s);else{if(void 0!==c&&l!==c)throw{type:"Argument",message:"incompatible types"};p[l]=f.length,f.push(s)}else Array.isArray(r[i].value)&&Array.prototype.push.apply(r,Array.prototype.slice.call(r[i].value));return 1==f.length?f[0]:(r=f.map(function(e){return e.toCSS(this.context)}).join(this.context.compress?",":", "),new n((e?"min":"max")+"("+r+")"))};r.addMultiple({min:function(){return i(!0,arguments)},max:function(){return i(!1,arguments)},convert:function(e,t){return e.convertTo(t.value)},pi:function(){return new t(Math.PI)},mod:function(e,n){return new t(e.value%n.value,e.unit)},pow:function(e,n){if("number"==typeof e&&"number"==typeof n)e=new t(e),n=new t(n);else if(!(e instanceof t&&n instanceof t))throw{type:"Argument",message:"arguments must be numbers"};return new t(Math.pow(e.value,n.value),e.unit)},percentage:function(e){return new t(100*e.value,"%")}})},{"../tree/anonymous":43,"../tree/dimension":53,"./function-registry":21}],25:[function(e){var t=e("../tree/quoted"),n=e("../tree/anonymous"),r=e("../tree/javascript"),i=e("./function-registry");i.addMultiple({e:function(e){return new n(e instanceof r?e.evaluated:e.value)},escape:function(e){return new n(encodeURI(e.value).replace(/=/g,"%3D").replace(/:/g,"%3A").replace(/#/g,"%23").replace(/;/g,"%3B").replace(/\(/g,"%28").replace(/\)/g,"%29"))},replace:function(e,n,r,i){var o=e.value;return o=o.replace(new RegExp(n.value,i?i.value:""),r.value),new t(e.quote||"",o,e.escaped)},"%":function(e){for(var n=Array.prototype.slice.call(arguments,1),r=e.value,i=0;n.length>i;i++)r=r.replace(/%[sda]/i,function(e){var t=e.match(/s/i)?n[i].value:n[i].toCSS();return e.match(/[A-Z]$/)?encodeURIComponent(t):t});return r=r.replace(/%%/g,"%"),new t(e.quote||"",r,e.escaped)}})},{"../tree/anonymous":43,"../tree/javascript":60,"../tree/quoted":70,"./function-registry":21}],26:[function(e,t){t.exports=function(){var t=e("../tree/dimension"),n=e("../tree/color"),r=e("../tree/expression"),i=e("../tree/quoted"),o=e("../tree/url"),s=e("./function-registry");s.add("svg-gradient",function(e){function s(){throw{type:"Argument",message:"svg-gradient expects direction, start_color [start_position], [color position,]..., end_color [end_position]"}}arguments.length<3&&s();var a,u,l,c,h,f,p,d=Array.prototype.slice.call(arguments,1),v="linear",m='x="0" y="0" width="1" height="1"',g={compress:!1},y=e.toCSS(g);switch(y){case"to bottom":a='x1="0%" y1="0%" x2="0%" y2="100%"';break;case"to right":a='x1="0%" y1="0%" x2="100%" y2="0%"';break;case"to bottom right":a='x1="0%" y1="0%" x2="100%" y2="100%"';break;case"to top right":a='x1="0%" y1="100%" x2="100%" y2="0%"';break;case"ellipse":case"ellipse at center":v="radial",a='cx="50%" cy="50%" r="75%"',m='x="-50" y="-50" width="101" height="101"';break;default:throw{type:"Argument",message:"svg-gradient direction must be 'to bottom', 'to right', 'to bottom right', 'to top right' or 'ellipse at center'"}}for(u='<?xml version="1.0" ?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100%" height="100%" viewBox="0 0 1 1" preserveAspectRatio="none"><'+v+'Gradient id="gradient" gradientUnits="userSpaceOnUse" '+a+">",l=0;d.length>l;l+=1)d[l]instanceof r?(c=d[l].value[0],h=d[l].value[1]):(c=d[l],h=void 0),c instanceof n&&((0===l||l+1===d.length)&&void 0===h||h instanceof t)||s(),f=h?h.toCSS(g):0===l?"0%":"100%",p=c.alpha,u+='<stop offset="'+f+'" stop-color="'+c.toRGB()+'"'+(1>p?' stop-opacity="'+p+'"':"")+"/>";return u+="</"+v+"Gradient><rect "+m+' fill="url(#gradient)" /></svg>',u=encodeURIComponent(u),u="data:image/svg+xml,"+u,new o(new i("'"+u+"'",u,!1,this.index,this.currentFileInfo),this.index,this.currentFileInfo)})}},{"../tree/color":47,"../tree/dimension":53,"../tree/expression":56,"../tree/quoted":70,"../tree/url":77,"./function-registry":21}],27:[function(e){var t=e("../tree/keyword"),n=e("../tree/detached-ruleset"),r=e("../tree/dimension"),i=e("../tree/color"),o=e("../tree/quoted"),s=e("../tree/anonymous"),a=e("../tree/url"),u=e("../tree/operation"),l=e("./function-registry"),c=function(e,n){return e instanceof n?t.True:t.False},h=function(e,n){if(void 0===n)throw{type:"Argument",message:"missing the required second argument to isunit."};
if(n="string"==typeof n.value?n.value:n,"string"!=typeof n)throw{type:"Argument",message:"Second argument to isunit should be a unit or a string."};return e instanceof r&&e.unit.is(n)?t.True:t.False},f=function(e){var t=Array.isArray(e.value)?e.value:Array(e);return t.filter(function(e){return"Comment"===e.type?!1:!0})};l.addMultiple({isruleset:function(e){return c(e,n)},iscolor:function(e){return c(e,i)},isnumber:function(e){return c(e,r)},isstring:function(e){return c(e,o)},iskeyword:function(e){return c(e,t)},isurl:function(e){return c(e,a)},ispixel:function(e){return h(e,"px")},ispercentage:function(e){return h(e,"%")},isem:function(e){return h(e,"em")},isunit:h,unit:function(e,n){if(!(e instanceof r))throw{type:"Argument",message:"the first argument to unit must be a number"+(e instanceof u?". Have you forgotten parenthesis?":"")};return n=n?n instanceof t?n.value:n.toCSS():"",new r(e.value,n)},"get-unit":function(e){return new s(e.unit)},extract:function(e,t){return t=t.value-1,f(e)[t]},length:function(e){return new r(f(e).length)}})},{"../tree/anonymous":43,"../tree/color":47,"../tree/detached-ruleset":52,"../tree/dimension":53,"../tree/keyword":62,"../tree/operation":68,"../tree/quoted":70,"../tree/url":77,"./function-registry":21}],28:[function(e,t){var n=e("./contexts"),r=e("./parser/parser");t.exports=function(e){var t=function(e,t){this.rootFilename=t.filename,this.paths=e.paths||[],this.contents={},this.contentsIgnoredChars={},this.mime=e.mime,this.error=null,this.context=e,this.queue=[],this.files={}};return t.prototype.push=function(t,i,o,s,a){var u=this;this.queue.push(t);var l=function(e,n,r){u.queue.splice(u.queue.indexOf(t),1);var i=r===u.rootFilename;s.optional&&e?a(null,{rules:[]},!1,null):(u.files[r]=n,e&&!u.error&&(u.error=e),a(e,n,i,r))},c={relativeUrls:this.context.relativeUrls,entryPath:o.entryPath,rootpath:o.rootpath,rootFilename:o.rootFilename},h=e.getFileManager(t,o.currentDirectory,this.context,e);if(!h)return void l({message:"Could not find a file-manager for "+t});i&&(t=h.tryAppendLessExtension(t));var f=function(e){var t=e.filename,i=e.contents.replace(/^\uFEFF/,"");c.currentDirectory=h.getPath(t),c.relativeUrls&&(c.rootpath=h.join(u.context.rootpath||"",h.pathDiff(c.currentDirectory,c.entryPath)),!h.isPathAbsolute(c.rootpath)&&h.alwaysMakePathsAbsolute()&&(c.rootpath=h.join(c.entryPath,c.rootpath))),c.filename=t;var a=new n.Parse(u.context);a.processImports=!1,u.contents[t]=i,(o.reference||s.reference)&&(c.reference=!0),s.inline?l(null,i,t):new r(a,u,c).parse(i,function(e,n){l(e,n,t)})},p=h.loadFile(t,o.currentDirectory,this.context,e,function(e,t){e?l(e):f(t)});p&&p.then(f,l)},t}},{"./contexts":10,"./parser/parser":36}],29:[function(e,t){t.exports=function(t,n){var r,i,o,s,a,u={version:[2,4,0],data:e("./data"),tree:e("./tree"),Environment:a=e("./environment/environment"),AbstractFileManager:e("./environment/abstract-file-manager"),environment:t=new a(t,n),visitors:e("./visitors"),Parser:e("./parser/parser"),functions:e("./functions")(t),contexts:e("./contexts"),SourceMapOutput:r=e("./source-map-output")(t),SourceMapBuilder:i=e("./source-map-builder")(r,t),ParseTree:o=e("./parse-tree")(i),ImportManager:s=e("./import-manager")(t),render:e("./render")(t,o,s),parse:e("./parse")(t,o,s),LessError:e("./less-error"),transformTree:e("./transform-tree"),utils:e("./utils"),PluginManager:e("./plugin-manager"),logger:e("./logger")};return u}},{"./contexts":10,"./data":12,"./environment/abstract-file-manager":14,"./environment/environment":15,"./functions":22,"./import-manager":28,"./less-error":30,"./logger":31,"./parse":33,"./parse-tree":32,"./parser/parser":36,"./plugin-manager":37,"./render":38,"./source-map-builder":39,"./source-map-output":40,"./transform-tree":41,"./tree":59,"./utils":80,"./visitors":84}],30:[function(e,t){var n=e("./utils"),r=t.exports=function(e,t,r){Error.call(this);var i=e.filename||r;if(t&&i){var o=t.contents[i],s=n.getLocation(e.index,o),a=s.line,u=s.column,l=e.call&&n.getLocation(e.call,o).line,c=o.split("\n");this.type=e.type||"Syntax",this.filename=i,this.index=e.index,this.line="number"==typeof a?a+1:null,this.callLine=l+1,this.callExtract=c[l],this.column=u,this.extract=[c[a-1],c[a],c[a+1]]}this.message=e.message,this.stack=e.stack};if("undefined"==typeof Object.create){var i=function(){};i.prototype=Error.prototype,r.prototype=new i}else r.prototype=Object.create(Error.prototype);r.prototype.constructor=r},{"./utils":80}],31:[function(e,t){t.exports={error:function(e){this._fireEvent("error",e)},warn:function(e){this._fireEvent("warn",e)},info:function(e){this._fireEvent("info",e)},debug:function(e){this._fireEvent("debug",e)},addListener:function(e){this._listeners.push(e)},removeListener:function(e){for(var t=0;this._listeners.length>t;t++)if(this._listeners[t]===e)return void this._listeners.splice(t,1)},_fireEvent:function(e,t){for(var n=0;this._listeners.length>n;n++){var r=this._listeners[n][e];r&&r(t)}},_listeners:[]}},{}],32:[function(e,t){var n=e("./less-error"),r=e("./transform-tree"),i=e("./logger");t.exports=function(e){var t=function(e,t){this.root=e,this.imports=t};return t.prototype.toCSS=function(t){var o,s,a={};try{o=r(this.root,t)}catch(u){throw new n(u,this.imports)}try{var l=Boolean(t.compress);l&&i.warn("The compress option has been deprecated. We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.");var c={compress:l,dumpLineNumbers:t.dumpLineNumbers,strictUnits:Boolean(t.strictUnits),numPrecision:8};t.sourceMap?(s=new e(t.sourceMap),a.css=s.toCSS(o,c,this.imports)):a.css=o.toCSS(c)}catch(u){throw new n(u,this.imports)}if(t.pluginManager)for(var h=t.pluginManager.getPostProcessors(),f=0;h.length>f;f++)a.css=h[f].process(a.css,{sourceMap:s,options:t,imports:this.imports});t.sourceMap&&(a.map=s.getExternalSourceMap()),a.imports=[];for(var p in this.imports.files)this.imports.files.hasOwnProperty(p)&&p!==this.imports.rootFilename&&a.imports.push(p);return a},t}},{"./less-error":30,"./logger":31,"./transform-tree":41}],33:[function(e,t){var n,r=e("./contexts"),i=e("./parser/parser"),o=e("./plugin-manager");t.exports=function(t,s,a){var u=function(t,s,l){if(s=s||{},"function"==typeof s&&(l=s,s={}),!l){n||(n="undefined"==typeof Promise?e("promise"):Promise);var c=this;return new n(function(e,n){u.call(c,t,s,function(t,r){t?n(t):e(r)})})}var h,f,p=new o(this);if(p.addPlugins(s.plugins),s.pluginManager=p,h=new r.Parse(s),s.rootFileInfo)f=s.rootFileInfo;else{var d=s.filename||"input",v=d.replace(/[^\/\\]*$/,"");f={filename:d,relativeUrls:h.relativeUrls,rootpath:h.rootpath||"",currentDirectory:v,entryPath:v,rootFilename:d},f.rootpath&&"/"!==f.rootpath.slice(-1)&&(f.rootpath+="/")}var m=new a(h,f);new i(h,m,f).parse(t,function(e,t){return e?l(e):void l(null,t,m,s)},s)};return u}},{"./contexts":10,"./parser/parser":36,"./plugin-manager":37,promise:void 0}],34:[function(e,t){t.exports=function(e,t){function n(t){var n=a-m;512>n&&!t||!n||(v.push(e.slice(m,a+1)),m=a+1)}var r,i,o,s,a,u,l,c,h,f=e.length,p=0,d=0,v=[],m=0;for(a=0;f>a;a++)if(l=e.charCodeAt(a),!(l>=97&&122>=l||34>l))switch(l){case 40:d++,i=a;continue;case 41:if(--d<0)return t("missing opening `(`",a);continue;case 59:d||n();continue;case 123:p++,r=a;continue;case 125:if(--p<0)return t("missing opening `{`",a);p||d||n();continue;case 92:if(f-1>a){a++;continue}return t("unescaped `\\`",a);case 34:case 39:case 96:for(h=0,u=a,a+=1;f>a;a++)if(c=e.charCodeAt(a),!(c>96)){if(c==l){h=1;break}if(92==c){if(a==f-1)return t("unescaped `\\`",a);a++}}if(h)continue;return t("unmatched `"+String.fromCharCode(l)+"`",u);case 47:if(d||a==f-1)continue;if(c=e.charCodeAt(a+1),47==c)for(a+=2;f>a&&(c=e.charCodeAt(a),!(13>=c)||10!=c&&13!=c);a++);else if(42==c){for(o=u=a,a+=2;f-1>a&&(c=e.charCodeAt(a),125==c&&(s=a),42!=c||47!=e.charCodeAt(a+1));a++);if(a==f-1)return t("missing closing `*/`",u);a++}continue;case 42:if(f-1>a&&47==e.charCodeAt(a+1))return t("unmatched `/*`",a);continue}return 0!==p?o>r&&s>o?t("missing closing `}` or `*/`",r):t("missing closing `}`",r):0!==d?t("missing closing `)`",i):(n(!0),v)}},{}],35:[function(e,t){var n=e("./chunker");t.exports=function(){function e(){c.i>u&&(a=a.slice(c.i-u),u=c.i)}var t,r,i,o,s,a,u,l=[],c={};c.save=function(){u=c.i,l.push({current:a,i:c.i,j:r})},c.restore=function(e){(c.i>i||c.i===i&&e&&!o)&&(i=c.i,o=e);var t=l.pop();a=t.current,u=c.i=t.i,r=t.j},c.forget=function(){l.pop()},c.isWhitespace=function(e){var n=c.i+(e||0),r=t.charCodeAt(n);return r===h||r===d||r===f||r===p},c.$=function(n){var r,i,o=typeof n;return"string"===o?t.charAt(c.i)!==n?null:(w(1),n):(e(),(r=n.exec(a))?(i=r[0].length,w(i),"string"==typeof r?r:1===r.length?r[0]:r):null)},c.$re=function(e){c.i>u&&(a=a.slice(c.i-u),u=c.i);var t=e.exec(a);return t?(w(t[0].length),"string"==typeof t?t:1===t.length?t[0]:t):null},c.$char=function(e){return t.charAt(c.i)!==e?null:(w(1),e)};var h=32,f=9,p=10,d=13,v=43,m=44,g=47,y=57;c.autoCommentAbsorb=!0,c.commentStore=[],c.finished=!1;var w=function(e){for(var n,i,o,l=c.i,v=r,m=c.i-u,y=c.i+a.length-m,x=c.i+=e,b=t;y>c.i;c.i++){if(n=b.charCodeAt(c.i),c.autoCommentAbsorb&&n===g){if(i=b.charAt(c.i+1),"/"===i){o={index:c.i,isLineComment:!0};var S=b.indexOf("\n",c.i+1);0>S&&(S=y),c.i=S,o.text=b.substr(o.i,c.i-o.i),c.commentStore.push(o);continue}if("*"===i){var C=b.substr(c.i),k=C.match(/^\/\*(?:[^*]|\*+[^\/*])*\*+\//);if(k){o={index:c.i,text:k[0],isLineComment:!1},c.i+=o.text.length-1,c.commentStore.push(o);continue}}break}if(n!==h&&n!==p&&n!==f&&n!==d)break}if(a=a.slice(e+c.i-x+m),u=c.i,!a.length){if(s.length-1>r)return a=s[++r],w(0),!0;c.finished=!0}return l!==c.i||v!==r};return c.peek=function(e){return"string"==typeof e?t.charAt(c.i)===e:e.test(a)},c.peekChar=function(e){return t.charAt(c.i)===e},c.currentChar=function(){return t.charAt(c.i)},c.getInput=function(){return t},c.peekNotNumeric=function(){var e=t.charCodeAt(c.i);return e>y||v>e||e===g||e===m},c.start=function(e,o,l){t=e,c.i=r=u=i=0,s=o?n(e,l):[e],a=s[0],w(0)},c.end=function(){var e,n=c.i>=t.length;return i>c.i&&(e=o,c.i=i),{isFinished:n,furthest:c.i,furthestPossibleErrorMessage:e,furthestReachedEnd:c.i>=t.length-1,furthestChar:t[c.i]}},c}},{"./chunker":34}],36:[function(e,t){var n=e("../less-error"),r=e("../tree"),i=e("../visitors"),o=e("./parser-input"),s=e("../utils"),a=function u(e,t,a){function l(e,t){var n="[object Function]"===Object.prototype.toString.call(e)?e.call(p):d.$(e);return n?n:void h(t||("string"==typeof e?"expected '"+e+"' got '"+d.currentChar()+"'":"unexpected token"))}function c(e,t){return d.$char(e)?e:void h(t||"expected '"+e+"' got '"+d.currentChar()+"'")}function h(e,r){throw new n({index:d.i,filename:a.filename,type:r||"Syntax",message:e},t)}function f(e){var t=a.filename;return{lineNumber:s.getLocation(e,d.getInput()).line+1,fileName:t}}var p,d=o();return{parse:function(o,s,l){var c,h,f,p,v=null,m="";if(h=l&&l.globalVars?u.serializeVars(l.globalVars)+"\n":"",f=l&&l.modifyVars?"\n"+u.serializeVars(l.modifyVars):"",e.pluginManager)for(var g=e.pluginManager.getPreProcessors(),y=0;g.length>y;y++)o=g[y].process(o,{context:e,imports:t,fileInfo:a});(h||l&&l.banner)&&(m=(l&&l.banner?l.banner:"")+h,p=t.contentsIgnoredChars,p[a.filename]=p[a.filename]||0,p[a.filename]+=m.length),o=o.replace(/\r\n?/g,"\n"),o=m+o.replace(/^\uFEFF/,"")+f,t.contents[a.filename]=o;try{d.start(o,e.chunkInput,function(e,r){throw n({index:r,type:"Parse",message:e,filename:a.filename},t)}),c=new r.Ruleset(null,this.parsers.primary()),c.root=!0,c.firstRoot=!0}catch(w){return s(new n(w,t,a.filename))}var x=d.end();if(!x.isFinished){var b=x.furthestPossibleErrorMessage;b||(b="Unrecognised input","}"===x.furthestChar?b+=". Possibly missing opening '{'":")"===x.furthestChar?b+=". Possibly missing opening '('":x.furthestReachedEnd&&(b+=". Possibly missing something")),v=new n({type:"Parse",message:b,index:x.furthest,filename:a.filename},t)}var S=function(e){return e=v||e||t.error,e?(e instanceof n||(e=new n(e,t,a.filename)),s(e)):s(null,c)};return e.processImports===!1?S():void new i.ImportVisitor(t,S).run(c)},parsers:p={primary:function(){for(var e,t=this.mixin,n=[];;){for(;e=this.comment(),e;)n.push(e);if(d.finished)break;if(d.peek("}"))break;if(e=this.extendRule())n=n.concat(e);else if(e=t.definition()||this.rule()||this.ruleset()||t.call()||this.rulesetCall()||this.directive())n.push(e);else if(!d.$re(/^[\s\n]+/)&&!d.$re(/^;+/))break}return n},comment:function(){if(d.commentStore.length){var e=d.commentStore.shift();return new r.Comment(e.text,e.isLineComment,e.index,a)}},entities:{quoted:function(){var e,t=d.i;return e=d.$re(/^(~)?("((?:[^"\\\r\n]|\\.)*)"|'((?:[^'\\\r\n]|\\.)*)')/),e?new r.Quoted(e[2],e[3]||e[4],Boolean(e[1]),t,a):void 0},keyword:function(){var e=d.$re(/^%|^[_A-Za-z-][_A-Za-z0-9-]*/);return e?r.Color.fromKeyword(e)||new r.Keyword(e):void 0},call:function(){var e,t,n,i,o=d.i;return d.peek(/^url\(/i)?void 0:(d.save(),(e=d.$re(/^([\w-]+|%|progid:[\w\.]+)\(/))?(e=e[1],t=e.toLowerCase(),"alpha"===t&&(i=p.alpha())?i:(n=this.arguments(),d.$char(")")?(d.forget(),new r.Call(e,n,o,a)):void d.restore("Could not parse call arguments or missing ')'"))):void d.forget())},arguments:function(){for(var e,t=[];(e=this.assignment()||p.expression(),e)&&(t.push(e),d.$char(",")););return t},literal:function(){return this.dimension()||this.color()||this.quoted()||this.unicodeDescriptor()},assignment:function(){var e,t;return e=d.$re(/^\w+(?=\s?=)/i),e&&d.$char("=")?(t=p.entity(),t?new r.Assignment(e,t):void 0):void 0},url:function(){var e,t=d.i;return d.autoCommentAbsorb=!1,"u"===d.currentChar()&&d.$re(/^url\(/)?(e=this.quoted()||this.variable()||d.$re(/^(?:(?:\\[\(\)'"])|[^\(\)'"])+/)||"",d.autoCommentAbsorb=!0,c(")"),new r.URL(null!=e.value||e instanceof r.Variable?e:new r.Anonymous(e),t,a)):void(d.autoCommentAbsorb=!0)},variable:function(){var e,t=d.i;return"@"===d.currentChar()&&(e=d.$re(/^@@?[\w-]+/))?new r.Variable(e,t,a):void 0},variableCurly:function(){var e,t=d.i;return"@"===d.currentChar()&&(e=d.$re(/^@\{([\w-]+)\}/))?new r.Variable("@"+e[1],t,a):void 0},color:function(){var e;if("#"===d.currentChar()&&(e=d.$re(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})/))){var t=e.input.match(/^#([\w]+).*/);return t=t[1],t.match(/^[A-Fa-f0-9]+$/)||h("Invalid HEX color code"),new r.Color(e[1])}},dimension:function(){if(!d.peekNotNumeric()){var e=d.$re(/^([+-]?\d*\.?\d+)(%|[a-z]+)?/i);return e?new r.Dimension(e[1],e[2]):void 0}},unicodeDescriptor:function(){var e;return e=d.$re(/^U\+[0-9a-fA-F?]+(\-[0-9a-fA-F?]+)?/),e?new r.UnicodeDescriptor(e[0]):void 0},javascript:function(){var e,t=d.i;return e=d.$re(/^(~)?`([^`]*)`/),e?new r.JavaScript(e[2],Boolean(e[1]),t,a):void 0}},variable:function(){var e;return"@"===d.currentChar()&&(e=d.$re(/^(@[\w-]+)\s*:/))?e[1]:void 0},rulesetCall:function(){var e;return"@"===d.currentChar()&&(e=d.$re(/^(@[\w-]+)\s*\(\s*\)\s*;/))?new r.RulesetCall(e[1]):void 0},extend:function(e){var t,n,i,o,s,a=d.i;if(d.$re(e?/^&:extend\(/:/^:extend\(/)){do{for(i=null,t=null;!(i=d.$re(/^(all)(?=\s*(\)|,))/))&&(n=this.element());)t?t.push(n):t=[n];i=i&&i[1],t||h("Missing target selector for :extend()."),s=new r.Extend(new r.Selector(t),i,a),o?o.push(s):o=[s]}while(d.$char(","));return l(/^\)/),e&&l(/^;/),o}},extendRule:function(){return this.extend(!0)},mixin:{call:function(){var e,t,n,i,o,s,u=d.currentChar(),l=!1,h=d.i;if("."===u||"#"===u){for(d.save();e=d.i,i=d.$re(/^[#.](?:[\w-]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/),i;)n=new r.Element(o,i,e,a),t?t.push(n):t=[n],o=d.$char(">");return t&&(d.$char("(")&&(s=this.args(!0).args,c(")")),p.important()&&(l=!0),p.end())?(d.forget(),new r.mixin.Call(t,s,h,a,l)):void d.restore()}},args:function(e){var t,n,i,o,s,a,u=p.entities,l={args:null,variadic:!1},c=[],f=[],v=[];for(d.save();;){if(e)a=p.detachedRuleset()||p.expression();else{if(d.commentStore.length=0,"."===d.currentChar()&&d.$re(/^\.{3}/)){l.variadic=!0,d.$char(";")&&!t&&(t=!0),(t?f:v).push({variadic:!0});break}a=u.variable()||u.literal()||u.keyword()}if(!a)break;o=null,a.throwAwayComments&&a.throwAwayComments(),s=a;var m=null;if(e?a.value&&1==a.value.length&&(m=a.value[0]):m=a,m&&m instanceof r.Variable)if(d.$char(":")){if(c.length>0&&(t&&h("Cannot mix ; and , as delimiter types"),n=!0),s=e&&p.detachedRuleset()||p.expression(),!s){if(!e)return d.restore(),l.args=[],l;h("could not understand value for named argument")}o=i=m.name}else{if(!e&&d.$re(/^\.{3}/)){l.variadic=!0,d.$char(";")&&!t&&(t=!0),(t?f:v).push({name:a.name,variadic:!0});break}e||(i=o=m.name,s=null)}s&&c.push(s),v.push({name:o,value:s}),d.$char(",")||(d.$char(";")||t)&&(n&&h("Cannot mix ; and , as delimiter types"),t=!0,c.length>1&&(s=new r.Value(c)),f.push({name:i,value:s}),i=null,c=[],n=!1)}return d.forget(),l.args=t?f:v,l},definition:function(){var e,t,n,i,o=[],s=!1;if(!("."!==d.currentChar()&&"#"!==d.currentChar()||d.peek(/^[^{]*\}/)))if(d.save(),t=d.$re(/^([#.](?:[\w-]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\s*\(/)){e=t[1];var a=this.args(!1);if(o=a.args,s=a.variadic,!d.$char(")"))return void d.restore("Missing closing ')'");if(d.commentStore.length=0,d.$re(/^when/)&&(i=l(p.conditions,"expected condition")),n=p.block())return d.forget(),new r.mixin.Definition(e,o,n,i,s);d.restore()}else d.forget()}},entity:function(){var e=this.entities;return this.comment()||e.literal()||e.variable()||e.url()||e.call()||e.keyword()||e.javascript()},end:function(){return d.$char(";")||d.peek("}")},alpha:function(){var e;return d.$re(/^opacity=/i)?(e=d.$re(/^\d+/),e||(e=l(this.entities.variable,"Could not parse alpha")),c(")"),new r.Alpha(e)):void 0},element:function(){var e,t,n,i=d.i;return t=this.combinator(),e=d.$re(/^(?:\d+\.\d+|\d+)%/)||d.$re(/^(?:[.#]?|:*)(?:[\w-]|[^\x00-\x9f]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/)||d.$char("*")||d.$char("&")||this.attribute()||d.$re(/^\([^&()@]+\)/)||d.$re(/^[\.#:](?=@)/)||this.entities.variableCurly(),e||(d.save(),d.$char("(")?(n=this.selector())&&d.$char(")")?(e=new r.Paren(n),d.forget()):d.restore("Missing closing ')'"):d.forget()),e?new r.Element(t,e,i,a):void 0},combinator:function(){var e=d.currentChar();if("/"===e){d.save();var t=d.$re(/^\/[a-z]+\//i);if(t)return d.forget(),new r.Combinator(t);d.restore()}if(">"===e||"+"===e||"~"===e||"|"===e||"^"===e){for(d.i++,"^"===e&&"^"===d.currentChar()&&(e="^^",d.i++);d.isWhitespace();)d.i++;return new r.Combinator(e)}return new r.Combinator(d.isWhitespace(-1)?" ":null)},lessSelector:function(){return this.selector(!0)},selector:function(e){for(var t,n,i,o,s,u,c,f=d.i;(e&&(n=this.extend())||e&&(u=d.$re(/^when/))||(o=this.element()))&&(u?c=l(this.conditions,"expected condition"):c?h("CSS guard can only be used at the end of selector"):n?s=s?s.concat(n):n:(s&&h("Extend can only be used at the end of selector"),i=d.currentChar(),t?t.push(o):t=[o],o=null),"{"!==i&&"}"!==i&&";"!==i&&","!==i&&")"!==i););return t?new r.Selector(t,s,c,f,a):void(s&&h("Extend must be used to extend a selector, it cannot be used on its own"))},attribute:function(){if(d.$char("[")){var e,t,n,i=this.entities;return(e=i.variableCurly())||(e=l(/^(?:[_A-Za-z0-9-\*]*\|)?(?:[_A-Za-z0-9-]|\\.)+/)),n=d.$re(/^[|~*$^]?=/),n&&(t=i.quoted()||d.$re(/^[0-9]+%/)||d.$re(/^[\w-]+/)||i.variableCurly()),c("]"),new r.Attribute(e,n,t)}},block:function(){var e;return d.$char("{")&&(e=this.primary())&&d.$char("}")?e:void 0},blockRuleset:function(){var e=this.block();return e&&(e=new r.Ruleset(null,e)),e},detachedRuleset:function(){var e=this.blockRuleset();return e?new r.DetachedRuleset(e):void 0},ruleset:function(){var t,n,i,o;for(d.save(),e.dumpLineNumbers&&(o=f(d.i));(n=this.lessSelector(),n)&&(t?t.push(n):t=[n],d.commentStore.length=0,n.condition&&t.length>1&&h("Guards are only currently allowed on a single selector."),d.$char(","));)n.condition&&h("Guards are only currently allowed on a single selector."),d.commentStore.length=0;if(t&&(i=this.block())){d.forget();var s=new r.Ruleset(t,i,e.strictImports);return e.dumpLineNumbers&&(s.debugInfo=o),s}d.restore()},rule:function(t){var n,i,o,s,u,l=d.i,c=d.currentChar();if("."!==c&&"#"!==c&&"&"!==c)if(d.save(),n=this.variable()||this.ruleProperty()){if(u="string"==typeof n,u&&(i=this.detachedRuleset()),d.commentStore.length=0,!i){s=!u&&n.pop().value;var h=!t&&(e.compress||u);if(h&&(i=this.value()),!i&&(i=this.anonymousValue()))return d.forget(),new r.Rule(n,i,!1,s,l,a);h||i||(i=this.value()),o=this.important()}if(i&&this.end())return d.forget(),new r.Rule(n,i,o,s,l,a);if(d.restore(),i&&!t)return this.rule(!0)}else d.forget()},anonymousValue:function(){var e=d.$re(/^([^@+\/'"*`(;{}-]*);/);return e?new r.Anonymous(e[1]):void 0},"import":function(){var e,t,n=d.i,i=d.$re(/^@import?\s+/);if(i){var o=(i?this.importOptions():null)||{};if(e=this.entities.quoted()||this.entities.url())return t=this.mediaFeatures(),d.$(";")||(d.i=n,h("missing semi-colon or unrecognised media features on import")),t=t&&new r.Value(t),new r.Import(e,t,o,n,a);d.i=n,h("malformed import statement")}},importOptions:function(){var e,t,n,r={};if(!d.$char("("))return null;do if(e=this.importOption()){switch(t=e,n=!0,t){case"css":t="less",n=!1;break;case"once":t="multiple",n=!1}if(r[t]=n,!d.$char(","))break}while(e);return c(")"),r},importOption:function(){var e=d.$re(/^(less|css|multiple|once|inline|reference|optional)/);return e?e[1]:void 0},mediaFeature:function(){var e,t,n=this.entities,i=[];d.save();do if(e=n.keyword()||n.variable())i.push(e);else if(d.$char("(")){if(t=this.property(),e=this.value(),!d.$char(")"))return d.restore("Missing closing ')'"),null;if(t&&e)i.push(new r.Paren(new r.Rule(t,e,null,null,d.i,a,!0)));else{if(!e)return d.restore("badly formed media feature definition"),null;i.push(new r.Paren(e))}}while(e);return d.forget(),i.length>0?new r.Expression(i):void 0},mediaFeatures:function(){var e,t=this.entities,n=[];do if(e=this.mediaFeature()){if(n.push(e),!d.$char(","))break}else if(e=t.variable(),e&&(n.push(e),!d.$char(",")))break;while(e);return n.length>0?n:null},media:function(){var t,n,i,o;return e.dumpLineNumbers&&(o=f(d.i)),d.$re(/^@media/)&&(t=this.mediaFeatures(),n=this.block())?(i=new r.Media(n,t,d.i,a),e.dumpLineNumbers&&(i.debugInfo=o),i):void 0},directive:function(){var t,n,i,o,s,u,l,c=d.i,p=!0;if("@"===d.currentChar()){if(n=this["import"]()||this.media())return n;if(d.save(),t=d.$re(/^@[a-z-]+/)){switch(o=t,"-"==t.charAt(1)&&t.indexOf("-",2)>0&&(o="@"+t.slice(t.indexOf("-",2)+1)),o){case"@counter-style":s=!0,p=!0;break;case"@charset":s=!0,p=!1;break;case"@namespace":u=!0,p=!1;break;case"@keyframes":s=!0;break;case"@host":case"@page":case"@document":case"@supports":l=!0}return d.commentStore.length=0,s?(n=this.entity(),n||h("expected "+t+" identifier")):u?(n=this.expression(),n||h("expected "+t+" expression")):l&&(n=(d.$re(/^[^{;]+/)||"").trim(),n&&(n=new r.Anonymous(n))),p&&(i=this.blockRuleset()),i||!p&&n&&d.$char(";")?(d.forget(),new r.Directive(t,n,i,c,a,e.dumpLineNumbers?f(c):null)):void d.restore("directive options not recognised")}}},value:function(){var e,t=[];do if(e=this.expression(),e&&(t.push(e),!d.$char(",")))break;while(e);return t.length>0?new r.Value(t):void 0},important:function(){return"!"===d.currentChar()?d.$re(/^! *important/):void 0},sub:function(){var e,t;return d.save(),d.$char("(")?(e=this.addition(),e&&d.$char(")")?(d.forget(),t=new r.Expression([e]),t.parens=!0,t):void d.restore("Expected ')'")):void d.restore()},multiplication:function(){var e,t,n,i,o;if(e=this.operand()){for(o=d.isWhitespace(-1);!d.peek(/^\/[*\/]/);){if(d.save(),n=d.$char("/")||d.$char("*"),!n){d.forget();break}if(t=this.operand(),!t){d.restore();break}d.forget(),e.parensInOp=!0,t.parensInOp=!0,i=new r.Operation(n,[i||e,t],o),o=d.isWhitespace(-1)}return i||e}},addition:function(){var e,t,n,i,o;if(e=this.multiplication()){for(o=d.isWhitespace(-1);(n=d.$re(/^[-+]\s+/)||!o&&(d.$char("+")||d.$char("-")),n)&&(t=this.multiplication(),t);)e.parensInOp=!0,t.parensInOp=!0,i=new r.Operation(n,[i||e,t],o),o=d.isWhitespace(-1);return i||e}},conditions:function(){var e,t,n,i=d.i;if(e=this.condition()){for(;d.peek(/^,\s*(not\s*)?\(/)&&d.$char(",")&&(t=this.condition(),t);)n=new r.Condition("or",n||e,t,i);return n||e}},condition:function(){var e,t,n,i,o=this.entities,s=d.i,a=!1;return d.$re(/^not/)&&(a=!0),c("("),e=this.addition()||o.keyword()||o.quoted(),e?(i=d.$re(/^(?:>=|<=|=<|[<=>])/),i?(t=this.addition()||o.keyword()||o.quoted(),t?n=new r.Condition(i,e,t,s,a):h("expected expression")):n=new r.Condition("=",e,new r.Keyword("true"),s,a),c(")"),d.$re(/^and/)?new r.Condition("and",n,this.condition()):n):void 0},operand:function(){var e,t=this.entities;d.peek(/^-[@\(]/)&&(e=d.$char("-"));var n=this.sub()||t.dimension()||t.color()||t.variable()||t.call();return e&&(n.parensInOp=!0,n=new r.Negative(n)),n},expression:function(){var e,t,n=[];do e=this.comment(),e?n.push(e):(e=this.addition()||this.entity(),e&&(n.push(e),d.peek(/^\/[\/*]/)||(t=d.$char("/"),t&&n.push(new r.Anonymous(t)))));while(e);return n.length>0?new r.Expression(n):void 0},property:function(){var e=d.$re(/^(\*?-?[_a-zA-Z0-9-]+)\s*:/);return e?e[1]:void 0},ruleProperty:function(){function e(e){var t=d.i,n=d.$re(e);return n?(o.push(t),i.push(n[1])):void 0}var t,n,i=[],o=[];for(d.save(),e(/^(\*?)/);e(/^((?:[\w-]+)|(?:@\{[\w-]+\}))/););if(i.length>1&&e(/^((?:\+_|\+)?)\s*:/)){for(d.forget(),""===i[0]&&(i.shift(),o.shift()),n=0;i.length>n;n++)t=i[n],i[n]="@"!==t.charAt(0)?new r.Keyword(t):new r.Variable("@"+t.slice(2,-1),o[n],a);return i}d.restore()}}}};a.serializeVars=function(e){var t="";for(var n in e)if(Object.hasOwnProperty.call(e,n)){var r=e[n];t+=("@"===n[0]?"":"@")+n+": "+r+(";"===String(r).slice(-1)?"":";")}return t},t.exports=a},{"../less-error":30,"../tree":59,"../utils":80,"../visitors":84,"./parser-input":35}],37:[function(e,t){var n=function(e){this.less=e,this.visitors=[],this.preProcessors=[],this.postProcessors=[],this.installedPlugins=[],this.fileManagers=[]};n.prototype.addPlugins=function(e){if(e)for(var t=0;e.length>t;t++)this.addPlugin(e[t])},n.prototype.addPlugin=function(e){this.installedPlugins.push(e),e.install(this.less,this)},n.prototype.addVisitor=function(e){this.visitors.push(e)},n.prototype.addPreProcessor=function(e,t){var n;for(n=0;this.preProcessors.length>n&&!(this.preProcessors[n].priority>=t);n++);this.preProcessors.splice(n,0,{preProcessor:e,priority:t})},n.prototype.addPostProcessor=function(e,t){var n;for(n=0;this.postProcessors.length>n&&!(this.postProcessors[n].priority>=t);n++);this.postProcessors.splice(n,0,{postProcessor:e,priority:t})},n.prototype.addFileManager=function(e){this.fileManagers.push(e)},n.prototype.getPreProcessors=function(){for(var e=[],t=0;this.preProcessors.length>t;t++)e.push(this.preProcessors[t].preProcessor);return e},n.prototype.getPostProcessors=function(){for(var e=[],t=0;this.postProcessors.length>t;t++)e.push(this.postProcessors[t].postProcessor);return e},n.prototype.getVisitors=function(){return this.visitors},n.prototype.getFileManagers=function(){return this.fileManagers},t.exports=n},{}],38:[function(e,t){var n;t.exports=function(t,r){var i=function(t,o,s){if("function"==typeof o&&(s=o,o={}),!s){n||(n="undefined"==typeof Promise?e("promise"):Promise);var a=this;return new n(function(e,n){i.call(a,t,o,function(t,r){t?n(t):e(r)})})}this.parse(t,o,function(e,t,n,i){if(e)return s(e);var o;try{var a=new r(t,n);o=a.toCSS(i)}catch(e){return s(e)}s(null,o)})};return i}},{promise:void 0}],39:[function(e,t){t.exports=function(e,t){var n=function(e){this.options=e};return n.prototype.toCSS=function(t,n,r){var i=new e({contentsIgnoredCharsMap:r.contentsIgnoredChars,rootNode:t,contentsMap:r.contents,sourceMapFilename:this.options.sourceMapFilename,sourceMapURL:this.options.sourceMapURL,outputFilename:this.options.sourceMapOutputFilename,sourceMapBasepath:this.options.sourceMapBasepath,sourceMapRootpath:this.options.sourceMapRootpath,outputSourceFiles:this.options.outputSourceFiles,sourceMapGenerator:this.options.sourceMapGenerator,sourceMapFileInline:this.options.sourceMapFileInline}),o=i.toCSS(n);return this.sourceMap=i.sourceMap,this.sourceMapURL=i.sourceMapURL,this.options.sourceMapInputFilename&&(this.sourceMapInputFilename=i.normalizeFilename(this.options.sourceMapInputFilename)),o+this.getCSSAppendage()},n.prototype.getCSSAppendage=function(){var e=this.sourceMapURL;if(this.options.sourceMapFileInline){if(void 0===this.sourceMap)return"";e="data:application/json;base64,"+t.encodeBase64(this.sourceMap)}return e?"/*# sourceMappingURL="+e+" */":""},n.prototype.getExternalSourceMap=function(){return this.sourceMap},n.prototype.setExternalSourceMap=function(e){this.sourceMap=e},n.prototype.isInline=function(){return this.options.sourceMapFileInline},n.prototype.getSourceMapURL=function(){return this.sourceMapURL},n.prototype.getOutputFilename=function(){return this.options.sourceMapOutputFilename},n.prototype.getInputFilename=function(){return this.sourceMapInputFilename},n}},{}],40:[function(e,t){t.exports=function(e){var t=function(t){this._css=[],this._rootNode=t.rootNode,this._contentsMap=t.contentsMap,this._contentsIgnoredCharsMap=t.contentsIgnoredCharsMap,t.sourceMapFilename&&(this._sourceMapFilename=t.sourceMapFilename.replace(/\\/g,"/")),this._outputFilename=t.outputFilename,this.sourceMapURL=t.sourceMapURL,t.sourceMapBasepath&&(this._sourceMapBasepath=t.sourceMapBasepath.replace(/\\/g,"/")),t.sourceMapRootpath?(this._sourceMapRootpath=t.sourceMapRootpath.replace(/\\/g,"/"),"/"!==this._sourceMapRootpath.charAt(this._sourceMapRootpath.length-1)&&(this._sourceMapRootpath+="/")):this._sourceMapRootpath="",this._outputSourceFiles=t.outputSourceFiles,this._sourceMapGeneratorConstructor=e.getSourceMapGenerator(),this._lineNumber=0,this._column=0};return t.prototype.normalizeFilename=function(e){return e=e.replace(/\\/g,"/"),this._sourceMapBasepath&&0===e.indexOf(this._sourceMapBasepath)&&(e=e.substring(this._sourceMapBasepath.length),("\\"===e.charAt(0)||"/"===e.charAt(0))&&(e=e.substring(1))),(this._sourceMapRootpath||"")+e},t.prototype.add=function(e,t,n,r){if(e){var i,o,s,a,u;if(t){var l=this._contentsMap[t.filename];this._contentsIgnoredCharsMap[t.filename]&&(n-=this._contentsIgnoredCharsMap[t.filename],0>n&&(n=0),l=l.slice(this._contentsIgnoredCharsMap[t.filename])),l=l.substring(0,n),o=l.split("\n"),a=o[o.length-1]}if(i=e.split("\n"),s=i[i.length-1],t)if(r)for(u=0;i.length>u;u++)this._sourceMapGenerator.addMapping({generated:{line:this._lineNumber+u+1,column:0===u?this._column:0},original:{line:o.length+u,column:0===u?a.length:0},source:this.normalizeFilename(t.filename)});else this._sourceMapGenerator.addMapping({generated:{line:this._lineNumber+1,column:this._column},original:{line:o.length,column:a.length},source:this.normalizeFilename(t.filename)});1===i.length?this._column+=s.length:(this._lineNumber+=i.length-1,this._column=s.length),this._css.push(e)}},t.prototype.isEmpty=function(){return 0===this._css.length},t.prototype.toCSS=function(e){if(this._sourceMapGenerator=new this._sourceMapGeneratorConstructor({file:this._outputFilename,sourceRoot:null}),this._outputSourceFiles)for(var t in this._contentsMap)if(this._contentsMap.hasOwnProperty(t)){var n=this._contentsMap[t];this._contentsIgnoredCharsMap[t]&&(n=n.slice(this._contentsIgnoredCharsMap[t])),this._sourceMapGenerator.setSourceContent(this.normalizeFilename(t),n)}if(this._rootNode.genCSS(e,this),this._css.length>0){var r,i=JSON.stringify(this._sourceMapGenerator.toJSON());this.sourceMapURL?r=this.sourceMapURL:this._sourceMapFilename&&(r=this._sourceMapFilename),this.sourceMapURL=r,this.sourceMap=i}return this._css.join("")},t}},{}],41:[function(e,t){var n=e("./contexts"),r=e("./visitors"),i=e("./tree");t.exports=function(e,t){t=t||{};var o,s=t.variables,a=new n.Eval(t);"object"!=typeof s||Array.isArray(s)||(s=Object.keys(s).map(function(e){var t=s[e];return t instanceof i.Value||(t instanceof i.Expression||(t=new i.Expression([t])),t=new i.Value([t])),new i.Rule("@"+e,t,!1,null,0)}),a.frames=[new i.Ruleset(null,s)]);var u,l=[],c=[new r.JoinSelectorVisitor,new r.ExtendVisitor,new r.ToCSSVisitor({compress:Boolean(t.compress)})];
if(t.pluginManager){var h=t.pluginManager.getVisitors();for(u=0;h.length>u;u++){var f=h[u];f.isPreEvalVisitor?l.push(f):f.isPreVisitor?c.splice(0,0,f):c.push(f)}}for(u=0;l.length>u;u++)l[u].run(e);for(o=e.eval(a),u=0;c.length>u;u++)c[u].run(o);return o}},{"./contexts":10,"./tree":59,"./visitors":84}],42:[function(e,t){var n=e("./node"),r=function(e){this.value=e};r.prototype=new n,r.prototype.type="Alpha",r.prototype.accept=function(e){this.value=e.visit(this.value)},r.prototype.eval=function(e){return this.value.eval?new r(this.value.eval(e)):this},r.prototype.genCSS=function(e,t){t.add("alpha(opacity="),this.value.genCSS?this.value.genCSS(e,t):t.add(this.value),t.add(")")},t.exports=r},{"./node":67}],43:[function(e,t){var n=e("./node"),r=function(e,t,n,r,i){this.value=e,this.index=t,this.mapLines=r,this.currentFileInfo=n,this.rulesetLike="undefined"==typeof i?!1:i};r.prototype=new n,r.prototype.type="Anonymous",r.prototype.eval=function(){return new r(this.value,this.index,this.currentFileInfo,this.mapLines,this.rulesetLike)},r.prototype.compare=function(e){return e.toCSS&&this.toCSS()===e.toCSS()?0:void 0},r.prototype.isRulesetLike=function(){return this.rulesetLike},r.prototype.genCSS=function(e,t){t.add(this.value,this.currentFileInfo,this.index,this.mapLines)},t.exports=r},{"./node":67}],44:[function(e,t){var n=e("./node"),r=function(e,t){this.key=e,this.value=t};r.prototype=new n,r.prototype.type="Assignment",r.prototype.accept=function(e){this.value=e.visit(this.value)},r.prototype.eval=function(e){return this.value.eval?new r(this.key,this.value.eval(e)):this},r.prototype.genCSS=function(e,t){t.add(this.key+"="),this.value.genCSS?this.value.genCSS(e,t):t.add(this.value)},t.exports=r},{"./node":67}],45:[function(e,t){var n=e("./node"),r=function(e,t,n){this.key=e,this.op=t,this.value=n};r.prototype=new n,r.prototype.type="Attribute",r.prototype.eval=function(e){return new r(this.key.eval?this.key.eval(e):this.key,this.op,this.value&&this.value.eval?this.value.eval(e):this.value)},r.prototype.genCSS=function(e,t){t.add(this.toCSS(e))},r.prototype.toCSS=function(e){var t=this.key.toCSS?this.key.toCSS(e):this.key;return this.op&&(t+=this.op,t+=this.value.toCSS?this.value.toCSS(e):this.value),"["+t+"]"},t.exports=r},{"./node":67}],46:[function(e,t){var n=e("./node"),r=e("../functions/function-caller"),i=function(e,t,n,r){this.name=e,this.args=t,this.index=n,this.currentFileInfo=r};i.prototype=new n,i.prototype.type="Call",i.prototype.accept=function(e){this.args&&(this.args=e.visitArray(this.args))},i.prototype.eval=function(e){var t,n=this.args.map(function(t){return t.eval(e)}),o=new r(this.name,e,this.index,this.currentFileInfo);if(o.isValid())try{if(t=o.call(n),null!=t)return t}catch(s){throw{type:s.type||"Runtime",message:"error evaluating function `"+this.name+"`"+(s.message?": "+s.message:""),index:this.index,filename:this.currentFileInfo.filename}}return new i(this.name,n,this.index,this.currentFileInfo)},i.prototype.genCSS=function(e,t){t.add(this.name+"(",this.currentFileInfo,this.index);for(var n=0;this.args.length>n;n++)this.args[n].genCSS(e,t),this.args.length>n+1&&t.add(", ");t.add(")")},t.exports=i},{"../functions/function-caller":20,"./node":67}],47:[function(e,t){function n(e,t){return Math.min(Math.max(e,0),t)}function r(e){return"#"+e.map(function(e){return e=n(Math.round(e),255),(16>e?"0":"")+e.toString(16)}).join("")}var i=e("./node"),o=e("../data/colors"),s=function(e,t){this.rgb=Array.isArray(e)?e:6==e.length?e.match(/.{2}/g).map(function(e){return parseInt(e,16)}):e.split("").map(function(e){return parseInt(e+e,16)}),this.alpha="number"==typeof t?t:1};s.prototype=new i,s.prototype.type="Color",s.prototype.luma=function(){var e=this.rgb[0]/255,t=this.rgb[1]/255,n=this.rgb[2]/255;return e=.03928>=e?e/12.92:Math.pow((e+.055)/1.055,2.4),t=.03928>=t?t/12.92:Math.pow((t+.055)/1.055,2.4),n=.03928>=n?n/12.92:Math.pow((n+.055)/1.055,2.4),.2126*e+.7152*t+.0722*n},s.prototype.genCSS=function(e,t){t.add(this.toCSS(e))},s.prototype.toCSS=function(e,t){var r,i,o=e&&e.compress&&!t;if(this.value)return this.value;if(i=this.fround(e,this.alpha),1>i)return"rgba("+this.rgb.map(function(e){return n(Math.round(e),255)}).concat(n(i,1)).join(","+(o?"":" "))+")";if(r=this.toRGB(),o){var s=r.split("");s[1]===s[2]&&s[3]===s[4]&&s[5]===s[6]&&(r="#"+s[1]+s[3]+s[5])}return r},s.prototype.operate=function(e,t,n){for(var r=[],i=this.alpha*(1-n.alpha)+n.alpha,o=0;3>o;o++)r[o]=this._operate(e,t,this.rgb[o],n.rgb[o]);return new s(r,i)},s.prototype.toRGB=function(){return r(this.rgb)},s.prototype.toHSL=function(){var e,t,n=this.rgb[0]/255,r=this.rgb[1]/255,i=this.rgb[2]/255,o=this.alpha,s=Math.max(n,r,i),a=Math.min(n,r,i),u=(s+a)/2,l=s-a;if(s===a)e=t=0;else{switch(t=u>.5?l/(2-s-a):l/(s+a),s){case n:e=(r-i)/l+(i>r?6:0);break;case r:e=(i-n)/l+2;break;case i:e=(n-r)/l+4}e/=6}return{h:360*e,s:t,l:u,a:o}},s.prototype.toHSV=function(){var e,t,n=this.rgb[0]/255,r=this.rgb[1]/255,i=this.rgb[2]/255,o=this.alpha,s=Math.max(n,r,i),a=Math.min(n,r,i),u=s,l=s-a;if(t=0===s?0:l/s,s===a)e=0;else{switch(s){case n:e=(r-i)/l+(i>r?6:0);break;case r:e=(i-n)/l+2;break;case i:e=(n-r)/l+4}e/=6}return{h:360*e,s:t,v:u,a:o}},s.prototype.toARGB=function(){return r([255*this.alpha].concat(this.rgb))},s.prototype.compare=function(e){return e.rgb&&e.rgb[0]===this.rgb[0]&&e.rgb[1]===this.rgb[1]&&e.rgb[2]===this.rgb[2]&&e.alpha===this.alpha?0:void 0},s.fromKeyword=function(e){var t,n=e.toLowerCase();return o.hasOwnProperty(n)?t=new s(o[n].slice(1)):"transparent"===n&&(t=new s([0,0,0],0)),t?(t.value=e,t):void 0},t.exports=s},{"../data/colors":11,"./node":67}],48:[function(e,t){var n=e("./node"),r=function(e){" "===e?(this.value=" ",this.emptyOrWhitespace=!0):(this.value=e?e.trim():"",this.emptyOrWhitespace=""===this.value)};r.prototype=new n,r.prototype.type="Combinator";var i={"":!0," ":!0,"|":!0};r.prototype.genCSS=function(e,t){var n=e.compress||i[this.value]?"":" ";t.add(n+this.value+n)},t.exports=r},{"./node":67}],49:[function(e,t){var n=e("./node"),r=e("./debug-info"),i=function(e,t,n,r){this.value=e,this.isLineComment=t,this.currentFileInfo=r};i.prototype=new n,i.prototype.type="Comment",i.prototype.genCSS=function(e,t){this.debugInfo&&t.add(r(e,this),this.currentFileInfo,this.index),t.add(this.value)},i.prototype.isSilent=function(e){var t=this.currentFileInfo&&this.currentFileInfo.reference&&!this.isReferenced,n=e.compress&&"!"!==this.value[2];return this.isLineComment||t||n},i.prototype.markReferenced=function(){this.isReferenced=!0},i.prototype.isRulesetLike=function(e){return Boolean(e)},t.exports=i},{"./debug-info":51,"./node":67}],50:[function(e,t){var n=e("./node"),r=function(e,t,n,r,i){this.op=e.trim(),this.lvalue=t,this.rvalue=n,this.index=r,this.negate=i};r.prototype=new n,r.prototype.type="Condition",r.prototype.accept=function(e){this.lvalue=e.visit(this.lvalue),this.rvalue=e.visit(this.rvalue)},r.prototype.eval=function(e){var t=function(e,t,r){switch(e){case"and":return t&&r;case"or":return t||r;default:switch(n.compare(t,r)){case-1:return"<"===e||"=<"===e||"<="===e;case 0:return"="===e||">="===e||"=<"===e||"<="===e;case 1:return">"===e||">="===e;default:return!1}}}(this.op,this.lvalue.eval(e),this.rvalue.eval(e));return this.negate?!t:t},t.exports=r},{"./node":67}],51:[function(e,t){var n=function(e,t,r){var i="";if(e.dumpLineNumbers&&!e.compress)switch(e.dumpLineNumbers){case"comments":i=n.asComment(t);break;case"mediaquery":i=n.asMediaQuery(t);break;case"all":i=n.asComment(t)+(r||"")+n.asMediaQuery(t)}return i};n.asComment=function(e){return"/* line "+e.debugInfo.lineNumber+", "+e.debugInfo.fileName+" */\n"},n.asMediaQuery=function(e){var t=e.debugInfo.fileName;return/^[a-z]+:\/\//i.test(t)||(t="file://"+t),"@media -sass-debug-info{filename{font-family:"+t.replace(/([.:\/\\])/g,function(e){return"\\"==e&&(e="/"),"\\"+e})+"}line{font-family:\\00003"+e.debugInfo.lineNumber+"}}\n"},t.exports=n},{}],52:[function(e,t){var n=e("./node"),r=e("../contexts"),i=function(e,t){this.ruleset=e,this.frames=t};i.prototype=new n,i.prototype.type="DetachedRuleset",i.prototype.evalFirst=!0,i.prototype.accept=function(e){this.ruleset=e.visit(this.ruleset)},i.prototype.eval=function(e){var t=this.frames||e.frames.slice(0);return new i(this.ruleset,t)},i.prototype.callEval=function(e){return this.ruleset.eval(this.frames?new r.Eval(e,this.frames.concat(e.frames)):e)},t.exports=i},{"../contexts":10,"./node":67}],53:[function(e,t){var n=e("./node"),r=e("../data/unit-conversions"),i=e("./unit"),o=e("./color"),s=function(e,t){this.value=parseFloat(e),this.unit=t&&t instanceof i?t:new i(t?[t]:void 0)};s.prototype=new n,s.prototype.type="Dimension",s.prototype.accept=function(e){this.unit=e.visit(this.unit)},s.prototype.eval=function(){return this},s.prototype.toColor=function(){return new o([this.value,this.value,this.value])},s.prototype.genCSS=function(e,t){if(e&&e.strictUnits&&!this.unit.isSingular())throw new Error("Multiple units in dimension. Correct the units or use the unit function. Bad unit: "+this.unit.toString());var n=this.fround(e,this.value),r=String(n);if(0!==n&&1e-6>n&&n>-1e-6&&(r=n.toFixed(20).replace(/0+$/,"")),e&&e.compress){if(0===n&&this.unit.isLength())return void t.add(r);n>0&&1>n&&(r=r.substr(1))}t.add(r),this.unit.genCSS(e,t)},s.prototype.operate=function(e,t,n){var r=this._operate(e,t,this.value,n.value),i=this.unit.clone();if("+"===t||"-"===t)if(0===i.numerator.length&&0===i.denominator.length)i.numerator=n.unit.numerator.slice(0),i.denominator=n.unit.denominator.slice(0);else if(0===n.unit.numerator.length&&0===i.denominator.length);else{if(n=n.convertTo(this.unit.usedUnits()),e.strictUnits&&n.unit.toString()!==i.toString())throw new Error("Incompatible units. Change the units or use the unit function. Bad units: '"+i.toString()+"' and '"+n.unit.toString()+"'.");r=this._operate(e,t,this.value,n.value)}else"*"===t?(i.numerator=i.numerator.concat(n.unit.numerator).sort(),i.denominator=i.denominator.concat(n.unit.denominator).sort(),i.cancel()):"/"===t&&(i.numerator=i.numerator.concat(n.unit.denominator).sort(),i.denominator=i.denominator.concat(n.unit.numerator).sort(),i.cancel());return new s(r,i)},s.prototype.compare=function(e){var t,r;if(!(e instanceof s))return void 0;if(this.unit.isEmpty()||e.unit.isEmpty())t=this,r=e;else if(t=this.unify(),r=e.unify(),0!==t.unit.compare(r.unit))return void 0;return n.numericCompare(t.value,r.value)},s.prototype.unify=function(){return this.convertTo({length:"px",duration:"s",angle:"rad"})},s.prototype.convertTo=function(e){var t,n,i,o,a,u=this.value,l=this.unit.clone(),c={};if("string"==typeof e){for(t in r)r[t].hasOwnProperty(e)&&(c={},c[t]=e);e=c}a=function(e,t){return i.hasOwnProperty(e)?(t?u/=i[e]/i[o]:u*=i[e]/i[o],o):e};for(n in e)e.hasOwnProperty(n)&&(o=e[n],i=r[n],l.map(a));return l.cancel(),new s(u,l)},t.exports=s},{"../data/unit-conversions":13,"./color":47,"./node":67,"./unit":76}],54:[function(e,t){var n=e("./node"),r=e("./ruleset"),i=function(e,t,n,r,i,o,s){this.name=e,this.value=t,n&&(this.rules=n,this.rules.allowImports=!0),this.index=r,this.currentFileInfo=i,this.debugInfo=o,this.isReferenced=s};i.prototype=new n,i.prototype.type="Directive",i.prototype.accept=function(e){var t=this.value,n=this.rules;n&&(this.rules=e.visit(n)),t&&(this.value=e.visit(t))},i.prototype.isRulesetLike=function(){return this.rules||!this.isCharset()},i.prototype.isCharset=function(){return"@charset"===this.name},i.prototype.genCSS=function(e,t){var n=this.value,r=this.rules;t.add(this.name,this.currentFileInfo,this.index),n&&(t.add(" "),n.genCSS(e,t)),r?("Ruleset"===r.type&&(r=[r]),this.outputRuleset(e,t,r)):t.add(";")},i.prototype.eval=function(e){var t=this.value,n=this.rules;return t&&(t=t.eval(e)),n&&(n=n.eval(e),n.root=!0),new i(this.name,t,n,this.index,this.currentFileInfo,this.debugInfo,this.isReferenced)},i.prototype.variable=function(e){return this.rules?r.prototype.variable.call(this.rules,e):void 0},i.prototype.find=function(){return this.rules?r.prototype.find.apply(this.rules,arguments):void 0},i.prototype.rulesets=function(){return this.rules?r.prototype.rulesets.apply(this.rules):void 0},i.prototype.markReferenced=function(){var e,t;if(this.isReferenced=!0,this.rules)for(t=this.rules.rules,e=0;t.length>e;e++)t[e].markReferenced&&t[e].markReferenced()},i.prototype.getIsReferenced=function(){return!this.currentFileInfo||!this.currentFileInfo.reference||this.isReferenced},i.prototype.outputRuleset=function(e,t,n){var r,i=n.length;if(e.tabLevel=(0|e.tabLevel)+1,e.compress){for(t.add("{"),r=0;i>r;r++)n[r].genCSS(e,t);return t.add("}"),void e.tabLevel--}var o="\n"+Array(e.tabLevel).join("  "),s=o+"  ";if(i){for(t.add(" {"+s),n[0].genCSS(e,t),r=1;i>r;r++)t.add(s),n[r].genCSS(e,t);t.add(o+"}")}else t.add(" {"+o+"}");e.tabLevel--},t.exports=i},{"./node":67,"./ruleset":73}],55:[function(e,t){var n=e("./node"),r=e("./paren"),i=e("./combinator"),o=function(e,t,n,r){this.combinator=e instanceof i?e:new i(e),this.value="string"==typeof t?t.trim():t?t:"",this.index=n,this.currentFileInfo=r};o.prototype=new n,o.prototype.type="Element",o.prototype.accept=function(e){var t=this.value;this.combinator=e.visit(this.combinator),"object"==typeof t&&(this.value=e.visit(t))},o.prototype.eval=function(e){return new o(this.combinator,this.value.eval?this.value.eval(e):this.value,this.index,this.currentFileInfo)},o.prototype.genCSS=function(e,t){t.add(this.toCSS(e),this.currentFileInfo,this.index)},o.prototype.toCSS=function(e){e=e||{};var t=this.value,n=e.firstSelector;return t instanceof r&&(e.firstSelector=!0),t=t.toCSS?t.toCSS(e):t,e.firstSelector=n,""===t&&"&"===this.combinator.value.charAt(0)?"":this.combinator.toCSS(e)+t},t.exports=o},{"./combinator":48,"./node":67,"./paren":69}],56:[function(e,t){var n=e("./node"),r=e("./paren"),i=e("./comment"),o=function(e){if(this.value=e,!e)throw new Error("Expression requires an array parameter")};o.prototype=new n,o.prototype.type="Expression",o.prototype.accept=function(e){this.value=e.visitArray(this.value)},o.prototype.eval=function(e){var t,n=this.parens&&!this.parensInOp,i=!1;return n&&e.inParenthesis(),this.value.length>1?t=new o(this.value.map(function(t){return t.eval(e)})):1===this.value.length?(this.value[0].parens&&!this.value[0].parensInOp&&(i=!0),t=this.value[0].eval(e)):t=this,n&&e.outOfParenthesis(),this.parens&&this.parensInOp&&!e.isMathOn()&&!i&&(t=new r(t)),t},o.prototype.genCSS=function(e,t){for(var n=0;this.value.length>n;n++)this.value[n].genCSS(e,t),this.value.length>n+1&&t.add(" ")},o.prototype.throwAwayComments=function(){this.value=this.value.filter(function(e){return!(e instanceof i)})},t.exports=o},{"./comment":49,"./node":67,"./paren":69}],57:[function(e,t){var n=e("./node"),r=function i(e,t,n){switch(this.selector=e,this.option=t,this.index=n,this.object_id=i.next_id++,this.parent_ids=[this.object_id],t){case"all":this.allowBefore=!0,this.allowAfter=!0;break;default:this.allowBefore=!1,this.allowAfter=!1}};r.next_id=0,r.prototype=new n,r.prototype.type="Extend",r.prototype.accept=function(e){this.selector=e.visit(this.selector)},r.prototype.eval=function(e){return new r(this.selector.eval(e),this.option,this.index)},r.prototype.clone=function(){return new r(this.selector,this.option,this.index)},r.prototype.findSelfSelectors=function(e){var t,n,r=[];for(t=0;e.length>t;t++)n=e[t].elements,t>0&&n.length&&""===n[0].combinator.value&&(n[0].combinator.value=" "),r=r.concat(e[t].elements);this.selfSelectors=[{elements:r}]},t.exports=r},{"./node":67}],58:[function(e,t){var n=e("./node"),r=e("./media"),i=e("./url"),o=e("./quoted"),s=e("./ruleset"),a=e("./anonymous"),u=function(e,t,n,r,i){if(this.options=n,this.index=r,this.path=e,this.features=t,this.currentFileInfo=i,void 0!==this.options.less||this.options.inline)this.css=!this.options.less||this.options.inline;else{var o=this.getPath();o&&/[#\.\&\?\/]css([\?;].*)?$/.test(o)&&(this.css=!0)}};u.prototype=new n,u.prototype.type="Import",u.prototype.accept=function(e){this.features&&(this.features=e.visit(this.features)),this.path=e.visit(this.path),!this.options.inline&&this.root&&(this.root=e.visit(this.root))},u.prototype.genCSS=function(e,t){this.css&&(t.add("@import ",this.currentFileInfo,this.index),this.path.genCSS(e,t),this.features&&(t.add(" "),this.features.genCSS(e,t)),t.add(";"))},u.prototype.getPath=function(){return this.path instanceof o?this.path.value:this.path instanceof i?this.path.value.value:null},u.prototype.isVariableImport=function(){var e=this.path;return e instanceof i&&(e=e.value),e instanceof o?e.containsVariables():!0},u.prototype.evalForImport=function(e){var t=this.path;return t instanceof i&&(t=t.value),new u(t.eval(e),this.features,this.options,this.index,this.currentFileInfo)},u.prototype.evalPath=function(e){var t=this.path.eval(e),n=this.currentFileInfo&&this.currentFileInfo.rootpath;if(!(t instanceof i)){if(n){var r=t.value;r&&e.isPathRelative(r)&&(t.value=n+r)}t.value=e.normalizePath(t.value)}return t},u.prototype.eval=function(e){var t,n=this.features&&this.features.eval(e);if(this.skip&&("function"==typeof this.skip&&(this.skip=this.skip()),this.skip))return[];if(this.options.inline){var i=new a(this.root,0,{filename:this.importedFilename},!0,!0);return this.features?new r([i],this.features.value):[i]}if(this.css){var o=new u(this.evalPath(e),n,this.options,this.index);if(!o.css&&this.error)throw this.error;return o}return t=new s(null,this.root.rules.slice(0)),t.evalImports(e),this.features?new r(t.rules,this.features.value):t.rules},t.exports=u},{"./anonymous":43,"./media":63,"./node":67,"./quoted":70,"./ruleset":73,"./url":77}],59:[function(e,t){var n={};n.Node=e("./node"),n.Alpha=e("./alpha"),n.Color=e("./color"),n.Directive=e("./directive"),n.DetachedRuleset=e("./detached-ruleset"),n.Operation=e("./operation"),n.Dimension=e("./dimension"),n.Unit=e("./unit"),n.Keyword=e("./keyword"),n.Variable=e("./variable"),n.Ruleset=e("./ruleset"),n.Element=e("./element"),n.Attribute=e("./attribute"),n.Combinator=e("./combinator"),n.Selector=e("./selector"),n.Quoted=e("./quoted"),n.Expression=e("./expression"),n.Rule=e("./rule"),n.Call=e("./call"),n.URL=e("./url"),n.Import=e("./import"),n.mixin={Call:e("./mixin-call"),Definition:e("./mixin-definition")},n.Comment=e("./comment"),n.Anonymous=e("./anonymous"),n.Value=e("./value"),n.JavaScript=e("./javascript"),n.Assignment=e("./assignment"),n.Condition=e("./condition"),n.Paren=e("./paren"),n.Media=e("./media"),n.UnicodeDescriptor=e("./unicode-descriptor"),n.Negative=e("./negative"),n.Extend=e("./extend"),n.RulesetCall=e("./ruleset-call"),t.exports=n},{"./alpha":42,"./anonymous":43,"./assignment":44,"./attribute":45,"./call":46,"./color":47,"./combinator":48,"./comment":49,"./condition":50,"./detached-ruleset":52,"./dimension":53,"./directive":54,"./element":55,"./expression":56,"./extend":57,"./import":58,"./javascript":60,"./keyword":62,"./media":63,"./mixin-call":64,"./mixin-definition":65,"./negative":66,"./node":67,"./operation":68,"./paren":69,"./quoted":70,"./rule":71,"./ruleset":73,"./ruleset-call":72,"./selector":74,"./unicode-descriptor":75,"./unit":76,"./url":77,"./value":78,"./variable":79}],60:[function(e,t){var n=e("./js-eval-node"),r=e("./dimension"),i=e("./quoted"),o=e("./anonymous"),s=function(e,t,n,r){this.escaped=t,this.expression=e,this.index=n,this.currentFileInfo=r};s.prototype=new n,s.prototype.type="JavaScript",s.prototype.eval=function(e){var t=this.evaluateJavaScript(this.expression,e);return"number"==typeof t?new r(t):"string"==typeof t?new i('"'+t+'"',t,this.escaped,this.index):new o(Array.isArray(t)?t.join(", "):t)},t.exports=s},{"./anonymous":43,"./dimension":53,"./js-eval-node":61,"./quoted":70}],61:[function(e,t){var n=e("./node"),r=e("./variable"),i=function(){};i.prototype=new n,i.prototype.evaluateJavaScript=function(e,t){var n,i=this,o={};if(void 0!==t.javascriptEnabled&&!t.javascriptEnabled)throw{message:"You are using JavaScript, which has been disabled.",filename:this.currentFileInfo.filename,index:this.index};e=e.replace(/@\{([\w-]+)\}/g,function(e,n){return i.jsify(new r("@"+n,i.index,i.currentFileInfo).eval(t))});try{e=new Function("return ("+e+")")}catch(s){throw{message:"JavaScript evaluation error: "+s.message+" from `"+e+"`",filename:this.currentFileInfo.filename,index:this.index}}var a=t.frames[0].variables();for(var u in a)a.hasOwnProperty(u)&&(o[u.slice(1)]={value:a[u].value,toJS:function(){return this.value.eval(t).toCSS()}});try{n=e.call(o)}catch(s){throw{message:"JavaScript evaluation error: '"+s.name+": "+s.message.replace(/["]/g,"'")+"'",filename:this.currentFileInfo.filename,index:this.index}}return n},i.prototype.jsify=function(e){return Array.isArray(e.value)&&e.value.length>1?"["+e.value.map(function(e){return e.toCSS()}).join(", ")+"]":e.toCSS()},t.exports=i},{"./node":67,"./variable":79}],62:[function(e,t){var n=e("./node"),r=function(e){this.value=e};r.prototype=new n,r.prototype.type="Keyword",r.prototype.genCSS=function(e,t){if("%"===this.value)throw{type:"Syntax",message:"Invalid % without number"};t.add(this.value)},r.True=new r("true"),r.False=new r("false"),t.exports=r},{"./node":67}],63:[function(e,t){var n=e("./ruleset"),r=e("./value"),i=e("./element"),o=e("./selector"),s=e("./anonymous"),a=e("./expression"),u=e("./directive"),l=function(e,t,i,o){this.index=i,this.currentFileInfo=o;var s=this.emptySelectors();this.features=new r(t),this.rules=[new n(s,e)],this.rules[0].allowImports=!0};l.prototype=new u,l.prototype.type="Media",l.prototype.isRulesetLike=!0,l.prototype.accept=function(e){this.features&&(this.features=e.visit(this.features)),this.rules&&(this.rules=e.visitArray(this.rules))},l.prototype.genCSS=function(e,t){t.add("@media ",this.currentFileInfo,this.index),this.features.genCSS(e,t),this.outputRuleset(e,t,this.rules)},l.prototype.eval=function(e){e.mediaBlocks||(e.mediaBlocks=[],e.mediaPath=[]);var t=new l(null,[],this.index,this.currentFileInfo);this.debugInfo&&(this.rules[0].debugInfo=this.debugInfo,t.debugInfo=this.debugInfo);var n=!1;e.strictMath||(n=!0,e.strictMath=!0);try{t.features=this.features.eval(e)}finally{n&&(e.strictMath=!1)}return e.mediaPath.push(t),e.mediaBlocks.push(t),e.frames.unshift(this.rules[0]),t.rules=[this.rules[0].eval(e)],e.frames.shift(),e.mediaPath.pop(),0===e.mediaPath.length?t.evalTop(e):t.evalNested(e)},l.prototype.variable=function(e){return n.prototype.variable.call(this.rules[0],e)},l.prototype.find=function(){return n.prototype.find.apply(this.rules[0],arguments)},l.prototype.rulesets=function(){return n.prototype.rulesets.apply(this.rules[0])},l.prototype.emptySelectors=function(){var e=new i("","&",this.index,this.currentFileInfo),t=[new o([e],null,null,this.index,this.currentFileInfo)];return t[0].mediaEmpty=!0,t},l.prototype.markReferenced=function(){var e,t=this.rules[0].rules;for(this.rules[0].markReferenced(),this.isReferenced=!0,e=0;t.length>e;e++)t[e].markReferenced&&t[e].markReferenced()},l.prototype.evalTop=function(e){var t=this;if(e.mediaBlocks.length>1){var r=this.emptySelectors();t=new n(r,e.mediaBlocks),t.multiMedia=!0}return delete e.mediaBlocks,delete e.mediaPath,t},l.prototype.evalNested=function(e){var t,i,o=e.mediaPath.concat([this]);for(t=0;o.length>t;t++)i=o[t].features instanceof r?o[t].features.value:o[t].features,o[t]=Array.isArray(i)?i:[i];return this.features=new r(this.permute(o).map(function(e){for(e=e.map(function(e){return e.toCSS?e:new s(e)}),t=e.length-1;t>0;t--)e.splice(t,0,new s("and"));return new a(e)})),new n([],[])},l.prototype.permute=function(e){if(0===e.length)return[];if(1===e.length)return e[0];for(var t=[],n=this.permute(e.slice(1)),r=0;n.length>r;r++)for(var i=0;e[0].length>i;i++)t.push([e[0][i]].concat(n[r]));return t},l.prototype.bubbleSelectors=function(e){e&&(this.rules=[new n(e.slice(0),[this.rules[0]])])},t.exports=l},{"./anonymous":43,"./directive":54,"./element":55,"./expression":56,"./ruleset":73,"./selector":74,"./value":78}],64:[function(e,t){var n=e("./node"),r=e("./selector"),i=e("./mixin-definition"),o=e("../functions/default"),s=function(e,t,n,i,o){this.selector=new r(e),this.arguments=t&&t.length?t:null,this.index=n,this.currentFileInfo=i,this.important=o};s.prototype=new n,s.prototype.type="MixinCall",s.prototype.accept=function(e){this.selector&&(this.selector=e.visit(this.selector)),this.arguments&&(this.arguments=e.visitArray(this.arguments))},s.prototype.eval=function(e){function t(t,n){var r,i;for(c=0;2>c;c++){for(S[c]=!0,o.value(c),r=0;n.length>r&&S[c];r++)i=n[r],i.matchCondition&&(S[c]=S[c]&&i.matchCondition(null,e));t.matchCondition&&(S[c]=S[c]&&t.matchCondition(a,e))}return S[0]||S[1]?S[0]!=S[1]?S[1]?I:M:k:C}var n,r,s,a,u,l,c,h,f,p,d,v,m,g,y,w=[],x=!1,b=[],S=[],C=-1,k=0,I=1,M=2;for(a=this.arguments&&this.arguments.map(function(t){return{name:t.name,value:t.value.eval(e)}}),y=function(t){return t.matchArgs(null,e)},u=0;e.frames.length>u;u++)if((n=e.frames[u].find(this.selector,null,y)).length>0){for(f=!0,l=0;n.length>l;l++){for(r=n[l].rule,s=n[l].path,h=!1,c=0;e.frames.length>c;c++)if(!(r instanceof i)&&r===(e.frames[c].originalRuleset||e.frames[c])){h=!0;break}h||r.matchArgs(a,e)&&(d={mixin:r,group:t(r,s)},d.group!==C&&b.push(d),x=!0)}for(o.reset(),m=[0,0,0],l=0;b.length>l;l++)m[b[l].group]++;if(m[k]>0)v=M;else if(v=I,m[I]+m[M]>1)throw{type:"Runtime",message:"Ambiguous use of `default()` found when matching for `"+this.format(a)+"`",index:this.index,filename:this.currentFileInfo.filename};for(l=0;b.length>l;l++)if(d=b[l].group,d===k||d===v)try{r=b[l].mixin,r instanceof i||(g=r.originalRuleset||r,r=new i("",[],r.rules,null,!1),r.originalRuleset=g),Array.prototype.push.apply(w,r.evalCall(e,a,this.important).rules)}catch(F){throw{message:F.message,index:this.index,filename:this.currentFileInfo.filename,stack:F.stack}}if(x){if(!this.currentFileInfo||!this.currentFileInfo.reference)for(u=0;w.length>u;u++)p=w[u],p.markReferenced&&p.markReferenced();return w}}throw f?{type:"Runtime",message:"No matching definition was found for `"+this.format(a)+"`",index:this.index,filename:this.currentFileInfo.filename}:{type:"Name",message:this.selector.toCSS().trim()+" is undefined",index:this.index,filename:this.currentFileInfo.filename}},s.prototype.format=function(e){return this.selector.toCSS().trim()+"("+(e?e.map(function(e){var t="";return e.name&&(t+=e.name+":"),t+=e.value.toCSS?e.value.toCSS():"???"}).join(", "):"")+")"},t.exports=s},{"../functions/default":19,"./mixin-definition":65,"./node":67,"./selector":74}],65:[function(e,t){var n=e("./selector"),r=e("./element"),i=e("./ruleset"),o=e("./rule"),s=e("./expression"),a=e("../contexts"),u=function(e,t,i,o,s,a){this.name=e,this.selectors=[new n([new r(null,e,this.index,this.currentFileInfo)])],this.params=t,this.condition=o,this.variadic=s,this.arity=t.length,this.rules=i,this._lookups={},this.required=t.reduce(function(e,t){return!t.name||t.name&&!t.value?e+1:e},0),this.frames=a};u.prototype=new i,u.prototype.type="MixinDefinition",u.prototype.evalFirst=!0,u.prototype.accept=function(e){this.params&&this.params.length&&(this.params=e.visitArray(this.params)),this.rules=e.visitArray(this.rules),this.condition&&(this.condition=e.visit(this.condition))},u.prototype.evalParams=function(e,t,n,r){var u,l,c,h,f,p,d,v,m=new i(null,null),g=this.params.slice(0),y=0;if(t=new a.Eval(t,[m].concat(t.frames)),n)for(n=n.slice(0),y=n.length,c=0;y>c;c++)if(l=n[c],p=l&&l.name){for(d=!1,h=0;g.length>h;h++)if(!r[h]&&p===g[h].name){r[h]=l.value.eval(e),m.prependRule(new o(p,l.value.eval(e))),d=!0;break}if(d){n.splice(c,1),c--;continue}throw{type:"Runtime",message:"Named argument for "+this.name+" "+n[c].name+" not found"}}for(v=0,c=0;g.length>c;c++)if(!r[c]){if(l=n&&n[v],p=g[c].name)if(g[c].variadic){for(u=[],h=v;y>h;h++)u.push(n[h].value.eval(e));m.prependRule(new o(p,new s(u).eval(e)))}else{if(f=l&&l.value)f=f.eval(e);else{if(!g[c].value)throw{type:"Runtime",message:"wrong number of arguments for "+this.name+" ("+y+" for "+this.arity+")"};f=g[c].value.eval(t),m.resetCache()}m.prependRule(new o(p,f)),r[c]=f}if(g[c].variadic&&n)for(h=v;y>h;h++)r[h]=n[h].value.eval(e);v++}return m},u.prototype.makeImportant=function(){var e=this.rules?this.rules.map(function(e){return e.makeImportant?e.makeImportant(!0):e}):this.rules,t=new u(this.name,this.params,e,this.condition,this.variadic,this.frames);return t},u.prototype.eval=function(e){return new u(this.name,this.params,this.rules,this.condition,this.variadic,this.frames||e.frames.slice(0))},u.prototype.evalCall=function(e,t,n){var r,u,l=[],c=this.frames?this.frames.concat(e.frames):e.frames,h=this.evalParams(e,new a.Eval(e,c),t,l);return h.prependRule(new o("@arguments",new s(l).eval(e))),r=this.rules.slice(0),u=new i(null,r),u.originalRuleset=this,u=u.eval(new a.Eval(e,[this,h].concat(c))),n&&(u=u.makeImportant()),u},u.prototype.matchCondition=function(e,t){return this.condition&&!this.condition.eval(new a.Eval(t,[this.evalParams(t,new a.Eval(t,this.frames?this.frames.concat(t.frames):t.frames),e,[])].concat(this.frames).concat(t.frames)))?!1:!0},u.prototype.matchArgs=function(e,t){var n,r=e&&e.length||0;if(this.variadic){if(this.required-1>r)return!1}else{if(this.required>r)return!1;if(r>this.params.length)return!1}n=Math.min(r,this.arity);for(var i=0;n>i;i++)if(!this.params[i].name&&!this.params[i].variadic&&e[i].value.eval(t).toCSS()!=this.params[i].value.eval(t).toCSS())return!1;return!0},t.exports=u},{"../contexts":10,"./element":55,"./expression":56,"./rule":71,"./ruleset":73,"./selector":74}],66:[function(e,t){var n=e("./node"),r=e("./operation"),i=e("./dimension"),o=function(e){this.value=e};o.prototype=new n,o.prototype.type="Negative",o.prototype.genCSS=function(e,t){t.add("-"),this.value.genCSS(e,t)},o.prototype.eval=function(e){return e.isMathOn()?new r("*",[new i(-1),this.value]).eval(e):new o(this.value.eval(e))},t.exports=o},{"./dimension":53,"./node":67,"./operation":68}],67:[function(e,t){var n=function(){};n.prototype.toCSS=function(e){var t=[];return this.genCSS(e,{add:function(e){t.push(e)},isEmpty:function(){return 0===t.length}}),t.join("")},n.prototype.genCSS=function(e,t){t.add(this.value)},n.prototype.accept=function(e){this.value=e.visit(this.value)},n.prototype.eval=function(){return this},n.prototype._operate=function(e,t,n,r){switch(t){case"+":return n+r;case"-":return n-r;case"*":return n*r;case"/":return n/r}},n.prototype.fround=function(e,t){var n=e&&e.numPrecision;return null==n?t:Number((t+2e-16).toFixed(n))},n.compare=function(e,t){if(e.compare&&"Quoted"!==t.type&&"Anonymous"!==t.type)return e.compare(t);if(t.compare)return-t.compare(e);if(e.type!==t.type)return void 0;if(e=e.value,t=t.value,!Array.isArray(e))return e===t?0:void 0;if(e.length!==t.length)return void 0;for(var r=0;e.length>r;r++)if(0!==n.compare(e[r],t[r]))return void 0;return 0},n.numericCompare=function(e,t){return t>e?-1:e===t?0:e>t?1:void 0},t.exports=n},{}],68:[function(e,t){var n=e("./node"),r=e("./color"),i=e("./dimension"),o=function(e,t,n){this.op=e.trim(),this.operands=t,this.isSpaced=n};o.prototype=new n,o.prototype.type="Operation",o.prototype.accept=function(e){this.operands=e.visit(this.operands)},o.prototype.eval=function(e){var t=this.operands[0].eval(e),n=this.operands[1].eval(e);if(e.isMathOn()){if(t instanceof i&&n instanceof r&&(t=t.toColor()),n instanceof i&&t instanceof r&&(n=n.toColor()),!t.operate)throw{type:"Operation",message:"Operation on an invalid type"};return t.operate(e,this.op,n)}return new o(this.op,[t,n],this.isSpaced)},o.prototype.genCSS=function(e,t){this.operands[0].genCSS(e,t),this.isSpaced&&t.add(" "),t.add(this.op),this.isSpaced&&t.add(" "),this.operands[1].genCSS(e,t)},t.exports=o},{"./color":47,"./dimension":53,"./node":67}],69:[function(e,t){var n=e("./node"),r=function(e){this.value=e};r.prototype=new n,r.prototype.type="Paren",r.prototype.genCSS=function(e,t){t.add("("),this.value.genCSS(e,t),t.add(")")},r.prototype.eval=function(e){return new r(this.value.eval(e))},t.exports=r},{"./node":67}],70:[function(e,t){var n=e("./node"),r=e("./js-eval-node"),i=e("./variable"),o=function(e,t,n,r,i){this.escaped=null==n?!0:n,this.value=t||"",this.quote=e.charAt(0),this.index=r,this.currentFileInfo=i
};o.prototype=new r,o.prototype.type="Quoted",o.prototype.genCSS=function(e,t){this.escaped||t.add(this.quote,this.currentFileInfo,this.index),t.add(this.value),this.escaped||t.add(this.quote)},o.prototype.containsVariables=function(){return this.value.match(/(`([^`]+)`)|@\{([\w-]+)\}/)},o.prototype.eval=function(e){function t(e,t,n){var r=e;do e=r,r=e.replace(t,n);while(e!==r);return r}var n=this,r=this.value,s=function(t,r){return String(n.evaluateJavaScript(r,e))},a=function(t,r){var s=new i("@"+r,n.index,n.currentFileInfo).eval(e,!0);return s instanceof o?s.value:s.toCSS()};return r=t(r,/`([^`]+)`/g,s),r=t(r,/@\{([\w-]+)\}/g,a),new o(this.quote+r+this.quote,r,this.escaped,this.index,this.currentFileInfo)},o.prototype.compare=function(e){return"Quoted"!==e.type||this.escaped||e.escaped?e.toCSS&&this.toCSS()===e.toCSS()?0:void 0:n.numericCompare(this.value,e.value)},t.exports=o},{"./js-eval-node":61,"./node":67,"./variable":79}],71:[function(e,t){function n(e,t){var n,r="",i=t.length,o={add:function(e){r+=e}};for(n=0;i>n;n++)t[n].eval(e).genCSS(e,o);return r}var r=e("./node"),i=e("./value"),o=e("./keyword"),s=function(e,t,n,o,s,a,u,l){this.name=e,this.value=t instanceof r?t:new i([t]),this.important=n?" "+n.trim():"",this.merge=o,this.index=s,this.currentFileInfo=a,this.inline=u||!1,this.variable=void 0!==l?l:e.charAt&&"@"===e.charAt(0)};s.prototype=new r,s.prototype.type="Rule",s.prototype.genCSS=function(e,t){t.add(this.name+(e.compress?":":": "),this.currentFileInfo,this.index);try{this.value.genCSS(e,t)}catch(n){throw n.index=this.index,n.filename=this.currentFileInfo.filename,n}t.add(this.important+(this.inline||e.lastRule&&e.compress?"":";"),this.currentFileInfo,this.index)},s.prototype.eval=function(e){var t,r=!1,i=this.name,a=this.variable;"string"!=typeof i&&(i=1===i.length&&i[0]instanceof o?i[0].value:n(e,i),a=!1),"font"!==i||e.strictMath||(r=!0,e.strictMath=!0);try{if(e.importantScope.push({}),t=this.value.eval(e),!this.variable&&"DetachedRuleset"===t.type)throw{message:"Rulesets cannot be evaluated on a property.",index:this.index,filename:this.currentFileInfo.filename};var u=this.important,l=e.importantScope.pop();return!u&&l.important&&(u=l.important),new s(i,t,u,this.merge,this.index,this.currentFileInfo,this.inline,a)}catch(c){throw"number"!=typeof c.index&&(c.index=this.index,c.filename=this.currentFileInfo.filename),c}finally{r&&(e.strictMath=!1)}},s.prototype.makeImportant=function(){return new s(this.name,this.value,"!important",this.merge,this.index,this.currentFileInfo,this.inline)},t.exports=s},{"./keyword":62,"./node":67,"./value":78}],72:[function(e,t){var n=e("./node"),r=e("./variable"),i=function(e){this.variable=e};i.prototype=new n,i.prototype.type="RulesetCall",i.prototype.eval=function(e){var t=new r(this.variable).eval(e);return t.callEval(e)},t.exports=i},{"./node":67,"./variable":79}],73:[function(e,t){var n=e("./node"),r=e("./rule"),i=e("./selector"),o=e("./element"),s=e("./paren"),a=e("../contexts"),u=e("../functions/default"),l=e("./debug-info"),c=function(e,t,n){this.selectors=e,this.rules=t,this._lookups={},this.strictImports=n};c.prototype=new n,c.prototype.type="Ruleset",c.prototype.isRuleset=!0,c.prototype.isRulesetLike=!0,c.prototype.accept=function(e){this.paths?e.visitArray(this.paths,!0):this.selectors&&(this.selectors=e.visitArray(this.selectors)),this.rules&&this.rules.length&&(this.rules=e.visitArray(this.rules))},c.prototype.eval=function(e){var t,n,i,o,s=this.selectors,a=!1;if(s&&(n=s.length)){for(t=[],u.error({type:"Syntax",message:"it is currently only allowed in parametric mixin guards,"}),o=0;n>o;o++)i=s[o].eval(e),t.push(i),i.evaldCondition&&(a=!0);u.reset()}else a=!0;var l,h,f=this.rules?this.rules.slice(0):null,p=new c(t,f,this.strictImports);p.originalRuleset=this,p.root=this.root,p.firstRoot=this.firstRoot,p.allowImports=this.allowImports,this.debugInfo&&(p.debugInfo=this.debugInfo),a||(f.length=0);var d=e.frames;d.unshift(p);var v=e.selectors;v||(e.selectors=v=[]),v.unshift(this.selectors),(p.root||p.allowImports||!p.strictImports)&&p.evalImports(e);var m=p.rules,g=m?m.length:0;for(o=0;g>o;o++)m[o].evalFirst&&(m[o]=m[o].eval(e));var y=e.mediaBlocks&&e.mediaBlocks.length||0;for(o=0;g>o;o++)"MixinCall"===m[o].type?(f=m[o].eval(e).filter(function(e){return e instanceof r&&e.variable?!p.variable(e.name):!0}),m.splice.apply(m,[o,1].concat(f)),g+=f.length-1,o+=f.length-1,p.resetCache()):"RulesetCall"===m[o].type&&(f=m[o].eval(e).rules.filter(function(e){return e instanceof r&&e.variable?!1:!0}),m.splice.apply(m,[o,1].concat(f)),g+=f.length-1,o+=f.length-1,p.resetCache());for(o=0;m.length>o;o++)l=m[o],l.evalFirst||(m[o]=l=l.eval?l.eval(e):l);for(o=0;m.length>o;o++)if(l=m[o],l instanceof c&&l.selectors&&1===l.selectors.length&&l.selectors[0].isJustParentSelector()){m.splice(o--,1);for(var w=0;l.rules.length>w;w++)h=l.rules[w],h instanceof r&&h.variable||m.splice(++o,0,h)}if(d.shift(),v.shift(),e.mediaBlocks)for(o=y;e.mediaBlocks.length>o;o++)e.mediaBlocks[o].bubbleSelectors(t);return p},c.prototype.evalImports=function(e){var t,n,r=this.rules;if(r)for(t=0;r.length>t;t++)"Import"===r[t].type&&(n=r[t].eval(e),n&&n.length?(r.splice.apply(r,[t,1].concat(n)),t+=n.length-1):r.splice(t,1,n),this.resetCache())},c.prototype.makeImportant=function(){var e=new c(this.selectors,this.rules.map(function(e){return e.makeImportant?e.makeImportant():e}),this.strictImports);return e},c.prototype.matchArgs=function(e){return!e||0===e.length},c.prototype.matchCondition=function(e,t){var n=this.selectors[this.selectors.length-1];return n.evaldCondition?n.condition&&!n.condition.eval(new a.Eval(t,t.frames))?!1:!0:!1},c.prototype.resetCache=function(){this._rulesets=null,this._variables=null,this._lookups={}},c.prototype.variables=function(){return this._variables||(this._variables=this.rules?this.rules.reduce(function(e,t){if(t instanceof r&&t.variable===!0&&(e[t.name]=t),"Import"===t.type&&t.root&&t.root.variables){var n=t.root.variables();for(var i in n)n.hasOwnProperty(i)&&(e[i]=n[i])}return e},{}):{}),this._variables},c.prototype.variable=function(e){return this.variables()[e]},c.prototype.rulesets=function(){if(!this.rules)return null;var e,t,n=[],r=this.rules,i=r.length;for(e=0;i>e;e++)t=r[e],t.isRuleset&&n.push(t);return n},c.prototype.prependRule=function(e){var t=this.rules;t?t.unshift(e):this.rules=[e]},c.prototype.find=function(e,t,n){t=t||this;var r,o,s=[],a=e.toCSS();return a in this._lookups?this._lookups[a]:(this.rulesets().forEach(function(a){if(a!==t)for(var u=0;a.selectors.length>u;u++)if(r=e.match(a.selectors[u])){if(e.elements.length>r){if(!n||n(a)){o=a.find(new i(e.elements.slice(r)),t,n);for(var l=0;o.length>l;++l)o[l].path.push(a);Array.prototype.push.apply(s,o)}}else s.push({rule:a,path:[]});break}}),this._lookups[a]=s,s)},c.prototype.genCSS=function(e,t){function n(e,t){return"boolean"==typeof e.isRulesetLike?e.isRulesetLike:"function"==typeof e.isRulesetLike?e.isRulesetLike(t):!1}var r,i,o,s,a,u,c=[],h=[],f=[];e.tabLevel=e.tabLevel||0,this.root||e.tabLevel++;var p,d=e.compress?"":Array(e.tabLevel+1).join("  "),v=e.compress?"":Array(e.tabLevel).join("  ");for(r=0;this.rules.length>r;r++)a=this.rules[r],n(a,this.root)?f.push(a):a.isCharset&&a.isCharset()?c.push(a):h.push(a);if(h=c.concat(h),!this.root){s=l(e,this,v),s&&(t.add(s),t.add(v));var m,g=this.paths,y=g.length;for(p=e.compress?",":",\n"+v,r=0;y>r;r++)if(u=g[r],m=u.length)for(r>0&&t.add(p),e.firstSelector=!0,u[0].genCSS(e,t),e.firstSelector=!1,i=1;m>i;i++)u[i].genCSS(e,t);t.add((e.compress?"{":" {\n")+d)}for(r=0;h.length>r;r++)a=h[r],r+1!==h.length||this.root&&0!==f.length&&!this.firstRoot||(e.lastRule=!0),a.genCSS?a.genCSS(e,t):a.value&&t.add(a.value.toString()),e.lastRule?e.lastRule=!1:t.add(e.compress?"":"\n"+d);if(this.root||(t.add(e.compress?"}":"\n"+v+"}"),e.tabLevel--),p=(e.compress?"":"\n")+(this.root?d:v),o=f.length)for(h.length&&p&&t.add(p),f[0].genCSS(e,t),r=1;o>r;r++)p&&t.add(p),f[r].genCSS(e,t);t.isEmpty()||e.compress||!this.firstRoot||t.add("\n")},c.prototype.markReferenced=function(){var e;if(this.selectors)for(e=0;this.selectors.length>e;e++)this.selectors[e].markReferenced();if(this.rules)for(e=0;this.rules.length>e;e++)this.rules[e].markReferenced&&this.rules[e].markReferenced()},c.prototype.getIsReferenced=function(){var e,t,n,r;if(this.paths)for(e=0;this.paths.length>e;e++)for(n=this.paths[e],t=0;n.length>t;t++)if(n[t].getIsReferenced&&n[t].getIsReferenced())return!0;if(this.selectors)for(e=0;this.selectors.length>e;e++)if(r=this.selectors[e],r.getIsReferenced&&r.getIsReferenced())return!0;return!1},c.prototype.joinSelectors=function(e,t,n){for(var r=0;n.length>r;r++)this.joinSelector(e,t,n[r])},c.prototype.joinSelector=function(e,t,n){function r(e,t){var n,r;if(0===e.length)n=new s(e[0]);else{var a=[];for(r=0;e.length>r;r++)a.push(new o(null,e[r],t.index,t.currentFileInfo));n=new s(new i(a))}return n}function a(e,t){var n,r;return n=new o(null,e,t.index,t.currentFileInfo),r=new i([n])}function u(e,t,n){function i(e){var t;return"Paren"!==e.value.type?null:(t=e.value.value,"Selector"!==t.type?null:t)}var s,f,p,d,v,m,g,y,w,x,b=!1;for(d=[],v=[[]],s=0;n.elements.length>s;s++)if(y=n.elements[s],"&"!==y.value){var S=i(y);if(null!=S){h(d,v);var C,k=[],I=[];for(C=u(k,t,S),b=b||C,p=0;k.length>p;p++){var M=a(r(k[p],y),y);c(v,[M],y,n,I)}v=I,d=[]}else d.push(y)}else{for(b=!0,m=[],h(d,v),f=0;v.length>f;f++)if(g=v[f],0===t.length)g.length>0&&g[0].elements.push(new o(y.combinator,"",y.index,y.currentFileInfo)),m.push(g);else for(p=0;t.length>p;p++){var F=l(g,t[p],y,n);m.push(F)}v=m,d=[]}for(h(d,v),s=0;v.length>s;s++)w=v[s].length,w>0&&(e.push(v[s]),x=v[s][w-1],v[s][w-1]=x.createDerived(x.elements,n.extendList));return b}function l(e,t,n,r){var i,s,a;if(i=[],e.length>0?(i=e.slice(0),s=i.pop(),a=r.createDerived(s.elements.slice(0))):a=r.createDerived([]),t.length>0){var u=n.combinator,l=t[0].elements[0];u.emptyOrWhitespace&&!l.combinator.emptyOrWhitespace&&(u=l.combinator),a.elements.push(new o(u,l.value,n.index,n.currentFileInfo)),a.elements=a.elements.concat(t[0].elements.slice(1))}return 0!==a.elements.length&&i.push(a),t.length>1&&(i=i.concat(t.slice(1))),i}function c(e,t,n,r,i){var o;for(o=0;e.length>o;o++){var s=l(e[o],t,n,r);i.push(s)}return i}function h(e,t){var n,r;if(0!==e.length){if(0===t.length)return void t.push([new i(e)]);for(n=0;t.length>n;n++)r=t[n],r.length>0?r[r.length-1]=r[r.length-1].createDerived(r[r.length-1].elements.concat(e)):r.push(new i(e))}}var f,p,d;if(p=[],d=u(p,t,n),!d)if(t.length>0)for(p=[],f=0;t.length>f;f++)p.push(t[f].concat(n));else p=[[n]];for(f=0;p.length>f;f++)e.push(p[f])},t.exports=c},{"../contexts":10,"../functions/default":19,"./debug-info":51,"./element":55,"./node":67,"./paren":69,"./rule":71,"./selector":74}],74:[function(e,t){var n=e("./node"),r=function(e,t,n,r,i,o){this.elements=e,this.extendList=t,this.condition=n,this.currentFileInfo=i||{},this.isReferenced=o,n||(this.evaldCondition=!0)};r.prototype=new n,r.prototype.type="Selector",r.prototype.accept=function(e){this.elements&&(this.elements=e.visitArray(this.elements)),this.extendList&&(this.extendList=e.visitArray(this.extendList)),this.condition&&(this.condition=e.visit(this.condition))},r.prototype.createDerived=function(e,t,n){n=null!=n?n:this.evaldCondition;var i=new r(e,t||this.extendList,null,this.index,this.currentFileInfo,this.isReferenced);return i.evaldCondition=n,i.mediaEmpty=this.mediaEmpty,i},r.prototype.match=function(e){var t,n,r=this.elements,i=r.length;if(e.CacheElements(),t=e._elements.length,0===t||t>i)return 0;for(n=0;t>n;n++)if(r[n].value!==e._elements[n])return 0;return t},r.prototype.CacheElements=function(){if(!this._elements){var e=this.elements.map(function(e){return e.combinator.value+(e.value.value||e.value)}).join("").match(/[,&#\*\.\w-]([\w-]|(\\.))*/g);e?"&"===e[0]&&e.shift():e=[],this._elements=e}},r.prototype.isJustParentSelector=function(){return!this.mediaEmpty&&1===this.elements.length&&"&"===this.elements[0].value&&(" "===this.elements[0].combinator.value||""===this.elements[0].combinator.value)},r.prototype.eval=function(e){var t=this.condition&&this.condition.eval(e),n=this.elements,r=this.extendList;return n=n&&n.map(function(t){return t.eval(e)}),r=r&&r.map(function(t){return t.eval(e)}),this.createDerived(n,r,t)},r.prototype.genCSS=function(e,t){var n,r;if(e&&e.firstSelector||""!==this.elements[0].combinator.value||t.add(" ",this.currentFileInfo,this.index),!this._css)for(n=0;this.elements.length>n;n++)r=this.elements[n],r.genCSS(e,t)},r.prototype.markReferenced=function(){this.isReferenced=!0},r.prototype.getIsReferenced=function(){return!this.currentFileInfo.reference||this.isReferenced},r.prototype.getIsOutput=function(){return this.evaldCondition},t.exports=r},{"./node":67}],75:[function(e,t){var n=e("./node"),r=function(e){this.value=e};r.prototype=new n,r.prototype.type="UnicodeDescriptor",t.exports=r},{"./node":67}],76:[function(e,t){var n=e("./node"),r=e("../data/unit-conversions"),i=function(e,t,n){this.numerator=e?e.slice(0).sort():[],this.denominator=t?t.slice(0).sort():[],n?this.backupUnit=n:e&&e.length&&(this.backupUnit=e[0])};i.prototype=new n,i.prototype.type="Unit",i.prototype.clone=function(){return new i(this.numerator.slice(0),this.denominator.slice(0),this.backupUnit)},i.prototype.genCSS=function(e,t){var n=e&&e.strictUnits;1===this.numerator.length?t.add(this.numerator[0]):!n&&this.backupUnit?t.add(this.backupUnit):!n&&this.denominator.length&&t.add(this.denominator[0])},i.prototype.toString=function(){var e,t=this.numerator.join("*");for(e=0;this.denominator.length>e;e++)t+="/"+this.denominator[e];return t},i.prototype.compare=function(e){return this.is(e.toString())?0:void 0},i.prototype.is=function(e){return this.toString().toUpperCase()===e.toUpperCase()},i.prototype.isLength=function(){return Boolean(this.toCSS().match(/px|em|%|in|cm|mm|pc|pt|ex/))},i.prototype.isEmpty=function(){return 0===this.numerator.length&&0===this.denominator.length},i.prototype.isSingular=function(){return 1>=this.numerator.length&&0===this.denominator.length},i.prototype.map=function(e){var t;for(t=0;this.numerator.length>t;t++)this.numerator[t]=e(this.numerator[t],!1);for(t=0;this.denominator.length>t;t++)this.denominator[t]=e(this.denominator[t],!0)},i.prototype.usedUnits=function(){var e,t,n={};t=function(t){return e.hasOwnProperty(t)&&!n[i]&&(n[i]=t),t};for(var i in r)r.hasOwnProperty(i)&&(e=r[i],this.map(t));return n},i.prototype.cancel=function(){var e,t,n={};for(t=0;this.numerator.length>t;t++)e=this.numerator[t],n[e]=(n[e]||0)+1;for(t=0;this.denominator.length>t;t++)e=this.denominator[t],n[e]=(n[e]||0)-1;this.numerator=[],this.denominator=[];for(e in n)if(n.hasOwnProperty(e)){var r=n[e];if(r>0)for(t=0;r>t;t++)this.numerator.push(e);else if(0>r)for(t=0;-r>t;t++)this.denominator.push(e)}this.numerator.sort(),this.denominator.sort()},t.exports=i},{"../data/unit-conversions":13,"./node":67}],77:[function(e,t){var n=e("./node"),r=function(e,t,n,r){this.value=e,this.currentFileInfo=n,this.index=t,this.isEvald=r};r.prototype=new n,r.prototype.type="Url",r.prototype.accept=function(e){this.value=e.visit(this.value)},r.prototype.genCSS=function(e,t){t.add("url("),this.value.genCSS(e,t),t.add(")")},r.prototype.eval=function(e){var t,n=this.value.eval(e);if(!this.isEvald&&(t=this.currentFileInfo&&this.currentFileInfo.rootpath,t&&"string"==typeof n.value&&e.isPathRelative(n.value)&&(n.quote||(t=t.replace(/[\(\)'"\s]/g,function(e){return"\\"+e})),n.value=t+n.value),n.value=e.normalizePath(n.value),e.urlArgs&&!n.value.match(/^\s*data:/))){var i=-1===n.value.indexOf("?")?"?":"&",o=i+e.urlArgs;-1!==n.value.indexOf("#")?n.value=n.value.replace("#",o+"#"):n.value+=o}return new r(n,this.index,this.currentFileInfo,!0)},t.exports=r},{"./node":67}],78:[function(e,t){var n=e("./node"),r=function(e){if(this.value=e,!e)throw new Error("Value requires an array argument")};r.prototype=new n,r.prototype.type="Value",r.prototype.accept=function(e){this.value&&(this.value=e.visitArray(this.value))},r.prototype.eval=function(e){return 1===this.value.length?this.value[0].eval(e):new r(this.value.map(function(t){return t.eval(e)}))},r.prototype.genCSS=function(e,t){var n;for(n=0;this.value.length>n;n++)this.value[n].genCSS(e,t),this.value.length>n+1&&t.add(e&&e.compress?",":", ")},t.exports=r},{"./node":67}],79:[function(e,t){var n=e("./node"),r=function(e,t,n){this.name=e,this.index=t,this.currentFileInfo=n||{}};r.prototype=new n,r.prototype.type="Variable",r.prototype.eval=function(e){var t,n=this.name;if(0===n.indexOf("@@")&&(n="@"+new r(n.slice(1),this.index,this.currentFileInfo).eval(e).value),this.evaluating)throw{type:"Name",message:"Recursive variable definition for "+n,filename:this.currentFileInfo.filename,index:this.index};if(this.evaluating=!0,t=this.find(e.frames,function(t){var r=t.variable(n);if(r){if(r.important){var i=e.importantScope[e.importantScope.length-1];i.important=r.important}return r.value.eval(e)}}))return this.evaluating=!1,t;throw{type:"Name",message:"variable "+n+" is undefined",filename:this.currentFileInfo.filename,index:this.index}},r.prototype.find=function(e,t){for(var n,r=0;e.length>r;r++)if(n=t.call(e,e[r]))return n;return null},t.exports=r},{"./node":67}],80:[function(e,t){t.exports={getLocation:function(e,t){for(var n=e+1,r=null,i=-1;--n>=0&&"\n"!==t.charAt(n);)i++;return"number"==typeof e&&(r=(t.slice(0,e).match(/\n/g)||"").length),{line:r,column:i}}}},{}],81:[function(e,t){var n=e("../tree"),r=e("./visitor"),i=e("../logger"),o=function(){this._visitor=new r(this),this.contexts=[],this.allExtendsStack=[[]]};o.prototype={run:function(e){return e=this._visitor.visit(e),e.allExtends=this.allExtendsStack[0],e},visitRule:function(e,t){t.visitDeeper=!1},visitMixinDefinition:function(e,t){t.visitDeeper=!1},visitRuleset:function(e){if(!e.root){var t,r,i,o,s=[],a=e.rules,u=a?a.length:0;for(t=0;u>t;t++)e.rules[t]instanceof n.Extend&&(s.push(a[t]),e.extendOnEveryPath=!0);var l=e.paths;for(t=0;l.length>t;t++){var c=l[t],h=c[c.length-1],f=h.extendList;for(o=f?f.slice(0).concat(s):s,o&&(o=o.map(function(e){return e.clone()})),r=0;o.length>r;r++)this.foundExtends=!0,i=o[r],i.findSelfSelectors(c),i.ruleset=e,0===r&&(i.firstExtendOnThisSelectorPath=!0),this.allExtendsStack[this.allExtendsStack.length-1].push(i)}this.contexts.push(e.selectors)}},visitRulesetOut:function(e){e.root||(this.contexts.length=this.contexts.length-1)},visitMedia:function(e){e.allExtends=[],this.allExtendsStack.push(e.allExtends)},visitMediaOut:function(){this.allExtendsStack.length=this.allExtendsStack.length-1},visitDirective:function(e){e.allExtends=[],this.allExtendsStack.push(e.allExtends)},visitDirectiveOut:function(){this.allExtendsStack.length=this.allExtendsStack.length-1}};var s=function(){this._visitor=new r(this)};s.prototype={run:function(e){var t=new o;if(this.extendIndicies={},t.run(e),!t.foundExtends)return e;e.allExtends=e.allExtends.concat(this.doExtendChaining(e.allExtends,e.allExtends)),this.allExtendsStack=[e.allExtends];var n=this._visitor.visit(e);return this.checkExtendsForNonMatched(e.allExtends),n},checkExtendsForNonMatched:function(e){var t=this.extendIndicies;e.filter(function(e){return!e.hasFoundMatches&&1==e.parent_ids.length}).forEach(function(e){var n="_unknown_";try{n=e.selector.toCSS({})}catch(r){}t[e.index+" "+n]||(t[e.index+" "+n]=!0,i.warn("extend '"+n+"' has no matches"))})},doExtendChaining:function(e,t,r){var i,o,s,a,u,l,c,h,f=[],p=this;for(r=r||0,i=0;e.length>i;i++)for(o=0;t.length>o;o++)l=e[i],c=t[o],l.parent_ids.indexOf(c.object_id)>=0||(u=[c.selfSelectors[0]],s=p.findMatch(l,u),s.length&&(l.hasFoundMatches=!0,l.selfSelectors.forEach(function(e){a=p.extendSelector(s,u,e),h=new n.Extend(c.selector,c.option,0),h.selfSelectors=a,a[a.length-1].extendList=[h],f.push(h),h.ruleset=c.ruleset,h.parent_ids=h.parent_ids.concat(c.parent_ids,l.parent_ids),c.firstExtendOnThisSelectorPath&&(h.firstExtendOnThisSelectorPath=!0,c.ruleset.paths.push(a))})));if(f.length){if(this.extendChainCount++,r>100){var d="{unable to calculate}",v="{unable to calculate}";try{d=f[0].selfSelectors[0].toCSS(),v=f[0].selector.toCSS()}catch(m){}throw{message:"extend circular reference detected. One of the circular extends is currently:"+d+":extend("+v+")"}}return f.concat(p.doExtendChaining(f,t,r+1))}return f},visitRule:function(e,t){t.visitDeeper=!1},visitMixinDefinition:function(e,t){t.visitDeeper=!1},visitSelector:function(e,t){t.visitDeeper=!1},visitRuleset:function(e){if(!e.root){var t,n,r,i,o=this.allExtendsStack[this.allExtendsStack.length-1],s=[],a=this;for(r=0;o.length>r;r++)for(n=0;e.paths.length>n;n++)if(i=e.paths[n],!e.extendOnEveryPath){var u=i[i.length-1].extendList;u&&u.length||(t=this.findMatch(o[r],i),t.length&&(o[r].hasFoundMatches=!0,o[r].selfSelectors.forEach(function(e){s.push(a.extendSelector(t,i,e))})))}e.paths=e.paths.concat(s)}},findMatch:function(e,t){var n,r,i,o,s,a,u,l=this,c=e.selector.elements,h=[],f=[];for(n=0;t.length>n;n++)for(r=t[n],i=0;r.elements.length>i;i++)for(o=r.elements[i],(e.allowBefore||0===n&&0===i)&&h.push({pathIndex:n,index:i,matched:0,initialCombinator:o.combinator}),a=0;h.length>a;a++)u=h[a],s=o.combinator.value,""===s&&0===i&&(s=" "),!l.isElementValuesEqual(c[u.matched].value,o.value)||u.matched>0&&c[u.matched].combinator.value!==s?u=null:u.matched++,u&&(u.finished=u.matched===c.length,u.finished&&!e.allowAfter&&(r.elements.length>i+1||t.length>n+1)&&(u=null)),u?u.finished&&(u.length=c.length,u.endPathIndex=n,u.endPathElementIndex=i+1,h.length=0,f.push(u)):(h.splice(a,1),a--);return f},isElementValuesEqual:function(e,t){if("string"==typeof e||"string"==typeof t)return e===t;if(e instanceof n.Attribute)return e.op!==t.op||e.key!==t.key?!1:e.value&&t.value?(e=e.value.value||e.value,t=t.value.value||t.value,e===t):e.value||t.value?!1:!0;if(e=e.value,t=t.value,e instanceof n.Selector){if(!(t instanceof n.Selector)||e.elements.length!==t.elements.length)return!1;for(var r=0;e.elements.length>r;r++){if(e.elements[r].combinator.value!==t.elements[r].combinator.value&&(0!==r||(e.elements[r].combinator.value||" ")!==(t.elements[r].combinator.value||" ")))return!1;if(!this.isElementValuesEqual(e.elements[r].value,t.elements[r].value))return!1}return!0}return!1},extendSelector:function(e,t,r){var i,o,s,a,u,l=0,c=0,h=[];for(i=0;e.length>i;i++)a=e[i],o=t[a.pathIndex],s=new n.Element(a.initialCombinator,r.elements[0].value,r.elements[0].index,r.elements[0].currentFileInfo),a.pathIndex>l&&c>0&&(h[h.length-1].elements=h[h.length-1].elements.concat(t[l].elements.slice(c)),c=0,l++),u=o.elements.slice(c,a.index).concat([s]).concat(r.elements.slice(1)),l===a.pathIndex&&i>0?h[h.length-1].elements=h[h.length-1].elements.concat(u):(h=h.concat(t.slice(l,a.pathIndex)),h.push(new n.Selector(u))),l=a.endPathIndex,c=a.endPathElementIndex,c>=t[l].elements.length&&(c=0,l++);return t.length>l&&c>0&&(h[h.length-1].elements=h[h.length-1].elements.concat(t[l].elements.slice(c)),l++),h=h.concat(t.slice(l,t.length))},visitRulesetOut:function(){},visitMedia:function(e){var t=e.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length-1]);t=t.concat(this.doExtendChaining(t,e.allExtends)),this.allExtendsStack.push(t)},visitMediaOut:function(){var e=this.allExtendsStack.length-1;this.checkExtendsForNonMatched(this.allExtendsStack[e]),this.allExtendsStack.length=e},visitDirective:function(e){var t=e.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length-1]);t=t.concat(this.doExtendChaining(t,e.allExtends)),this.allExtendsStack.push(t)},visitDirectiveOut:function(){var e=this.allExtendsStack.length-1;this.checkExtendsForNonMatched(this.allExtendsStack[e]),this.allExtendsStack.length=e}},t.exports=s},{"../logger":31,"../tree":59,"./visitor":87}],82:[function(e,t){function n(e){this.imports=[],this.variableImports=[],this._onSequencerEmpty=e,this._currentDepth=0}n.prototype.addImport=function(e){var t=this,n={callback:e,args:null,isReady:!1};return this.imports.push(n),function(){n.args=Array.prototype.slice.call(arguments,0),n.isReady=!0,t.tryRun()}},n.prototype.addVariableImport=function(e){this.variableImports.push(e)},n.prototype.tryRun=function(){this._currentDepth++;try{for(;;){for(;this.imports.length>0;){var e=this.imports[0];if(!e.isReady)return;this.imports=this.imports.slice(1),e.callback.apply(null,e.args)}if(0===this.variableImports.length)break;var t=this.variableImports[0];this.variableImports=this.variableImports.slice(1),t()}}finally{this._currentDepth--}0===this._currentDepth&&this._onSequencerEmpty&&this._onSequencerEmpty()},t.exports=n},{}],83:[function(e,t){var n=e("../contexts"),r=e("./visitor"),i=e("./import-sequencer"),o=function(e,t){this._visitor=new r(this),this._importer=e,this._finish=t,this.context=new n.Eval,this.importCount=0,this.onceFileDetectionMap={},this.recursionDetector={},this._sequencer=new i(this._onSequencerEmpty.bind(this))};o.prototype={isReplacing:!1,run:function(e){try{this._visitor.visit(e)}catch(t){this.error=t}this.isFinished=!0,this._sequencer.tryRun()},_onSequencerEmpty:function(){this.isFinished&&this._finish(this.error)},visitImport:function(e,t){var r=e.options.inline;if(!e.css||r){var i=new n.Eval(this.context,this.context.frames.slice(0)),o=i.frames[0];this.importCount++,e.isVariableImport()?this._sequencer.addVariableImport(this.processImportNode.bind(this,e,i,o)):this.processImportNode(e,i,o)}t.visitDeeper=!1},processImportNode:function(e,t,n){var r,i=e.options.inline;try{r=e.evalForImport(t)}catch(o){o.filename||(o.index=e.index,o.filename=e.currentFileInfo.filename),e.css=!0,e.error=o}if(!r||r.css&&!i)this.importCount--,this.isFinished&&this._sequencer.tryRun();else{r.options.multiple&&(t.importMultiple=!0);for(var s=void 0===r.css,a=0;n.rules.length>a;a++)if(n.rules[a]===e){n.rules[a]=r;break}var u=this.onImported.bind(this,r,t),l=this._sequencer.addImport(u);this._importer.push(r.getPath(),s,r.currentFileInfo,r.options,l)}},onImported:function(e,t,n,r,i,o){n&&(n.filename||(n.index=e.index,n.filename=e.currentFileInfo.filename),this.error=n);var s=this,a=e.options.inline,u=i||o in s.recursionDetector;if(t.importMultiple||(e.skip=u?!0:function(){return o in s.onceFileDetectionMap?!0:(s.onceFileDetectionMap[o]=!0,!1)}),r&&(e.root=r,e.importedFilename=o,!a&&(t.importMultiple||!u))){s.recursionDetector[o]=!0;var l=this.context;this.context=t;try{this._visitor.visit(r)}catch(n){this.error=n}this.context=l}s.importCount--,s.isFinished&&s._sequencer.tryRun()},visitRule:function(e,t){t.visitDeeper=!1},visitDirective:function(e){this.context.frames.unshift(e)},visitDirectiveOut:function(){this.context.frames.shift()},visitMixinDefinition:function(e){this.context.frames.unshift(e)},visitMixinDefinitionOut:function(){this.context.frames.shift()},visitRuleset:function(e){this.context.frames.unshift(e)},visitRulesetOut:function(){this.context.frames.shift()},visitMedia:function(e){this.context.frames.unshift(e.rules[0])},visitMediaOut:function(){this.context.frames.shift()}},t.exports=o},{"../contexts":10,"./import-sequencer":82,"./visitor":87}],84:[function(e,t){var n={Visitor:e("./visitor"),ImportVisitor:e("./import-visitor"),ExtendVisitor:e("./extend-visitor"),JoinSelectorVisitor:e("./join-selector-visitor"),ToCSSVisitor:e("./to-css-visitor")};t.exports=n},{"./extend-visitor":81,"./import-visitor":83,"./join-selector-visitor":85,"./to-css-visitor":86,"./visitor":87}],85:[function(e,t){var n=e("./visitor"),r=function(){this.contexts=[[]],this._visitor=new n(this)};r.prototype={run:function(e){return this._visitor.visit(e)},visitRule:function(e,t){t.visitDeeper=!1},visitMixinDefinition:function(e,t){t.visitDeeper=!1},visitRuleset:function(e){var t,n=this.contexts[this.contexts.length-1],r=[];this.contexts.push(r),e.root||(t=e.selectors,t&&(t=t.filter(function(e){return e.getIsOutput()}),e.selectors=t.length?t:t=null,t&&e.joinSelectors(r,n,t)),t||(e.rules=null),e.paths=r)},visitRulesetOut:function(){this.contexts.length=this.contexts.length-1},visitMedia:function(e){var t=this.contexts[this.contexts.length-1];e.rules[0].root=0===t.length||t[0].multiMedia}},t.exports=r},{"./visitor":87}],86:[function(e,t){var n=e("../tree"),r=e("./visitor"),i=function(e){this._visitor=new r(this),this._context=e};i.prototype={isReplacing:!0,run:function(e){return this._visitor.visit(e)},visitRule:function(e){return e.variable?void 0:e},visitMixinDefinition:function(e){e.frames=[]},visitExtend:function(){},visitComment:function(e){return e.isSilent(this._context)?void 0:e},visitMedia:function(e,t){return e.accept(this._visitor),t.visitDeeper=!1,e.rules.length?e:void 0},visitDirective:function(e,t){if("@charset"===e.name){if(!e.getIsReferenced())return;if(this.charset){if(e.debugInfo){var r=new n.Comment("/* "+e.toCSS(this._context).replace(/\n/g,"")+" */\n");return r.debugInfo=e.debugInfo,this._visitor.visit(r)}return}this.charset=!0}if(e.rules&&e.rules.rules){if(this._mergeRules(e.rules.rules),e.accept(this._visitor),t.visitDeeper=!1,e.getIsReferenced())return e;if(!e.rules.rules)return;for(var i=0;e.rules.rules.length>i;i++){var o=e.rules.rules[i];if(o.getIsReferenced&&o.getIsReferenced())return e.markReferenced(),e}}else if(e.getIsReferenced())return e},checkPropertiesInRoot:function(e){for(var t,r=0;e.length>r;r++)if(t=e[r],t instanceof n.Rule&&!t.variable)throw{message:"properties must be inside selector blocks, they cannot be in the root.",index:t.index,filename:t.currentFileInfo?t.currentFileInfo.filename:null}},visitRuleset:function(e,t){var r,i=[];if(e.firstRoot&&this.checkPropertiesInRoot(e.rules),e.root)e.accept(this._visitor),t.visitDeeper=!1,(e.firstRoot||e.rules&&e.rules.length>0)&&i.splice(0,0,e);else{e.paths&&(e.paths=e.paths.filter(function(e){var t;for(" "===e[0].elements[0].combinator.value&&(e[0].elements[0].combinator=new n.Combinator("")),t=0;e.length>t;t++)if(e[t].getIsReferenced()&&e[t].getIsOutput())return!0;return!1}));for(var o=e.rules,s=o?o.length:0,a=0;s>a;)r=o[a],r&&r.rules?(i.push(this._visitor.visit(r)),o.splice(a,1),s--):a++;s>0?e.accept(this._visitor):e.rules=null,t.visitDeeper=!1,o=e.rules,o&&(this._mergeRules(o),o=e.rules),o&&(this._removeDuplicateRules(o),o=e.rules),o&&o.length>0&&e.paths.length>0&&i.splice(0,0,e)}return 1===i.length?i[0]:i},_removeDuplicateRules:function(e){if(e){var t,r,i,o={};for(i=e.length-1;i>=0;i--)if(r=e[i],r instanceof n.Rule)if(o[r.name]){t=o[r.name],t instanceof n.Rule&&(t=o[r.name]=[o[r.name].toCSS(this._context)]);var s=r.toCSS(this._context);-1!==t.indexOf(s)?e.splice(i,1):t.push(s)}else o[r.name]=r}},_mergeRules:function(e){if(e){for(var t,r,i,o={},s=0;e.length>s;s++)r=e[s],r instanceof n.Rule&&r.merge&&(i=[r.name,r.important?"!":""].join(","),o[i]?e.splice(s--,1):o[i]=[],o[i].push(r));Object.keys(o).map(function(e){function i(e){return new n.Expression(e.map(function(e){return e.value}))}function s(e){return new n.Value(e.map(function(e){return e}))}if(t=o[e],t.length>1){r=t[0];var a=[],u=[];t.map(function(e){"+"===e.merge&&(u.length>0&&a.push(i(u)),u=[]),u.push(e)}),a.push(i(u)),r.value=s(a)}})}}},t.exports=i},{"../tree":59,"./visitor":87}],87:[function(e,t){function n(e){return e}function r(e,t){var n,i;for(n in e)if(e.hasOwnProperty(n))switch(i=e[n],typeof i){case"function":i.prototype&&i.prototype.type&&(i.prototype.typeIndex=t++);break;case"object":t=r(i,t)}return t}var i=e("../tree"),o={visitDeeper:!0},s=!1,a=function(e){this._implementation=e,this._visitFnCache=[],s||(r(i,1),s=!0)};a.prototype={visit:function(e){if(!e)return e;var t=e.typeIndex;if(!t)return e;var r,i=this._visitFnCache,s=this._implementation,a=t<<1,u=1|a,l=i[a],c=i[u],h=o;if(h.visitDeeper=!0,l||(r="visit"+e.type,l=s[r]||n,c=s[r+"Out"]||n,i[a]=l,i[u]=c),l!==n){var f=l.call(s,e,h);s.isReplacing&&(e=f)}return h.visitDeeper&&e&&e.accept&&e.accept(this),c!=n&&c.call(s,e),e},visitArray:function(e,t){if(!e)return e;var n,r=e.length;if(t||!this._implementation.isReplacing){for(n=0;r>n;n++)this.visit(e[n]);return e}var i=[];for(n=0;r>n;n++){var o=this.visit(e[n]);
void 0!==o&&(o.splice?o.length&&this.flatten(o,i):i.push(o))}return i},flatten:function(e,t){t||(t=[]);var n,r,i,o,s,a;for(r=0,n=e.length;n>r;r++)if(i=e[r],void 0!==i)if(i.splice)for(s=0,o=i.length;o>s;s++)a=i[s],void 0!==a&&(a.splice?a.length&&this.flatten(a,t):t.push(a));else t.push(i);return t}},t.exports=a},{"../tree":59}],88:[function(e,t){function n(){if(!s){s=!0;for(var e,t=o.length;t;){e=o,o=[];for(var n=-1;++n<t;)e[n]();t=o.length}s=!1}}function r(){}var i=t.exports={},o=[],s=!1;i.nextTick=function(e){o.push(e),s||setTimeout(n,0)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.on=r,i.addListener=r,i.once=r,i.off=r,i.removeListener=r,i.removeAllListeners=r,i.emit=r,i.binding=function(){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},{}],89:[function(e,t){"use strict";function n(e){function t(e){return null===u?void c.push(e):void o(function(){var t=u?e.onFulfilled:e.onRejected;if(null===t)return void(u?e.resolve:e.reject)(l);var n;try{n=t(l)}catch(r){return void e.reject(r)}e.resolve(n)})}function n(e){try{if(e===h)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var t=e.then;if("function"==typeof t)return void i(t.bind(e),n,s)}u=!0,l=e,a()}catch(r){s(r)}}function s(e){u=!1,l=e,a()}function a(){for(var e=0,n=c.length;n>e;e++)t(c[e]);c=null}if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");var u=null,l=null,c=[],h=this;this.then=function(e,n){return new h.constructor(function(i,o){t(new r(e,n,i,o))})},i(e,n,s)}function r(e,t,n,r){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.resolve=n,this.reject=r}function i(e,t,n){var r=!1;try{e(function(e){r||(r=!0,t(e))},function(e){r||(r=!0,n(e))})}catch(i){if(r)return;r=!0,n(i)}}var o=e("asap");t.exports=n},{asap:91}],90:[function(e,t){"use strict";function n(e){this.then=function(t){return"function"!=typeof t?this:new r(function(n,r){i(function(){try{n(t(e))}catch(i){r(i)}})})}}var r=e("./core.js"),i=e("asap");t.exports=r,n.prototype=r.prototype;var o=new n(!0),s=new n(!1),a=new n(null),u=new n(void 0),l=new n(0),c=new n("");r.resolve=function(e){if(e instanceof r)return e;if(null===e)return a;if(void 0===e)return u;if(e===!0)return o;if(e===!1)return s;if(0===e)return l;if(""===e)return c;if("object"==typeof e||"function"==typeof e)try{var t=e.then;if("function"==typeof t)return new r(t.bind(e))}catch(i){return new r(function(e,t){t(i)})}return new n(e)},r.all=function(e){var t=Array.prototype.slice.call(e);return new r(function(e,n){function r(o,s){try{if(s&&("object"==typeof s||"function"==typeof s)){var a=s.then;if("function"==typeof a)return void a.call(s,function(e){r(o,e)},n)}t[o]=s,0===--i&&e(t)}catch(u){n(u)}}if(0===t.length)return e([]);for(var i=t.length,o=0;t.length>o;o++)r(o,t[o])})},r.reject=function(e){return new r(function(t,n){n(e)})},r.race=function(e){return new r(function(t,n){e.forEach(function(e){r.resolve(e).then(t,n)})})},r.prototype["catch"]=function(e){return this.then(null,e)}},{"./core.js":89,asap:91}],91:[function(e,t){(function(e){function n(){for(;i.next;){i=i.next;var e=i.task;i.task=void 0;var t=i.domain;t&&(i.domain=void 0,t.enter());try{e()}catch(r){if(u)throw t&&t.exit(),setTimeout(n,0),t&&t.enter(),r;setTimeout(function(){throw r},0)}t&&t.exit()}s=!1}function r(t){o=o.next={task:t,domain:u&&e.domain,next:null},s||(s=!0,a())}var i={task:void 0,next:null},o=i,s=!1,a=void 0,u=!1;if("undefined"!=typeof e&&e.nextTick)u=!0,a=function(){e.nextTick(n)};else if("function"==typeof setImmediate)a="undefined"!=typeof window?setImmediate.bind(window,n):function(){setImmediate(n)};else if("undefined"!=typeof MessageChannel){var l=new MessageChannel;l.port1.onmessage=n,a=function(){l.port2.postMessage(0)}}else a=function(){setTimeout(n,0)};t.exports=r}).call(this,e("_process"))},{_process:88}],92:[function(){"function"!=typeof Promise.prototype.done&&(Promise.prototype.done=function(){var e=arguments.length?this.then.apply(this,arguments):this;e.then(null,function(e){setTimeout(function(){throw e},0)})})},{}],"promise/polyfill.js":[function(e){e("asap"),"undefined"==typeof Promise&&(Promise=e("./lib/core.js"),e("./lib/es6-extensions.js")),e("./polyfill-done.js")},{"./lib/core.js":89,"./lib/es6-extensions.js":90,"./polyfill-done.js":92,asap:91}]},{},[2])(2)});
//# sourceMappingURL=data:application/json;base64,