!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.JSXTransformer=e()}}(function(){var define,module,exports;return function e(t,r,n){function a(o,s){if(!r[o]){if(!t[o]){var u="function"==typeof require&&require;if(!s&&u)return u(o,!0);if(i)return i(o,!0);var c=new Error("Cannot find module '"+o+"'");throw c.code="MODULE_NOT_FOUND",c}var p=r[o]={exports:{}};t[o][0].call(p.exports,function(e){var r=t[o][1][e];return a(r?r:e)},p,p.exports,e,t,r,n)}return r[o].exports}for(var i="function"==typeof require&&require,o=0;o<n.length;o++)a(n[o]);return a}({1:[function(_dereq_,module,exports){"use strict";function transformReact(e,t){return t=t||{},t.sourceMap&&(t.sourceMap=supportsAccessors),ReactTools.transformWithDetails(e,t)}function exec(source,options){return eval(transformReact(source,options).code)}function createSourceCodeErrorMessage(e,t){var r=e.split("\n");if(!t.lineNumber||t.lineNumber>r.length)return"";var n=r[t.lineNumber-1],a=0;n=n.replace(/^\s+/,function(e){return a=e.length,""});var i=30,o=t.column-a;o>i&&(n="... "+n.slice(o-i),o=4+i),n.length-o>i&&(n=n.slice(0,o+i)+" ...");var s="\n\n"+n+"\n";return s+=new Array(o-1).join(" ")+"^"}function transformCode(e,t,r){try{var n=transformReact(e,r)}catch(a){throw a.message+="\n    at ",t?("fileName"in a&&(a.fileName=t),a.message+=t+":"+a.lineNumber+":"+a.columnNumber):a.message+=location.href,a.message+=createSourceCodeErrorMessage(e,a),a}if(!n.sourceMap)return n.code;var i;return null==t?(i="Inline JSX script",inlineScriptCount++,inlineScriptCount>1&&(i+=" ("+inlineScriptCount+")")):dummyAnchor&&(dummyAnchor.href=t,i=dummyAnchor.pathname.substr(1)),n.code+"\n"+inlineSourceMap(n.sourceMap,e,i)}function run(e,t,r){var n=document.createElement("script");n.text=transformCode(e,t,r),headEl.appendChild(n)}function load(e,t,r){var n;return n=window.ActiveXObject?new window.ActiveXObject("Microsoft.XMLHTTP"):new XMLHttpRequest,n.open("GET",e,!0),"overrideMimeType"in n&&n.overrideMimeType("text/plain"),n.onreadystatechange=function(){if(4===n.readyState){if(0!==n.status&&200!==n.status)throw r(),new Error("Could not load "+e);t(n.responseText)}},n.send(null)}function loadScripts(e){function t(){var e,t;for(t=0;n>t;t++)if(e=r[t],e.loaded&&!e.executed)e.executed=!0,run(e.content,e.url,e.options);else if(!e.loaded&&!e.error&&!e.async)break}var r=[],n=e.length;e.forEach(function(e,n){var a={sourceMap:!0};/;harmony=true(;|$)/.test(e.type)&&(a.harmony=!0),/;stripTypes=true(;|$)/.test(e.type)&&(a.stripTypes=!0);var i=e.hasAttribute("async");e.src?(r[n]={async:i,error:!1,executed:!1,content:null,loaded:!1,url:e.src,options:a},load(e.src,function(e){r[n].loaded=!0,r[n].content=e,t()},function(){r[n].error=!0,t()})):r[n]={async:i,error:!1,executed:!1,content:e.innerHTML,loaded:!0,url:null,options:a}}),t()}function runScripts(){for(var e=document.getElementsByTagName("script"),t=[],r=0;r<e.length;r++)/^text\/jsx(;|$)/.test(e.item(r).type)&&t.push(e.item(r));t.length<1||(console.warn("You are using the in-browser JSX transformer. Be sure to precompile your JSX for production - http://facebook.github.io/react/docs/tooling-integration.html#jsx"),loadScripts(t))}var ReactTools=_dereq_("../main"),inlineSourceMap=_dereq_("./inline-source-map"),headEl,dummyAnchor,inlineScriptCount=0,supportsAccessors=Object.prototype.hasOwnProperty("__defineGetter__");"undefined"!=typeof window&&null!==window&&(headEl=document.getElementsByTagName("head")[0],dummyAnchor=document.createElement("a"),window.addEventListener?window.addEventListener("DOMContentLoaded",runScripts,!1):window.attachEvent("onload",runScripts)),module.exports={transform:transformReact,exec:exec}},{"../main":2,"./inline-source-map":41}],2:[function(e,t){"use strict";function r(e){e=e||{};var t={};return t.harmony=e.harmony,t.stripTypes=e.stripTypes,t.sourceMap=e.sourceMap,t.filename=e.sourceFilename,e.es6module&&(t.sourceType="module"),e.nonStrictEs6module&&(t.sourceType="nonStrictModule"),t.es3="es3"===e.target,t.es5=!t.es3,t}function n(e,t){var r=["react"];t.harmony&&r.push("harmony"),t.es3&&r.push("es3"),t.stripTypes&&(e=i(o.visitorList,e,t).code);var n=a.getVisitorsBySet(r);return i(n,e,t)}var a=e("./vendor/fbtransform/visitors"),i=e("jstransform").transform,o=e("jstransform/visitors/type-syntax"),s=e("./vendor/inline-source-map");t.exports={transform:function(e,t){t=r(t);var a=n(e,t),i=a.code;if(t.sourceMap){var o=s(a.sourceMap,e,t.filename);i+="\n"+o}return i},transformWithDetails:function(e,t){t=r(t);var a=n(e,t),i={};return i.code=a.code,t.sourceMap&&(i.sourceMap=a.sourceMap.toJSON()),t.filename&&(i.sourceMap.sources=[t.filename]),i}}},{"./vendor/fbtransform/visitors":40,"./vendor/inline-source-map":41,jstransform:22,"jstransform/visitors/type-syntax":36}],3:[function(e,t,r){function n(e,t,r){if(!(this instanceof n))return new n(e,t,r);var a,i=typeof e;if("number"===i)a=+e;else if("string"===i)a=n.byteLength(e,t);else{if("object"!==i||null===e)throw new TypeError("must start with number, buffer, array or string");"Buffer"===e.type&&D(e.data)&&(e=e.data),a=+e.length}if(a>j)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+j.toString(16)+" bytes");0>a?a=0:a>>>=0;var o=this;n.TYPED_ARRAY_SUPPORT?o=n._augment(new Uint8Array(a)):(o.length=a,o._isBuffer=!0);var s;if(n.TYPED_ARRAY_SUPPORT&&"number"==typeof e.byteLength)o._set(e);else if(I(e))if(n.isBuffer(e))for(s=0;a>s;s++)o[s]=e.readUInt8(s);else for(s=0;a>s;s++)o[s]=(e[s]%256+256)%256;else if("string"===i)o.write(e,0,t);else if("number"===i&&!n.TYPED_ARRAY_SUPPORT&&!r)for(s=0;a>s;s++)o[s]=0;return a>0&&a<=n.poolSize&&(o.parent=B),o}function a(e,t,r){if(!(this instanceof a))return new a(e,t,r);var i=new n(e,t,r);return delete i.parent,i}function i(e,t,r,n){r=Number(r)||0;var a=e.length-r;n?(n=Number(n),n>a&&(n=a)):n=a;var i=t.length;if(i%2!==0)throw new Error("Invalid hex string");n>i/2&&(n=i/2);for(var o=0;n>o;o++){var s=parseInt(t.substr(2*o,2),16);if(isNaN(s))throw new Error("Invalid hex string");e[r+o]=s}return o}function o(e,t,r,n){var a=N(L(t,e.length-r),e,r,n);return a}function s(e,t,r,n){var a=N(P(t),e,r,n);return a}function u(e,t,r,n){return s(e,t,r,n)}function c(e,t,r,n){var a=N(O(t),e,r,n);return a}function p(e,t,r,n){var a=N(k(t,e.length-r),e,r,n);return a}function l(e,t,r){return M.fromByteArray(0===t&&r===e.length?e:e.slice(t,r))}function f(e,t,r){var n="",a="";r=Math.min(e.length,r);for(var i=t;r>i;i++)e[i]<=127?(n+=_(a)+String.fromCharCode(e[i]),a=""):a+="%"+e[i].toString(16);return n+_(a)}function d(e,t,r){var n="";r=Math.min(e.length,r);for(var a=t;r>a;a++)n+=String.fromCharCode(127&e[a]);return n}function m(e,t,r){var n="";r=Math.min(e.length,r);for(var a=t;r>a;a++)n+=String.fromCharCode(e[a]);return n}function h(e,t,r){var n=e.length;(!t||0>t)&&(t=0),(!r||0>r||r>n)&&(r=n);for(var a="",i=t;r>i;i++)a+=T(e[i]);return a}function y(e,t,r){for(var n=e.slice(t,r),a="",i=0;i<n.length;i+=2)a+=String.fromCharCode(n[i]+256*n[i+1]);return a}function g(e,t,r){if(e%1!==0||0>e)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function v(e,t,r,a,i,o){if(!n.isBuffer(e))throw new TypeError("buffer must be a Buffer instance");if(t>i||o>t)throw new RangeError("value is out of bounds");if(r+a>e.length)throw new RangeError("index out of range")}function S(e,t,r,n){0>t&&(t=65535+t+1);for(var a=0,i=Math.min(e.length-r,2);i>a;a++)e[r+a]=(t&255<<8*(n?a:1-a))>>>8*(n?a:1-a)}function b(e,t,r,n){0>t&&(t=4294967295+t+1);for(var a=0,i=Math.min(e.length-r,4);i>a;a++)e[r+a]=t>>>8*(n?a:3-a)&255}function E(e,t,r,n,a,i){if(t>a||i>t)throw new RangeError("value is out of bounds");if(r+n>e.length)throw new RangeError("index out of range");if(0>r)throw new RangeError("index out of range")}function w(e,t,r,n,a){return a||E(e,t,r,4,3.4028234663852886e38,-3.4028234663852886e38),R.write(e,t,r,n,23,4),r+4}function x(e,t,r,n,a){return a||E(e,t,r,8,1.7976931348623157e308,-1.7976931348623157e308),R.write(e,t,r,n,52,8),r+8}function A(e){if(e=C(e).replace(F,""),e.length<2)return"";for(;e.length%4!==0;)e+="=";return e}function C(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function I(e){return D(e)||n.isBuffer(e)||e&&"object"==typeof e&&"number"==typeof e.length}function T(e){return 16>e?"0"+e.toString(16):e.toString(16)}function L(e,t){t=t||1/0;for(var r,n=e.length,a=null,i=[],o=0;n>o;o++){if(r=e.charCodeAt(o),r>55295&&57344>r){if(!a){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&i.push(239,191,189);continue}a=r;continue}if(56320>r){(t-=3)>-1&&i.push(239,191,189),a=r;continue}r=a-55296<<10|r-56320|65536,a=null}else a&&((t-=3)>-1&&i.push(239,191,189),a=null);if(128>r){if((t-=1)<0)break;i.push(r)}else if(2048>r){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(65536>r){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(2097152>r))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function P(e){for(var t=[],r=0;r<e.length;r++)t.push(255&e.charCodeAt(r));return t}function k(e,t){for(var r,n,a,i=[],o=0;o<e.length&&!((t-=2)<0);o++)r=e.charCodeAt(o),n=r>>8,a=r%256,i.push(a),i.push(n);return i}function O(e){return M.toByteArray(A(e))}function N(e,t,r,n){for(var a=0;n>a&&!(a+r>=t.length||a>=e.length);a++)t[a+r]=e[a];return a}function _(e){try{return decodeURIComponent(e)}catch(t){return String.fromCharCode(65533)}}var M=e("base64-js"),R=e("ieee754"),D=e("is-array");r.Buffer=n,r.SlowBuffer=a,r.INSPECT_MAX_BYTES=50,n.poolSize=8192;var j=1073741823,B={};n.TYPED_ARRAY_SUPPORT=function(){try{var e=new ArrayBuffer(0),t=new Uint8Array(e);return t.foo=function(){return 42},42===t.foo()&&"function"==typeof t.subarray&&0===new Uint8Array(1).subarray(1,1).byteLength}catch(r){return!1}}(),n.isBuffer=function(e){return!(null==e||!e._isBuffer)},n.compare=function(e,t){if(!n.isBuffer(e)||!n.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,a=t.length,i=0,o=Math.min(r,a);o>i&&e[i]===t[i];i++);return i!==o&&(r=e[i],a=t[i]),a>r?-1:r>a?1:0},n.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},n.concat=function(e,t){if(!D(e))throw new TypeError("Usage: Buffer.concat(list[, length])");if(0===e.length)return new n(0);if(1===e.length)return e[0];var r;if(void 0===t)for(t=0,r=0;r<e.length;r++)t+=e[r].length;var a=new n(t),i=0;for(r=0;r<e.length;r++){var o=e[r];o.copy(a,i),i+=o.length}return a},n.byteLength=function(e,t){var r;switch(e+="",t||"utf8"){case"ascii":case"binary":case"raw":r=e.length;break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":r=2*e.length;break;case"hex":r=e.length>>>1;break;case"utf8":case"utf-8":r=L(e).length;break;case"base64":r=O(e).length;break;default:r=e.length}return r},n.prototype.length=void 0,n.prototype.parent=void 0,n.prototype.toString=function(e,t,r){var n=!1;if(t>>>=0,r=void 0===r||1/0===r?this.length:r>>>0,e||(e="utf8"),0>t&&(t=0),r>this.length&&(r=this.length),t>=r)return"";for(;;)switch(e){case"hex":return h(this,t,r);case"utf8":case"utf-8":return f(this,t,r);case"ascii":return d(this,t,r);case"binary":return m(this,t,r);case"base64":return l(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return y(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}},n.prototype.equals=function(e){if(!n.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e?!0:0===n.compare(this,e)},n.prototype.inspect=function(){var e="",t=r.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},n.prototype.compare=function(e){if(!n.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e?0:n.compare(this,e)},n.prototype.indexOf=function(e,t){function r(e,t,r){for(var n=-1,a=0;r+a<e.length;a++)if(e[r+a]===t[-1===n?0:a-n]){if(-1===n&&(n=a),a-n+1===t.length)return r+n}else n=-1;return-1}if(t>2147483647?t=2147483647:-2147483648>t&&(t=-2147483648),t>>=0,0===this.length)return-1;if(t>=this.length)return-1;if(0>t&&(t=Math.max(this.length+t,0)),"string"==typeof e)return 0===e.length?-1:String.prototype.indexOf.call(this,e,t);if(n.isBuffer(e))return r(this,e,t);if("number"==typeof e)return n.TYPED_ARRAY_SUPPORT&&"function"===Uint8Array.prototype.indexOf?Uint8Array.prototype.indexOf.call(this,e,t):r(this,[e],t);throw new TypeError("val must be string, number or Buffer")},n.prototype.get=function(e){return console.log(".get() is deprecated. Access using array indexes instead."),this.readUInt8(e)},n.prototype.set=function(e,t){return console.log(".set() is deprecated. Access using array indexes instead."),this.writeUInt8(e,t)},n.prototype.write=function(e,t,r,n){if(isFinite(t))isFinite(r)||(n=r,r=void 0);else{var a=n;n=t,t=r,r=a}if(t=Number(t)||0,0>r||0>t||t>this.length)throw new RangeError("attempt to write outside buffer bounds");var l=this.length-t;r?(r=Number(r),r>l&&(r=l)):r=l,n=String(n||"utf8").toLowerCase();var f;switch(n){case"hex":f=i(this,e,t,r);break;case"utf8":case"utf-8":f=o(this,e,t,r);break;case"ascii":f=s(this,e,t,r);break;case"binary":f=u(this,e,t,r);break;case"base64":f=c(this,e,t,r);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":f=p(this,e,t,r);break;default:throw new TypeError("Unknown encoding: "+n)}return f},n.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},n.prototype.slice=function(e,t){var r=this.length;e=~~e,t=void 0===t?r:~~t,0>e?(e+=r,0>e&&(e=0)):e>r&&(e=r),0>t?(t+=r,0>t&&(t=0)):t>r&&(t=r),e>t&&(t=e);var a;if(n.TYPED_ARRAY_SUPPORT)a=n._augment(this.subarray(e,t));else{var i=t-e;a=new n(i,void 0,!0);for(var o=0;i>o;o++)a[o]=this[o+e]}return a.length&&(a.parent=this.parent||this),a},n.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||g(e,t,this.length);for(var n=this[e],a=1,i=0;++i<t&&(a*=256);)n+=this[e+i]*a;return n},n.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||g(e,t,this.length);for(var n=this[e+--t],a=1;t>0&&(a*=256);)n+=this[e+--t]*a;return n},n.prototype.readUInt8=function(e,t){return t||g(e,1,this.length),this[e]},n.prototype.readUInt16LE=function(e,t){return t||g(e,2,this.length),this[e]|this[e+1]<<8},n.prototype.readUInt16BE=function(e,t){return t||g(e,2,this.length),this[e]<<8|this[e+1]},n.prototype.readUInt32LE=function(e,t){return t||g(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},n.prototype.readUInt32BE=function(e,t){return t||g(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},n.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||g(e,t,this.length);for(var n=this[e],a=1,i=0;++i<t&&(a*=256);)n+=this[e+i]*a;return a*=128,n>=a&&(n-=Math.pow(2,8*t)),n},n.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||g(e,t,this.length);for(var n=t,a=1,i=this[e+--n];n>0&&(a*=256);)i+=this[e+--n]*a;return a*=128,i>=a&&(i-=Math.pow(2,8*t)),i},n.prototype.readInt8=function(e,t){return t||g(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},n.prototype.readInt16LE=function(e,t){t||g(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},n.prototype.readInt16BE=function(e,t){t||g(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},n.prototype.readInt32LE=function(e,t){return t||g(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},n.prototype.readInt32BE=function(e,t){return t||g(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},n.prototype.readFloatLE=function(e,t){return t||g(e,4,this.length),R.read(this,e,!0,23,4)},n.prototype.readFloatBE=function(e,t){return t||g(e,4,this.length),R.read(this,e,!1,23,4)},n.prototype.readDoubleLE=function(e,t){return t||g(e,8,this.length),R.read(this,e,!0,52,8)},n.prototype.readDoubleBE=function(e,t){return t||g(e,8,this.length),R.read(this,e,!1,52,8)},n.prototype.writeUIntLE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||v(this,e,t,r,Math.pow(2,8*r),0);var a=1,i=0;for(this[t]=255&e;++i<r&&(a*=256);)this[t+i]=e/a>>>0&255;return t+r},n.prototype.writeUIntBE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||v(this,e,t,r,Math.pow(2,8*r),0);var a=r-1,i=1;for(this[t+a]=255&e;--a>=0&&(i*=256);)this[t+a]=e/i>>>0&255;return t+r},n.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||v(this,e,t,1,255,0),n.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=e,t+1},n.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||v(this,e,t,2,65535,0),n.TYPED_ARRAY_SUPPORT?(this[t]=e,this[t+1]=e>>>8):S(this,e,t,!0),t+2},n.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||v(this,e,t,2,65535,0),n.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=e):S(this,e,t,!1),t+2},n.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||v(this,e,t,4,4294967295,0),n.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=e):b(this,e,t,!0),t+4},n.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||v(this,e,t,4,4294967295,0),n.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=e):b(this,e,t,!1),t+4},n.prototype.writeIntLE=function(e,t,r,n){e=+e,t>>>=0,n||v(this,e,t,r,Math.pow(2,8*r-1)-1,-Math.pow(2,8*r-1));var a=0,i=1,o=0>e?1:0;for(this[t]=255&e;++a<r&&(i*=256);)this[t+a]=(e/i>>0)-o&255;return t+r},n.prototype.writeIntBE=function(e,t,r,n){e=+e,t>>>=0,n||v(this,e,t,r,Math.pow(2,8*r-1)-1,-Math.pow(2,8*r-1));var a=r-1,i=1,o=0>e?1:0;for(this[t+a]=255&e;--a>=0&&(i*=256);)this[t+a]=(e/i>>0)-o&255;return t+r},n.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||v(this,e,t,1,127,-128),n.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),0>e&&(e=255+e+1),this[t]=e,t+1},n.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||v(this,e,t,2,32767,-32768),n.TYPED_ARRAY_SUPPORT?(this[t]=e,this[t+1]=e>>>8):S(this,e,t,!0),t+2},n.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||v(this,e,t,2,32767,-32768),n.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=e):S(this,e,t,!1),t+2},n.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||v(this,e,t,4,2147483647,-2147483648),n.TYPED_ARRAY_SUPPORT?(this[t]=e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):b(this,e,t,!0),t+4},n.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||v(this,e,t,4,2147483647,-2147483648),0>e&&(e=4294967295+e+1),n.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=e):b(this,e,t,!1),t+4},n.prototype.writeFloatLE=function(e,t,r){return w(this,e,t,!0,r)},n.prototype.writeFloatBE=function(e,t,r){return w(this,e,t,!1,r)},n.prototype.writeDoubleLE=function(e,t,r){return x(this,e,t,!0,r)},n.prototype.writeDoubleBE=function(e,t,r){return x(this,e,t,!1,r)},n.prototype.copy=function(e,t,r,a){var i=this;if(r||(r=0),a||0===a||(a=this.length),t>=e.length&&(t=e.length),t||(t=0),a>0&&r>a&&(a=r),a===r)return 0;if(0===e.length||0===i.length)return 0;if(0>t)throw new RangeError("targetStart out of bounds");if(0>r||r>=i.length)throw new RangeError("sourceStart out of bounds");if(0>a)throw new RangeError("sourceEnd out of bounds");a>this.length&&(a=this.length),e.length-t<a-r&&(a=e.length-t+r);var o=a-r;if(1e3>o||!n.TYPED_ARRAY_SUPPORT)for(var s=0;o>s;s++)e[s+t]=this[s+r];else e._set(this.subarray(r,r+o),t);return o},n.prototype.fill=function(e,t,r){if(e||(e=0),t||(t=0),r||(r=this.length),t>r)throw new RangeError("end < start");if(r!==t&&0!==this.length){if(0>t||t>=this.length)throw new RangeError("start out of bounds");if(0>r||r>this.length)throw new RangeError("end out of bounds");var n;if("number"==typeof e)for(n=t;r>n;n++)this[n]=e;else{var a=L(e.toString()),i=a.length;for(n=t;r>n;n++)this[n]=a[n%i]}return this}},n.prototype.toArrayBuffer=function(){if("undefined"!=typeof Uint8Array){if(n.TYPED_ARRAY_SUPPORT)return new n(this).buffer;for(var e=new Uint8Array(this.length),t=0,r=e.length;r>t;t+=1)e[t]=this[t];return e.buffer}throw new TypeError("Buffer.toArrayBuffer not supported in this browser")};var U=n.prototype;n._augment=function(e){return e.constructor=n,e._isBuffer=!0,e._get=e.get,e._set=e.set,e.get=U.get,e.set=U.set,e.write=U.write,e.toString=U.toString,e.toLocaleString=U.toString,e.toJSON=U.toJSON,e.equals=U.equals,e.compare=U.compare,e.indexOf=U.indexOf,e.copy=U.copy,e.slice=U.slice,e.readUIntLE=U.readUIntLE,e.readUIntBE=U.readUIntBE,e.readUInt8=U.readUInt8,e.readUInt16LE=U.readUInt16LE,e.readUInt16BE=U.readUInt16BE,e.readUInt32LE=U.readUInt32LE,e.readUInt32BE=U.readUInt32BE,e.readIntLE=U.readIntLE,e.readIntBE=U.readIntBE,e.readInt8=U.readInt8,e.readInt16LE=U.readInt16LE,e.readInt16BE=U.readInt16BE,e.readInt32LE=U.readInt32LE,e.readInt32BE=U.readInt32BE,e.readFloatLE=U.readFloatLE,e.readFloatBE=U.readFloatBE,e.readDoubleLE=U.readDoubleLE,e.readDoubleBE=U.readDoubleBE,e.writeUInt8=U.writeUInt8,e.writeUIntLE=U.writeUIntLE,e.writeUIntBE=U.writeUIntBE,e.writeUInt16LE=U.writeUInt16LE,e.writeUInt16BE=U.writeUInt16BE,e.writeUInt32LE=U.writeUInt32LE,e.writeUInt32BE=U.writeUInt32BE,e.writeIntLE=U.writeIntLE,e.writeIntBE=U.writeIntBE,e.writeInt8=U.writeInt8,e.writeInt16LE=U.writeInt16LE,e.writeInt16BE=U.writeInt16BE,e.writeInt32LE=U.writeInt32LE,e.writeInt32BE=U.writeInt32BE,e.writeFloatLE=U.writeFloatLE,e.writeFloatBE=U.writeFloatBE,e.writeDoubleLE=U.writeDoubleLE,e.writeDoubleBE=U.writeDoubleBE,e.fill=U.fill,e.inspect=U.inspect,e.toArrayBuffer=U.toArrayBuffer,e};var F=/[^+\/0-9A-z\-]/g},{"base64-js":4,ieee754:5,"is-array":6}],4:[function(e,t,r){var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";!function(e){"use strict";function t(e){var t=e.charCodeAt(0);return t===o||t===l?62:t===s||t===f?63:u>t?-1:u+10>t?t-u+26+26:p+26>t?t-p:c+26>t?t-c+26:void 0}function r(e){function r(e){c[l++]=e}var n,a,o,s,u,c;if(e.length%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var p=e.length;u="="===e.charAt(p-2)?2:"="===e.charAt(p-1)?1:0,c=new i(3*e.length/4-u),o=u>0?e.length-4:e.length;var l=0;for(n=0,a=0;o>n;n+=4,a+=3)s=t(e.charAt(n))<<18|t(e.charAt(n+1))<<12|t(e.charAt(n+2))<<6|t(e.charAt(n+3)),r((16711680&s)>>16),r((65280&s)>>8),r(255&s);return 2===u?(s=t(e.charAt(n))<<2|t(e.charAt(n+1))>>4,r(255&s)):1===u&&(s=t(e.charAt(n))<<10|t(e.charAt(n+1))<<4|t(e.charAt(n+2))>>2,r(s>>8&255),r(255&s)),c}function a(e){function t(e){return n.charAt(e)}function r(e){return t(e>>18&63)+t(e>>12&63)+t(e>>6&63)+t(63&e)}var a,i,o,s=e.length%3,u="";for(a=0,o=e.length-s;o>a;a+=3)i=(e[a]<<16)+(e[a+1]<<8)+e[a+2],u+=r(i);switch(s){case 1:i=e[e.length-1],u+=t(i>>2),u+=t(i<<4&63),u+="==";break;case 2:i=(e[e.length-2]<<8)+e[e.length-1],u+=t(i>>10),u+=t(i>>4&63),u+=t(i<<2&63),u+="="}return u}var i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="+".charCodeAt(0),s="/".charCodeAt(0),u="0".charCodeAt(0),c="a".charCodeAt(0),p="A".charCodeAt(0),l="-".charCodeAt(0),f="_".charCodeAt(0);e.toByteArray=r,e.fromByteArray=a}("undefined"==typeof r?this.base64js={}:r)},{}],5:[function(e,t,r){r.read=function(e,t,r,n,a){var i,o,s=8*a-n-1,u=(1<<s)-1,c=u>>1,p=-7,l=r?a-1:0,f=r?-1:1,d=e[t+l];for(l+=f,i=d&(1<<-p)-1,d>>=-p,p+=s;p>0;i=256*i+e[t+l],l+=f,p-=8);for(o=i&(1<<-p)-1,i>>=-p,p+=n;p>0;o=256*o+e[t+l],l+=f,p-=8);if(0===i)i=1-c;else{if(i===u)return o?0/0:1/0*(d?-1:1);o+=Math.pow(2,n),i-=c}return(d?-1:1)*o*Math.pow(2,i-n)},r.write=function(e,t,r,n,a,i){var o,s,u,c=8*i-a-1,p=(1<<c)-1,l=p>>1,f=23===a?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:i-1,m=n?1:-1,h=0>t||0===t&&0>1/t?1:0;for(t=Math.abs(t),isNaN(t)||1/0===t?(s=isNaN(t)?1:0,o=p):(o=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-o))<1&&(o--,u*=2),t+=o+l>=1?f/u:f*Math.pow(2,1-l),t*u>=2&&(o++,u/=2),o+l>=p?(s=0,o=p):o+l>=1?(s=(t*u-1)*Math.pow(2,a),o+=l):(s=t*Math.pow(2,l-1)*Math.pow(2,a),o=0));a>=8;e[r+d]=255&s,d+=m,s/=256,a-=8);for(o=o<<a|s,c+=a;c>0;e[r+d]=255&o,d+=m,o/=256,c-=8);e[r+d-m]|=128*h}},{}],6:[function(e,t){var r=Array.isArray,n=Object.prototype.toString;t.exports=r||function(e){return!!e&&"[object Array]"==n.call(e)}},{}],7:[function(e,t,r){(function(e){function t(e,t){for(var r=0,n=e.length-1;n>=0;n--){var a=e[n];"."===a?e.splice(n,1):".."===a?(e.splice(n,1),r++):r&&(e.splice(n,1),r--)}if(t)for(;r--;r)e.unshift("..");return e}function n(e,t){if(e.filter)return e.filter(t);for(var r=[],n=0;n<e.length;n++)t(e[n],n,e)&&r.push(e[n]);return r}var a=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,i=function(e){return a.exec(e).slice(1)};r.resolve=function(){for(var r="",a=!1,i=arguments.length-1;i>=-1&&!a;i--){var o=i>=0?arguments[i]:e.cwd();if("string"!=typeof o)throw new TypeError("Arguments to path.resolve must be strings");o&&(r=o+"/"+r,a="/"===o.charAt(0))}return r=t(n(r.split("/"),function(e){return!!e}),!a).join("/"),(a?"/":"")+r||"."},r.normalize=function(e){var a=r.isAbsolute(e),i="/"===o(e,-1);return e=t(n(e.split("/"),function(e){return!!e}),!a).join("/"),e||a||(e="."),e&&i&&(e+="/"),(a?"/":"")+e},r.isAbsolute=function(e){return"/"===e.charAt(0)},r.join=function(){var e=Array.prototype.slice.call(arguments,0);return r.normalize(n(e,function(e){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},r.relative=function(e,t){function n(e){for(var t=0;t<e.length&&""===e[t];t++);for(var r=e.length-1;r>=0&&""===e[r];r--);return t>r?[]:e.slice(t,r-t+1)}e=r.resolve(e).substr(1),t=r.resolve(t).substr(1);for(var a=n(e.split("/")),i=n(t.split("/")),o=Math.min(a.length,i.length),s=o,u=0;o>u;u++)if(a[u]!==i[u]){s=u;break}for(var c=[],u=s;u<a.length;u++)c.push("..");return c=c.concat(i.slice(s)),c.join("/")},r.sep="/",r.delimiter=":",r.dirname=function(e){var t=i(e),r=t[0],n=t[1];return r||n?(n&&(n=n.substr(0,n.length-1)),r+n):"."},r.basename=function(e,t){var r=i(e)[2];return t&&r.substr(-1*t.length)===t&&(r=r.substr(0,r.length-t.length)),r},r.extname=function(e){return i(e)[3]};var o="b"==="ab".substr(-1)?function(e,t,r){return e.substr(t,r)}:function(e,t,r){return 0>t&&(t=e.length+t),e.substr(t,r)}}).call(this,e("_process"))},{_process:8}],8:[function(e,t){function r(){if(!o){o=!0;for(var e,t=i.length;t;){e=i,i=[];for(var r=-1;++r<t;)e[r]();t=i.length}o=!1}}function n(){}var a=t.exports={},i=[],o=!1;a.nextTick=function(e){i.push(e),o||setTimeout(r,0)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=n,a.addListener=n,a.once=n,a.off=n,a.removeListener=n,a.removeAllListeners=n,a.emit=n,a.binding=function(){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},{}],9:[function(e,t,r){!function(e,t){"use strict";"function"==typeof define&&define.amd?define(["exports"],t):t("undefined"!=typeof r?r:e.esprima={})}(this,function(e){"use strict";function t(e,t){if(!e)throw new Error("ASSERT: "+t)}function r(){this.$data={}}function n(e){return e>=48&&57>=e}function a(e){return"0123456789abcdefABCDEF".indexOf(e)>=0}function i(e){return"01234567".indexOf(e)>=0}function o(e){return 32===e||9===e||11===e||12===e||160===e||e>=5760&&" ᠎             　﻿".indexOf(String.fromCharCode(e))>0}function s(e){return 10===e||13===e||8232===e||8233===e}function u(e){return 36===e||95===e||e>=65&&90>=e||e>=97&&122>=e||92===e||e>=128&&ea.NonAsciiIdentifierStart.test(String.fromCharCode(e))}function c(e){return 36===e||95===e||e>=65&&90>=e||e>=97&&122>=e||e>=48&&57>=e||92===e||e>=128&&ea.NonAsciiIdentifierPart.test(String.fromCharCode(e))}function p(e){switch(e){case"class":case"enum":case"export":case"extends":case"import":case"super":return!0;default:return!1}}function l(e){switch(e){case"implements":case"interface":case"package":case"private":case"protected":case"public":case"static":case"yield":case"let":return!0;default:return!1}}function f(e){return"eval"===e||"arguments"===e}function d(e){if(ia&&l(e))return!0;switch(e.length){case 2:return"if"===e||"in"===e||"do"===e;case 3:return"var"===e||"for"===e||"new"===e||"try"===e||"let"===e;case 4:return"this"===e||"else"===e||"case"===e||"void"===e||"with"===e||"enum"===e;case 5:return"while"===e||"break"===e||"catch"===e||"throw"===e||"const"===e||"class"===e||"super"===e;case 6:return"return"===e||"typeof"===e||"delete"===e||"switch"===e||"export"===e||"import"===e;case 7:return"default"===e||"finally"===e||"extends"===e;case 8:return"function"===e||"continue"===e||"debugger"===e;case 10:return"instanceof"===e;default:return!1}}function m(e,r,n,a,i){var o;t("number"==typeof n,"Comment must have valid position"),fa.lastCommentStart>=n||(fa.lastCommentStart=n,o={type:e,value:r},da.range&&(o.range=[n,a]),da.loc&&(o.loc=i),da.comments.push(o),da.attachComment&&(da.leadingComments.push(o),da.trailingComments.push(o)))}function h(){var e,t,r,n;for(e=oa-2,t={start:{line:sa,column:oa-ua-2}};ca>oa;)if(r=aa.charCodeAt(oa),++oa,s(r))return da.comments&&(n=aa.slice(e+2,oa-1),t.end={line:sa,column:oa-ua-1},m("Line",n,e,oa-1,t)),13===r&&10===aa.charCodeAt(oa)&&++oa,++sa,void(ua=oa);da.comments&&(n=aa.slice(e+2,oa),t.end={line:sa,column:oa-ua},m("Line",n,e,oa,t))}function y(){var e,t,r,n;for(da.comments&&(e=oa-2,t={start:{line:sa,column:oa-ua-2}});ca>oa;)if(r=aa.charCodeAt(oa),s(r))13===r&&10===aa.charCodeAt(oa+1)&&++oa,++sa,++oa,ua=oa,oa>=ca&&Y({},Zn.UnexpectedToken,"ILLEGAL");else if(42===r){if(47===aa.charCodeAt(oa+1))return++oa,++oa,void(da.comments&&(n=aa.slice(e+2,oa-2),t.end={line:sa,column:oa-ua},m("Block",n,e,oa,t)));++oa}else++oa;Y({},Zn.UnexpectedToken,"ILLEGAL")}function g(){for(var e;ca>oa;)if(e=aa.charCodeAt(oa),o(e))++oa;else if(s(e))++oa,13===e&&10===aa.charCodeAt(oa)&&++oa,++sa,ua=oa;else{if(47!==e)break;if(e=aa.charCodeAt(oa+1),47===e)++oa,++oa,h();else{if(42!==e)break;++oa,++oa,y()}}}function v(e){var t,r,n,i=0;for(r="u"===e?4:2,t=0;r>t;++t){if(!(ca>oa&&a(aa[oa])))return"";n=aa[oa++],i=16*i+"0123456789abcdef".indexOf(n.toLowerCase())}return String.fromCharCode(i)}function S(){var e,t,r,n;for(e=aa[oa],t=0,"}"===e&&Y({},Zn.UnexpectedToken,"ILLEGAL");ca>oa&&(e=aa[oa++],a(e));)t=16*t+"0123456789abcdef".indexOf(e.toLowerCase());return(t>1114111||"}"!==e)&&Y({},Zn.UnexpectedToken,"ILLEGAL"),65535>=t?String.fromCharCode(t):(r=(t-65536>>10)+55296,n=(t-65536&1023)+56320,String.fromCharCode(r,n))}function b(){var e,t;for(e=aa.charCodeAt(oa++),t=String.fromCharCode(e),92===e&&(117!==aa.charCodeAt(oa)&&Y({},Zn.UnexpectedToken,"ILLEGAL"),++oa,e=v("u"),e&&"\\"!==e&&u(e.charCodeAt(0))||Y({},Zn.UnexpectedToken,"ILLEGAL"),t=e);ca>oa&&(e=aa.charCodeAt(oa),c(e));)++oa,t+=String.fromCharCode(e),92===e&&(t=t.substr(0,t.length-1),117!==aa.charCodeAt(oa)&&Y({},Zn.UnexpectedToken,"ILLEGAL"),++oa,e=v("u"),e&&"\\"!==e&&c(e.charCodeAt(0))||Y({},Zn.UnexpectedToken,"ILLEGAL"),t+=e);return t}function E(){var e,t;for(e=oa++;ca>oa;){if(t=aa.charCodeAt(oa),92===t)return oa=e,b();if(!c(t))break;++oa}return aa.slice(e,oa)}function w(){var e,t,r;return e=oa,t=92===aa.charCodeAt(oa)?b():E(),r=1===t.length?zn.Identifier:d(t)?zn.Keyword:"null"===t?zn.NullLiteral:"true"===t||"false"===t?zn.BooleanLiteral:zn.Identifier,{type:r,value:t,lineNumber:sa,lineStart:ua,range:[e,oa]}}function x(){var e,t,r,n,a=oa,i=aa.charCodeAt(oa),o=aa[oa];if(fa.inJSXTag||fa.inJSXChild)switch(i){case 60:case 62:return++oa,{type:zn.Punctuator,value:String.fromCharCode(i),lineNumber:sa,lineStart:ua,range:[a,oa]}}switch(i){case 40:case 41:case 59:case 44:case 123:case 125:case 91:case 93:case 58:case 63:case 126:return++oa,da.tokenize&&(40===i?da.openParenToken=da.tokens.length:123===i&&(da.openCurlyToken=da.tokens.length)),{type:zn.Punctuator,value:String.fromCharCode(i),lineNumber:sa,lineStart:ua,range:[a,oa]};default:if(e=aa.charCodeAt(oa+1),61===e)switch(i){case 37:case 38:case 42:case 43:case 45:case 47:case 60:case 62:case 94:case 124:return oa+=2,{type:zn.Punctuator,value:String.fromCharCode(i)+String.fromCharCode(e),lineNumber:sa,lineStart:ua,range:[a,oa]};
case 33:case 61:return oa+=2,61===aa.charCodeAt(oa)&&++oa,{type:zn.Punctuator,value:aa.slice(a,oa),lineNumber:sa,lineStart:ua,range:[a,oa]}}}return t=aa[oa+1],r=aa[oa+2],n=aa[oa+3],">"===o&&">"===t&&">"===r&&"="===n?(oa+=4,{type:zn.Punctuator,value:">>>=",lineNumber:sa,lineStart:ua,range:[a,oa]}):">"!==o||">"!==t||">"!==r||fa.inType?"<"===o&&"<"===t&&"="===r?(oa+=3,{type:zn.Punctuator,value:"<<=",lineNumber:sa,lineStart:ua,range:[a,oa]}):">"===o&&">"===t&&"="===r?(oa+=3,{type:zn.Punctuator,value:">>=",lineNumber:sa,lineStart:ua,range:[a,oa]}):"."===o&&"."===t&&"."===r?(oa+=3,{type:zn.Punctuator,value:"...",lineNumber:sa,lineStart:ua,range:[a,oa]}):o===t&&"+-<>&|".indexOf(o)>=0&&!fa.inType?(oa+=2,{type:zn.Punctuator,value:o+t,lineNumber:sa,lineStart:ua,range:[a,oa]}):"="===o&&">"===t?(oa+=2,{type:zn.Punctuator,value:"=>",lineNumber:sa,lineStart:ua,range:[a,oa]}):"<>=!+-*%&|^/".indexOf(o)>=0?(++oa,{type:zn.Punctuator,value:o,lineNumber:sa,lineStart:ua,range:[a,oa]}):"."===o?(++oa,{type:zn.Punctuator,value:o,lineNumber:sa,lineStart:ua,range:[a,oa]}):void Y({},Zn.UnexpectedToken,"ILLEGAL"):(oa+=3,{type:zn.Punctuator,value:">>>",lineNumber:sa,lineStart:ua,range:[a,oa]})}function A(e){for(var t="";ca>oa&&a(aa[oa]);)t+=aa[oa++];return 0===t.length&&Y({},Zn.UnexpectedToken,"ILLEGAL"),u(aa.charCodeAt(oa))&&Y({},Zn.UnexpectedToken,"ILLEGAL"),{type:zn.NumericLiteral,value:parseInt("0x"+t,16),lineNumber:sa,lineStart:ua,range:[e,oa]}}function C(e){var t,r;for(r="";ca>oa&&(t=aa[oa],"0"===t||"1"===t);)r+=aa[oa++];return 0===r.length&&Y({},Zn.UnexpectedToken,"ILLEGAL"),ca>oa&&(t=aa.charCodeAt(oa),(u(t)||n(t))&&Y({},Zn.UnexpectedToken,"ILLEGAL")),{type:zn.NumericLiteral,value:parseInt(r,2),lineNumber:sa,lineStart:ua,range:[e,oa]}}function I(e,t){var r,a;for(i(e)?(a=!0,r="0"+aa[oa++]):(a=!1,++oa,r="");ca>oa&&i(aa[oa]);)r+=aa[oa++];return a||0!==r.length||Y({},Zn.UnexpectedToken,"ILLEGAL"),(u(aa.charCodeAt(oa))||n(aa.charCodeAt(oa)))&&Y({},Zn.UnexpectedToken,"ILLEGAL"),{type:zn.NumericLiteral,value:parseInt(r,8),octal:a,lineNumber:sa,lineStart:ua,range:[t,oa]}}function T(){var e,r,a;if(a=aa[oa],t(n(a.charCodeAt(0))||"."===a,"Numeric literal must start with a decimal digit or a decimal point"),r=oa,e="","."!==a){if(e=aa[oa++],a=aa[oa],"0"===e){if("x"===a||"X"===a)return++oa,A(r);if("b"===a||"B"===a)return++oa,C(r);if("o"===a||"O"===a||i(a))return I(a,r);a&&n(a.charCodeAt(0))&&Y({},Zn.UnexpectedToken,"ILLEGAL")}for(;n(aa.charCodeAt(oa));)e+=aa[oa++];a=aa[oa]}if("."===a){for(e+=aa[oa++];n(aa.charCodeAt(oa));)e+=aa[oa++];a=aa[oa]}if("e"===a||"E"===a)if(e+=aa[oa++],a=aa[oa],("+"===a||"-"===a)&&(e+=aa[oa++]),n(aa.charCodeAt(oa)))for(;n(aa.charCodeAt(oa));)e+=aa[oa++];else Y({},Zn.UnexpectedToken,"ILLEGAL");return u(aa.charCodeAt(oa))&&Y({},Zn.UnexpectedToken,"ILLEGAL"),{type:zn.NumericLiteral,value:parseFloat(e),lineNumber:sa,lineStart:ua,range:[r,oa]}}function L(){var e,r,n,a,o,u,c="",p=!1;for(e=aa[oa],t("'"===e||'"'===e,"String literal must starts with a quote"),r=oa,++oa;ca>oa;){if(n=aa[oa++],n===e){e="";break}if("\\"===n)if(n=aa[oa++],n&&s(n.charCodeAt(0)))++sa,"\r"===n&&"\n"===aa[oa]&&++oa,ua=oa;else switch(n){case"n":c+="\n";break;case"r":c+="\r";break;case"t":c+="	";break;case"u":case"x":"{"===aa[oa]?(++oa,c+=S()):(u=oa,o=v(n),o?c+=o:(oa=u,c+=n));break;case"b":c+="\b";break;case"f":c+="\f";break;case"v":c+="";break;default:i(n)?(a="01234567".indexOf(n),0!==a&&(p=!0),ca>oa&&i(aa[oa])&&(p=!0,a=8*a+"01234567".indexOf(aa[oa++]),"0123".indexOf(n)>=0&&ca>oa&&i(aa[oa])&&(a=8*a+"01234567".indexOf(aa[oa++]))),c+=String.fromCharCode(a)):c+=n}else{if(s(n.charCodeAt(0)))break;c+=n}}return""!==e&&Y({},Zn.UnexpectedToken,"ILLEGAL"),{type:zn.StringLiteral,value:c,octal:p,lineNumber:sa,lineStart:ua,range:[r,oa]}}function P(){var e,t,r,n,a,o,u,c,p="";for(r=!1,n=!1,t=oa,++oa;ca>oa;){if(e=aa[oa++],"`"===e){n=!0,r=!0;break}if("$"===e){if("{"===aa[oa]){++oa,r=!0;break}p+=e}else if("\\"===e)if(e=aa[oa++],s(e.charCodeAt(0)))++sa,"\r"===e&&"\n"===aa[oa]&&++oa,ua=oa;else switch(e){case"n":p+="\n";break;case"r":p+="\r";break;case"t":p+="	";break;case"u":case"x":"{"===aa[oa]?(++oa,p+=S()):(a=oa,o=v(e),o?p+=o:(oa=a,p+=e));break;case"b":p+="\b";break;case"f":p+="\f";break;case"v":p+="";break;default:i(e)?(u="01234567".indexOf(e),0!==u&&(c=!0),ca>oa&&i(aa[oa])&&(c=!0,u=8*u+"01234567".indexOf(aa[oa++]),"0123".indexOf(e)>=0&&ca>oa&&i(aa[oa])&&(u=8*u+"01234567".indexOf(aa[oa++]))),p+=String.fromCharCode(u)):p+=e}else s(e.charCodeAt(0))?(++sa,"\r"===e&&"\n"===aa[oa]&&++oa,ua=oa,p+="\n"):p+=e}return r||Y({},Zn.UnexpectedToken,"ILLEGAL"),{type:zn.Template,value:{cooked:p,raw:aa.slice(t+1,oa-(n?1:2))},tail:n,octal:c,lineNumber:sa,lineStart:ua,range:[t,oa]}}function k(e){var t,r;return la=null,g(),t=e.head?"`":"}",aa[oa]!==t&&Y({},Zn.UnexpectedToken,"ILLEGAL"),r=P(),U(),r}function O(e,t){var r,n=e;t.indexOf("u")>=0&&(n=n.replace(/\\u\{([0-9a-fA-F]+)\}/g,function(e,t){return parseInt(t,16)<=1114111?"x":void Y({},Zn.InvalidRegExp)}).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"x"));try{r=new RegExp(n)}catch(a){Y({},Zn.InvalidRegExp)}try{return new RegExp(e,t)}catch(i){return null}}function N(){var e,r,n,a,i;for(e=aa[oa],t("/"===e,"Regular expression literal must start with a slash"),r=aa[oa++],n=!1,a=!1;ca>oa;)if(e=aa[oa++],r+=e,"\\"===e)e=aa[oa++],s(e.charCodeAt(0))&&Y({},Zn.UnterminatedRegExp),r+=e;else if(s(e.charCodeAt(0)))Y({},Zn.UnterminatedRegExp);else if(n)"]"===e&&(n=!1);else{if("/"===e){a=!0;break}"["===e&&(n=!0)}return a||Y({},Zn.UnterminatedRegExp),i=r.substr(1,r.length-2),{value:i,literal:r}}function _(){var e,t,r,n;for(t="",r="";ca>oa&&(e=aa[oa],c(e.charCodeAt(0)));)if(++oa,"\\"===e&&ca>oa)if(e=aa[oa],"u"===e){if(++oa,n=oa,e=v("u"))for(r+=e,t+="\\u";oa>n;++n)t+=aa[n];else oa=n,r+="u",t+="\\u";z({},Zn.UnexpectedToken,"ILLEGAL")}else t+="\\",z({},Zn.UnexpectedToken,"ILLEGAL");else r+=e,t+=e;return{value:r,literal:t}}function M(){var e,t,r,n;return la=null,g(),e=oa,t=N(),r=_(),n=O(t.value,r.value),da.tokenize?{type:zn.RegularExpression,value:n,regex:{pattern:t.value,flags:r.value},lineNumber:sa,lineStart:ua,range:[e,oa]}:{literal:t.literal+r.literal,value:n,regex:{pattern:t.value,flags:r.value},range:[e,oa]}}function R(e){return e.type===zn.Identifier||e.type===zn.Keyword||e.type===zn.BooleanLiteral||e.type===zn.NullLiteral}function D(){var e,t;if(e=da.tokens[da.tokens.length-1],!e)return M();if("Punctuator"===e.type){if(")"===e.value)return t=da.tokens[da.openParenToken-1],!t||"Keyword"!==t.type||"if"!==t.value&&"while"!==t.value&&"for"!==t.value&&"with"!==t.value?x():M();if("}"===e.value){if(da.tokens[da.openCurlyToken-3]&&"Keyword"===da.tokens[da.openCurlyToken-3].type){if(t=da.tokens[da.openCurlyToken-4],!t)return x()}else{if(!da.tokens[da.openCurlyToken-4]||"Keyword"!==da.tokens[da.openCurlyToken-4].type)return x();if(t=da.tokens[da.openCurlyToken-5],!t)return M()}return Kn.indexOf(t.value)>=0?x():M()}return M()}return"Keyword"===e.type&&"this"!==e.value?M():x()}function j(){var e;return fa.inJSXChild||g(),oa>=ca?{type:zn.EOF,lineNumber:sa,lineStart:ua,range:[oa,oa]}:fa.inJSXChild?gn():(e=aa.charCodeAt(oa),40===e||41===e||58===e?x():39===e||34===e?fa.inJSXTag?yn():L():fa.inJSXTag&&ln(e)?dn():96===e?P():u(e)?w():46===e?n(aa.charCodeAt(oa+1))?T():x():n(e)?T():da.tokenize&&47===e?D():x())}function B(){var e;return e=la,oa=e.range[1],sa=e.lineNumber,ua=e.lineStart,la=j(),oa=e.range[1],sa=e.lineNumber,ua=e.lineStart,e}function U(){var e,t,r;e=oa,t=sa,r=ua,la=j(),oa=e,sa=t,ua=r}function F(){var e,t,r,n,a;return e="function"==typeof da.advance?da.advance:j,t=oa,r=sa,n=ua,null===la&&(la=e()),oa=la.range[1],sa=la.lineNumber,ua=la.lineStart,a=e(),oa=t,sa=r,ua=n,a}function J(e){oa=e.range[0],sa=e.lineNumber,ua=e.lineStart,la=e}function X(){return da.loc||da.range?(g(),{offset:oa,line:sa,col:oa-ua}):void 0}function V(){return da.loc||da.range?{offset:oa,line:sa,col:oa-ua}:void 0}function W(e){var t,r,n=da.bottomRightStack,a=n[n.length-1];if(!(e.type===Hn.Program&&e.body.length>0)){if(da.trailingComments.length>0?da.trailingComments[0].range[0]>=e.range[1]?(r=da.trailingComments,da.trailingComments=[]):da.trailingComments.length=0:a&&a.trailingComments&&a.trailingComments[0].range[0]>=e.range[1]&&(r=a.trailingComments,delete a.trailingComments),a)for(;a&&a.range[0]>=e.range[0];)t=a,a=n.pop();t?t.leadingComments&&t.leadingComments[t.leadingComments.length-1].range[1]<=e.range[0]&&(e.leadingComments=t.leadingComments,delete t.leadingComments):da.leadingComments.length>0&&da.leadingComments[da.leadingComments.length-1].range[1]<=e.range[0]&&(e.leadingComments=da.leadingComments,da.leadingComments=[]),r&&(e.trailingComments=r),n.push(e)}}function q(e,t){return da.range&&(t.range=[e.offset,oa]),da.loc&&(t.loc={start:{line:e.line,column:e.col},end:{line:sa,column:oa-ua}},t=pa.postProcess(t)),da.attachComment&&W(t),t}function G(){var e,t,r,n;return e=oa,t=sa,r=ua,g(),n=sa!==t,oa=e,sa=t,ua=r,n}function Y(e,r){var n,a=Array.prototype.slice.call(arguments,2),i=r.replace(/%(\d)/g,function(e,r){return t(r<a.length,"Message reference must be in range"),a[r]});throw"number"==typeof e.lineNumber?(n=new Error("Line "+e.lineNumber+": "+i),n.index=e.range[0],n.lineNumber=e.lineNumber,n.column=e.range[0]-ua+1):(n=new Error("Line "+sa+": "+i),n.index=oa,n.lineNumber=sa,n.column=oa-ua+1),n.description=i,n}function z(){try{Y.apply(null,arguments)}catch(e){if(!da.errors)throw e;da.errors.push(e)}}function $(e){if(e.type===zn.EOF&&Y(e,Zn.UnexpectedEOS),e.type===zn.NumericLiteral&&Y(e,Zn.UnexpectedNumber),(e.type===zn.StringLiteral||e.type===zn.JSXText)&&Y(e,Zn.UnexpectedString),e.type===zn.Identifier&&Y(e,Zn.UnexpectedIdentifier),e.type===zn.Keyword){if(p(e.value))Y(e,Zn.UnexpectedReserved);else if(ia&&l(e.value))return void z(e,Zn.StrictReservedWord);Y(e,Zn.UnexpectedToken,e.value)}e.type===zn.Template&&Y(e,Zn.UnexpectedTemplate,e.value.raw),Y(e,Zn.UnexpectedToken,e.value)}function K(e){var t=B();(t.type!==zn.Punctuator||t.value!==e)&&$(t)}function H(e,t){var r=B();(r.type!==(t?zn.Identifier:zn.Keyword)||r.value!==e)&&$(r)}function Q(e){return H(e,!0)}function Z(e){return la.type===zn.Punctuator&&la.value===e}function et(e,t){var r=t?zn.Identifier:zn.Keyword;return la.type===r&&la.value===e}function tt(e){return et(e,!0)}function rt(){var e;return la.type!==zn.Punctuator?!1:(e=la.value,"="===e||"*="===e||"/="===e||"%="===e||"+="===e||"-="===e||"<<="===e||">>="===e||">>>="===e||"&="===e||"^="===e||"|="===e)}function nt(){return fa.yieldAllowed&&et("yield",!ia)}function at(){var e=la,t=!1;return tt("async")&&(B(),t=!G(),J(e)),t}function it(){return fa.awaitAllowed&&tt("await")}function ot(){var e,t=oa,r=sa,n=ua,a=la;return 59===aa.charCodeAt(oa)?void B():(e=sa,g(),sa!==e?(oa=t,sa=r,ua=n,void(la=a)):Z(";")?void B():void(la.type===zn.EOF||Z("}")||$(la)))}function st(e){return e.type===Hn.Identifier||e.type===Hn.MemberExpression}function ut(e){return st(e)||e.type===Hn.ObjectPattern||e.type===Hn.ArrayPattern}function ct(){var e,t=[],r=[],n=null,a=!0,i=X();for(K("[");!Z("]");)"for"===la.value&&la.type===zn.Keyword?(a||Y({},Zn.ComprehensionError),et("for"),e=kr({ignoreBody:!0}),e.of=e.type===Hn.ForOfStatement,e.type=Hn.ComprehensionBlock,e.left.kind&&Y({},Zn.ComprehensionError),r.push(e)):"if"===la.value&&la.type===zn.Keyword?(a||Y({},Zn.ComprehensionError),H("if"),K("("),n=Ft(),K(")")):","===la.value&&la.type===zn.Punctuator?(a=!1,B(),t.push(null)):(e=xt(),t.push(e),e&&e.type===Hn.SpreadElement?Z("]")||Y({},Zn.ElementAfterSpreadElement):Z("]")||et("for")||et("if")||(K(","),a=!1));return K("]"),n&&!r.length&&Y({},Zn.ComprehensionRequiresBlock),r.length?(1!==t.length&&Y({},Zn.ComprehensionError),q(i,pa.createComprehensionExpression(n,r,t[0]))):q(i,pa.createArrayExpression(t))}function pt(e){var t,r,n,a,i,o,s=X();return t=ia,r=fa.yieldAllowed,fa.yieldAllowed=e.generator,n=fa.awaitAllowed,fa.awaitAllowed=e.async,a=e.params||[],i=e.defaults||[],o=Xr(),e.name&&ia&&f(a[0].name)&&z(e.name,Zn.StrictParamName),ia=t,fa.yieldAllowed=r,fa.awaitAllowed=n,q(s,pa.createFunctionExpression(null,a,i,o,e.rest||null,e.generator,o.type!==Hn.BlockStatement,e.async,e.returnType,e.typeParameters))}function lt(e){var t,r,n;return t=ia,ia=!0,r=Gr(),r.stricted&&z(r.stricted,r.message),n=pt({params:r.params,defaults:r.defaults,rest:r.rest,generator:e.generator,async:e.async,returnType:r.returnType,typeParameters:e.typeParameters}),ia=t,n}function ft(){var e,t,r=X(),n=B();return n.type===zn.StringLiteral||n.type===zn.NumericLiteral?(ia&&n.octal&&z(n,Zn.StrictOctalLiteral),q(r,pa.createLiteral(n))):n.type===zn.Punctuator&&"["===n.value?(r=X(),e=Ut(),t=q(r,e),K("]"),t):q(r,pa.createIdentifier(n.value))}function dt(){var e,t,r,n,a,i,o,s=X();return e=la,a="["===e.value&&e.type===zn.Punctuator,e.type===zn.Identifier||a||at()?(r=ft(),Z(":")?(B(),q(s,pa.createProperty("init",r,Ut(),!1,!1,a))):Z("(")||Z("<")?(Z("<")&&(o=Vt()),q(s,pa.createProperty("init",r,lt({generator:!1,async:!1,typeParameters:o}),!0,!1,a))):"get"===e.value?(a="["===la.value,t=ft(),K("("),K(")"),Z(":")&&(i=ur()),q(s,pa.createProperty("get",t,pt({generator:!1,async:!1,returnType:i}),!1,!1,a))):"set"===e.value?(a="["===la.value,t=ft(),K("("),e=la,n=[pr()],K(")"),Z(":")&&(i=ur()),q(s,pa.createProperty("set",t,pt({params:n,generator:!1,async:!1,name:e,returnType:i}),!1,!1,a))):"async"===e.value?(a="["===la.value,t=ft(),Z("<")&&(o=Vt()),q(s,pa.createProperty("init",t,lt({generator:!1,async:!0,typeParameters:o}),!0,!1,a))):(a&&$(la),q(s,pa.createProperty("init",r,r,!1,!0,!1)))):e.type===zn.EOF||e.type===zn.Punctuator?(Z("*")||$(e),B(),a=la.type===zn.Punctuator&&"["===la.value,r=ft(),Z("<")&&(o=Vt()),Z("(")||$(B()),q(s,pa.createProperty("init",r,lt({generator:!0,typeParameters:o}),!0,!1,a))):(t=ft(),Z(":")?(B(),q(s,pa.createProperty("init",t,Ut(),!1,!1,!1))):Z("(")||Z("<")?(Z("<")&&(o=Vt()),q(s,pa.createProperty("init",t,lt({generator:!1,typeParameters:o}),!0,!1,!1))):void $(B()))}function mt(){var e=X();return K("..."),q(e,pa.createSpreadProperty(Ut()))}function ht(e){var t=String;return e.type===Hn.Identifier?e.name:t(e.value)}function yt(){var e,t,n,a,i=[],o=new r,s=X(),u=String;for(K("{");!Z("}");)Z("...")?e=mt():(e=dt(),t=e.key.type===Hn.Identifier?e.key.name:u(e.key.value),n="init"===e.kind?Qn.Data:"get"===e.kind?Qn.Get:Qn.Set,o.has(t)?(a=o.get(t),a===Qn.Data?ia&&n===Qn.Data?z({},Zn.StrictDuplicateProperty):n!==Qn.Data&&z({},Zn.AccessorDataProperty):n===Qn.Data?z({},Zn.AccessorDataProperty):a&n&&z({},Zn.AccessorGetSet),o.set(t,a|n)):o.set(t,n)),i.push(e),Z("}")||K(",");return K("}"),q(s,pa.createObjectExpression(i))}function gt(e){var t=X(),r=k(e);return ia&&r.octal&&Y(r,Zn.StrictOctalLiteral),q(t,pa.createTemplateElement({raw:r.value.raw,cooked:r.value.cooked},r.tail))}function vt(){var e,t,r,n=X();for(e=gt({head:!0}),t=[e],r=[];!e.tail;)r.push(Ft()),e=gt({head:!1}),t.push(e);return q(n,pa.createTemplateLiteral(t,r))}function St(){var e,t,r;return K("("),++fa.parenthesizedCount,t=X(),e=Ft(),Z(":")&&(r=ur(),e=q(t,pa.createTypeCast(e,r))),K(")"),e}function bt(){var e;return at()&&(e=F(),e.type===zn.Keyword&&"function"===e.value)?!0:!1}function Et(){var e,t,r,n;if(t=la.type,t===zn.Identifier)return e=X(),q(e,pa.createIdentifier(B().value));if(t===zn.StringLiteral||t===zn.NumericLiteral)return ia&&la.octal&&z(la,Zn.StrictOctalLiteral),e=X(),q(e,pa.createLiteral(B()));if(t===zn.Keyword){if(et("this"))return e=X(),B(),q(e,pa.createThisExpression());if(et("function"))return zr();if(et("class"))return nn();if(et("super"))return e=X(),B(),q(e,pa.createIdentifier("super"))}return t===zn.BooleanLiteral?(e=X(),r=B(),r.value="true"===r.value,q(e,pa.createLiteral(r))):t===zn.NullLiteral?(e=X(),r=B(),r.value=null,q(e,pa.createLiteral(r))):Z("[")?ct():Z("{")?yt():Z("(")?St():Z("/")||Z("/=")?(e=X(),n=pa.createLiteral(M()),U(),q(e,n)):t===zn.Template?vt():Z("<")?On():void $(B())}function wt(){var e,t=[];if(K("("),!Z(")"))for(;ca>oa&&(e=xt(),t.push(e),!Z(")"));)e.type===Hn.SpreadElement&&Y({},Zn.ElementAfterSpreadElement),K(",");return K(")"),t}function xt(){if(Z("...")){var e=X();return B(),q(e,pa.createSpreadElement(Ut()))}return Ut()}function At(){var e=X(),t=B();return R(t)||$(t),q(e,pa.createIdentifier(t.value))}function Ct(){return K("."),At()}function It(){var e;return K("["),e=Ft(),K("]"),e}function Tt(){var e,t,r=X();return H("new"),e=Pt(),t=Z("(")?wt():[],q(r,pa.createNewExpression(e,t))}function Lt(){var e,t,r=X();for(e=et("new")?Tt():Et();Z(".")||Z("[")||Z("(")||la.type===zn.Template;)Z("(")?(t=wt(),e=q(r,pa.createCallExpression(e,t))):e=Z("[")?q(r,pa.createMemberExpression("[",e,It())):Z(".")?q(r,pa.createMemberExpression(".",e,Ct())):q(r,pa.createTaggedTemplateExpression(e,vt()));return e}function Pt(){var e,t=X();for(e=et("new")?Tt():Et();Z(".")||Z("[")||la.type===zn.Template;)e=Z("[")?q(t,pa.createMemberExpression("[",e,It())):Z(".")?q(t,pa.createMemberExpression(".",e,Ct())):q(t,pa.createTaggedTemplateExpression(e,vt()));return e}function kt(){var e,t=X(),r=Lt();return la.type!==zn.Punctuator?r:(!Z("++")&&!Z("--")||G()||(ia&&r.type===Hn.Identifier&&f(r.name)&&z({},Zn.StrictLHSPostfix),st(r)||Y({},Zn.InvalidLHSInAssignment),e=B(),r=q(t,pa.createPostfixExpression(e.value,r))),r)}function Ot(){var e,t,r;return la.type!==zn.Punctuator&&la.type!==zn.Keyword?kt():Z("++")||Z("--")?(e=X(),t=B(),r=Ot(),ia&&r.type===Hn.Identifier&&f(r.name)&&z({},Zn.StrictLHSPrefix),st(r)||Y({},Zn.InvalidLHSInAssignment),q(e,pa.createUnaryExpression(t.value,r))):Z("+")||Z("-")||Z("~")||Z("!")?(e=X(),t=B(),r=Ot(),q(e,pa.createUnaryExpression(t.value,r))):et("delete")||et("void")||et("typeof")?(e=X(),t=B(),r=Ot(),r=q(e,pa.createUnaryExpression(t.value,r)),ia&&"delete"===r.operator&&r.argument.type===Hn.Identifier&&z({},Zn.StrictDelete),r):kt()}function Nt(e,t){var r=0;if(e.type!==zn.Punctuator&&e.type!==zn.Keyword)return 0;switch(e.value){case"||":r=1;break;case"&&":r=2;break;case"|":r=3;break;case"^":r=4;break;case"&":r=5;break;case"==":case"!=":case"===":case"!==":r=6;break;case"<":case">":case"<=":case">=":case"instanceof":r=7;break;case"in":r=t?7:0;break;case"<<":case">>":case">>>":r=8;break;case"+":case"-":r=9;break;case"*":case"/":case"%":r=11}return r}function _t(){var e,t,r,n,a,i,o,s,u,c,p;if(n=fa.allowIn,fa.allowIn=!0,c=X(),s=Ot(),t=la,r=Nt(t,n),0===r)return s;for(t.prec=r,B(),p=[c,X()],i=Ot(),a=[s,t,i];(r=Nt(la,n))>0;){for(;a.length>2&&r<=a[a.length-2].prec;)i=a.pop(),o=a.pop().value,s=a.pop(),e=pa.createBinaryExpression(o,s,i),p.pop(),c=p.pop(),q(c,e),a.push(e),p.push(c);t=B(),t.prec=r,a.push(t),p.push(X()),e=Ot(),a.push(e)}for(fa.allowIn=n,u=a.length-1,e=a[u],p.pop();u>1;)e=pa.createBinaryExpression(a[u-1].value,a[u-2],e),u-=2,c=p.pop(),q(c,e);return e}function Mt(){var e,t,r,n,a=X();return e=_t(),Z("?")&&(B(),t=fa.allowIn,fa.allowIn=!0,r=Ut(),fa.allowIn=t,K(":"),n=Ut(),e=q(a,pa.createConditionalExpression(e,r,n))),e}function Rt(e){var t,r,n,a;if(e.type===Hn.ObjectExpression)for(e.type=Hn.ObjectPattern,t=0,r=e.properties.length;r>t;t+=1)n=e.properties[t],n.type===Hn.SpreadProperty?(r-1>t&&Y({},Zn.PropertyAfterSpreadProperty),Rt(n.argument)):("init"!==n.kind&&Y({},Zn.InvalidLHSInAssignment),Rt(n.value));else if(e.type===Hn.ArrayExpression)for(e.type=Hn.ArrayPattern,t=0,r=e.elements.length;r>t;t+=1)a=e.elements[t],a&&Rt(a);else e.type===Hn.Identifier?f(e.name)&&Y({},Zn.InvalidLHSInAssignment):e.type===Hn.SpreadElement?(Rt(e.argument),e.argument.type===Hn.ObjectPattern&&Y({},Zn.ObjectPatternAsSpread)):e.type!==Hn.MemberExpression&&e.type!==Hn.CallExpression&&e.type!==Hn.NewExpression&&Y({},Zn.InvalidLHSInAssignment)}function Dt(e,t){var r,n,a,i;if(t.type===Hn.ObjectExpression)for(t.type=Hn.ObjectPattern,r=0,n=t.properties.length;n>r;r+=1)a=t.properties[r],a.type===Hn.SpreadProperty?(n-1>r&&Y({},Zn.PropertyAfterSpreadProperty),Dt(e,a.argument)):("init"!==a.kind&&Y({},Zn.InvalidLHSInFormalsList),Dt(e,a.value));else if(t.type===Hn.ArrayExpression)for(t.type=Hn.ArrayPattern,r=0,n=t.elements.length;n>r;r+=1)i=t.elements[r],i&&Dt(e,i);else t.type===Hn.Identifier?Wr(e,t,t.name):t.type===Hn.SpreadElement?(t.argument.type!==Hn.Identifier&&Y({},Zn.InvalidLHSInFormalsList),Wr(e,t.argument,t.argument.name)):Y({},Zn.InvalidLHSInFormalsList)}function jt(e){var n,a,i,o,s,u,c,p;for(o=[],s=[],u=0,p=null,c={paramSet:new r},n=0,a=e.length;a>n;n+=1)if(i=e[n],i.type===Hn.Identifier)o.push(i),s.push(null),Wr(c,i,i.name);else if(i.type===Hn.ObjectExpression||i.type===Hn.ArrayExpression)Dt(c,i),o.push(i),s.push(null);else if(i.type===Hn.SpreadElement)t(n===a-1,"It is guaranteed that SpreadElement is last element by parseExpression"),i.argument.type!==Hn.Identifier&&Y({},Zn.InvalidLHSInFormalsList),Dt(c,i.argument),p=i.argument;else{if(i.type!==Hn.AssignmentExpression)return null;o.push(i.left),s.push(i.right),++u,Wr(c,i.left,i.left.name)}return c.message===Zn.StrictParamDupe&&Y(ia?c.stricted:c.firstRestricted,c.message),0===u&&(s=[]),{params:o,defaults:s,rest:p,stricted:c.stricted,firstRestricted:c.firstRestricted,message:c.message}}function Bt(e,t){var r,n,a,i;return K("=>"),r=ia,n=fa.yieldAllowed,fa.yieldAllowed=!1,a=fa.awaitAllowed,fa.awaitAllowed=!!e.async,i=Xr(),ia&&e.firstRestricted&&Y(e.firstRestricted,e.message),ia&&e.stricted&&z(e.stricted,e.message),ia=r,fa.yieldAllowed=n,fa.awaitAllowed=a,q(t,pa.createArrowFunctionExpression(e.params,e.defaults,i,e.rest,i.type!==Hn.BlockStatement,!!e.async))}function Ut(){var e,t,r,n,a,i=!1,o=la,s=!1;if(nt())return $r();if(it())return Kr();if(a=fa.parenthesizedCount,e=X(),bt())return zr();if(at()&&(s=!0,B()),Z("(")){if(r=F(),r.type===zn.Punctuator&&")"===r.value||"..."===r.value)return n=Gr(),Z("=>")||$(B()),n.async=s,Bt(n,e);i=!0}return r=la,s&&!Z("(")&&r.type!==zn.Identifier&&(s=!1,J(o)),t=Mt(),Z("=>")&&(fa.parenthesizedCount===a||fa.parenthesizedCount===a+1)&&(t.type===Hn.Identifier?n=jt([t]):t.type===Hn.AssignmentExpression||t.type===Hn.ArrayExpression||t.type===Hn.ObjectExpression?(i||$(B()),n=jt([t])):t.type===Hn.SequenceExpression&&(n=jt(t.expressions)),n)?(n.async=s,Bt(n,e)):(s&&(s=!1,J(o),t=Mt()),rt()&&(ia&&t.type===Hn.Identifier&&f(t.name)&&z(r,Zn.StrictLHSAssignment),!Z("=")||t.type!==Hn.ObjectExpression&&t.type!==Hn.ArrayExpression?st(t)||Y({},Zn.InvalidLHSInAssignment):Rt(t),t=q(e,pa.createAssignmentExpression(B().value,t,Ut()))),t)}function Ft(){var e,t,r,n,a;if(e=X(),t=Ut(),r=[t],Z(",")){for(;ca>oa&&Z(",");)if(B(),t=xt(),r.push(t),t.type===Hn.SpreadElement){a=!0,Z(")")||Y({},Zn.ElementAfterSpreadElement);break}n=q(e,pa.createSequenceExpression(r))}return a&&"=>"!==F().value&&Y({},Zn.IllegalSpread),n||t}function Jt(){for(var e,t=[];ca>oa&&!Z("}")&&(e=on(),"undefined"!=typeof e);)t.push(e);return t}function Xt(){var e,t=X();return K("{"),e=Jt(),K("}"),q(t,pa.createBlockStatement(e))}function Vt(){var e=X(),t=[];for(K("<");!Z(">");)t.push(pr()),Z(">")||K(",");return K(">"),q(e,pa.createTypeParameterDeclaration(t))}function Wt(){var e=X(),t=fa.inType,r=[];for(fa.inType=!0,K("<");!Z(">");)r.push(sr()),Z(">")||K(",");return K(">"),fa.inType=t,q(e,pa.createTypeParameterInstantiation(r))}function qt(e,t){var r,n,a;return K("["),r=ft(),K(":"),n=sr(),K("]"),K(":"),a=sr(),q(e,pa.createObjectTypeIndexer(r,n,a,t))}function Gt(e){var t,r=[],n=null,a=null;for(Z("<")&&(a=Vt()),K("(");la.type===zn.Identifier;)r.push(er()),Z(")")||K(",");return Z("...")&&(B(),n=er()),K(")"),K(":"),t=sr(),q(e,pa.createFunctionTypeAnnotation(r,t,n,a))}function Yt(e,t,r){var n,a=!1;return n=Gt(e),q(e,pa.createObjectTypeProperty(r,n,a,t))}function zt(e,t){var r=X();return q(e,pa.createObjectTypeCallProperty(Gt(r),t))}function $t(e){var t,r,n,a,i,o,s=[],u=[],c=!1,p=[];for(K("{");!Z("}");)t=X(),o=ia?et("static"):tt("static"),e&&o&&(a=B(),i=!0),Z("[")?u.push(qt(t,i)):Z("(")||Z("<")?s.push(zt(t,e)):(i&&Z(":")?(r=q(t,pa.createIdentifier(a)),z(a,Zn.StrictReservedWord)):r=ft(),Z("<")||Z("(")?p.push(Yt(t,i,r)):(Z("?")&&(B(),c=!0),K(":"),n=sr(),p.push(q(t,pa.createObjectTypeProperty(r,n,c,i))))),Z(";")?B():Z("}")||$(la);return K("}"),pa.createObjectTypeAnnotation(p,u,s)}function Kt(){var e,t=X(),r=null;for(e=cr();Z(".");)K("."),e=q(t,pa.createQualifiedTypeIdentifier(e,cr()));return Z("<")&&(r=Wt()),q(t,pa.createGenericTypeAnnotation(e,r))}function Ht(){var e=X();return H("void"),q(e,pa.createVoidTypeAnnotation())}function Qt(){var e,t=X();return H("typeof"),e=rr(),q(t,pa.createTypeofTypeAnnotation(e))}function Zt(){var e=X(),t=[];for(K("[");ca>oa&&!Z("]")&&(t.push(sr()),!Z("]"));)K(",");return K("]"),q(e,pa.createTupleTypeAnnotation(t))}function er(){var e,t,r=X(),n=!1;return e=cr(),Z("?")&&(B(),n=!0),K(":"),t=sr(),q(r,pa.createFunctionTypeParam(e,t,n))}function tr(){for(var e={params:[],rest:null};la.type===zn.Identifier;)e.params.push(er()),Z(")")||K(",");return Z("...")&&(B(),e.rest=er()),e}function rr(){var e,t,r,n,a=null,i=null,o=X(),s=null,u=!1;switch(la.type){case zn.Identifier:switch(la.value){case"any":return B(),q(o,pa.createAnyTypeAnnotation());case"bool":case"boolean":return B(),q(o,pa.createBooleanTypeAnnotation());case"number":return B(),q(o,pa.createNumberTypeAnnotation());case"string":return B(),q(o,pa.createStringTypeAnnotation())}return q(o,Kt());case zn.Punctuator:switch(la.value){case"{":return q(o,$t());case"[":return Zt();case"<":return t=Vt(),K("("),e=tr(),a=e.params,s=e.rest,K(")"),K("=>"),i=sr(),q(o,pa.createFunctionTypeAnnotation(a,i,s,t));case"(":return B(),Z(")")||Z("...")||(la.type===zn.Identifier?(r=F(),u="?"!==r.value&&":"!==r.value):u=!0),u?(n=sr(),K(")"),Z("=>")&&Y({},Zn.ConfusedAboutFunctionType),n):(e=tr(),a=e.params,s=e.rest,K(")"),K("=>"),i=sr(),q(o,pa.createFunctionTypeAnnotation(a,i,s,null)))}break;case zn.Keyword:switch(la.value){case"void":return q(o,Ht());case"typeof":return q(o,Qt())}break;case zn.StringLiteral:return r=B(),r.octal&&Y(r,Zn.StrictOctalLiteral),q(o,pa.createStringLiteralTypeAnnotation(r))}$(la)}function nr(){var e=X(),t=rr();return Z("[")?(K("["),K("]"),q(e,pa.createArrayTypeAnnotation(t))):t}function ar(){var e=X();return Z("?")?(B(),q(e,pa.createNullableTypeAnnotation(ar()))):nr()}function ir(){var e,t,r=X();for(e=ar(),t=[e];Z("&");)B(),t.push(ar());return 1===t.length?e:q(r,pa.createIntersectionTypeAnnotation(t))}function or(){var e,t,r=X();for(e=ir(),t=[e];Z("|");)B(),t.push(ir());return 1===t.length?e:q(r,pa.createUnionTypeAnnotation(t))}function sr(){var e,t=fa.inType;return fa.inType=!0,e=or(),fa.inType=t,e}function ur(){var e,t=X();return K(":"),e=sr(),q(t,pa.createTypeAnnotation(e))}function cr(){var e=X(),t=B();return t.type!==zn.Identifier&&$(t),q(e,pa.createIdentifier(t.value))}function pr(e,t){var r=X(),n=cr(),a=!1;return t&&Z("?")&&(K("?"),a=!0),(e||Z(":"))&&(n.typeAnnotation=ur(),n=q(r,n)),a&&(n.optional=!0,n=q(r,n)),n}function lr(e){var t,r=X(),n=null,a=X();return Z("{")?(t=yt(),Rt(t),Z(":")&&(t.typeAnnotation=ur(),q(a,t))):Z("[")?(t=ct(),Rt(t),Z(":")&&(t.typeAnnotation=ur(),q(a,t))):(t=fa.allowKeyword?At():pr(),ia&&f(t.name)&&z({},Zn.StrictVarName)),"const"===e?(Z("=")||Y({},Zn.NoUninitializedConst),K("="),n=Ut()):Z("=")&&(B(),n=Ut()),q(r,pa.createVariableDeclarator(t,n))}function fr(e){var t=[];do{if(t.push(lr(e)),!Z(","))break;B()}while(ca>oa);return t}function dr(){var e,t=X();return H("var"),e=fr(),ot(),q(t,pa.createVariableDeclaration(e,"var"))}function mr(e){var t,r=X();return H(e),t=fr(e),ot(),q(r,pa.createVariableDeclaration(t,e))}function hr(){var e,t=X();return la.type!==zn.StringLiteral&&Y({},Zn.InvalidModuleSpecifier),e=pa.createModuleSpecifier(la),B(),q(t,e)}function yr(){var e=X();return K("*"),q(e,pa.createExportBatchSpecifier())}function gr(){var e,t=null,r=X();return et("default")?(B(),e=q(r,pa.createIdentifier("default"))):e=cr(),tt("as")&&(B(),t=At()),q(r,pa.createExportSpecifier(e,t))}function vr(){var e,t,r,n=null,a=null,i=[],o=X();if(H("export"),et("default")){if(B(),et("function")||et("class")){if(e=F(),R(e))return t=on(),q(o,pa.createExportDeclaration(!0,t,[t.id],null));switch(la.value){case"class":return q(o,pa.createExportDeclaration(!0,nn(),[],null));case"function":return q(o,pa.createExportDeclaration(!0,zr(),[],null))}}return tt("from")&&Y({},Zn.UnexpectedToken,la.value),n=Z("{")?yt():Z("[")?ct():Ut(),ot(),q(o,pa.createExportDeclaration(!0,n,[],null))}if(la.type===zn.Keyword||tt("type"))switch(la.value){case"type":case"let":case"const":case"var":case"class":case"function":return q(o,pa.createExportDeclaration(!1,on(),i,null))}if(Z("*"))return i.push(yr()),tt("from")||Y({},la.value?Zn.UnexpectedToken:Zn.MissingFromClause,la.value),B(),a=hr(),ot(),q(o,pa.createExportDeclaration(!1,null,i,a));if(K("{"),!Z("}"))do r=r||et("default"),i.push(gr());while(Z(",")&&B());return K("}"),tt("from")?(B(),a=hr(),ot()):r?Y({},la.value?Zn.UnexpectedToken:Zn.MissingFromClause,la.value):ot(),q(o,pa.createExportDeclaration(!1,n,i,a))}function Sr(){var e,t=null,r=X();return e=At(),tt("as")&&(B(),t=cr()),q(r,pa.createImportSpecifier(e,t))}function br(){var e=[];if(K("{"),!Z("}"))do e.push(Sr());while(Z(",")&&B());return K("}"),e}function Er(){var e,t=X();return e=At(),q(t,pa.createImportDefaultSpecifier(e))}function wr(){var e,t=X();return K("*"),tt("as")||Y({},Zn.NoAsAfterImportNamespace),B(),e=At(),q(t,pa.createImportNamespaceSpecifier(e))}function xr(){var e,t,r,n=X(),a=!1;return H("import"),tt("type")&&(r=F(),(r.type===zn.Identifier&&"from"!==r.value||r.type===zn.Punctuator&&("{"===r.value||"*"===r.value))&&(a=!0,B())),e=[],la.type===zn.StringLiteral?(t=hr(),ot(),q(n,pa.createImportDeclaration(e,t,a))):(!et("default")&&R(la)&&(e.push(Er()),Z(",")&&B()),Z("*")?e.push(wr()):Z("{")&&(e=e.concat(br())),tt("from")||Y({},la.value?Zn.UnexpectedToken:Zn.MissingFromClause,la.value),B(),t=hr(),ot(),q(n,pa.createImportDeclaration(e,t,a)))}function Ar(){var e=X();return K(";"),q(e,pa.createEmptyStatement())}function Cr(){var e=X(),t=Ft();return ot(),q(e,pa.createExpressionStatement(t))}function Ir(){var e,t,r,n=X();return H("if"),K("("),e=Ft(),K(")"),t=Jr(),et("else")?(B(),r=Jr()):r=null,q(n,pa.createIfStatement(e,t,r))}function Tr(){var e,t,r,n=X();return H("do"),r=fa.inIteration,fa.inIteration=!0,e=Jr(),fa.inIteration=r,H("while"),K("("),t=Ft(),K(")"),Z(";")&&B(),q(n,pa.createDoWhileStatement(e,t))}function Lr(){var e,t,r,n=X();return H("while"),K("("),e=Ft(),K(")"),r=fa.inIteration,fa.inIteration=!0,t=Jr(),fa.inIteration=r,q(n,pa.createWhileStatement(e,t))}function Pr(){var e=X(),t=B(),r=fr();return q(e,pa.createVariableDeclaration(r,t.value))}function kr(e){var t,r,n,a,i,o,s,u,c=X();return t=r=n=null,H("for"),tt("each")&&Y({},Zn.EachNotAllowed),K("("),Z(";")?B():(et("var")||et("let")||et("const")?(fa.allowIn=!1,t=Pr(),fa.allowIn=!0,1===t.declarations.length&&(et("in")||tt("of"))&&(s=la,("in"!==s.value&&"var"===t.kind||!t.declarations[0].init)&&(B(),a=t,i=Ft(),t=null))):(fa.allowIn=!1,t=Ft(),fa.allowIn=!0,tt("of")?(s=B(),a=t,i=Ft(),t=null):et("in")&&(ut(t)||Y({},Zn.InvalidLHSInForIn),s=B(),a=t,i=Ft(),t=null)),"undefined"==typeof a&&K(";")),"undefined"==typeof a&&(Z(";")||(r=Ft()),K(";"),Z(")")||(n=Ft())),K(")"),u=fa.inIteration,fa.inIteration=!0,void 0!==e&&e.ignoreBody||(o=Jr()),fa.inIteration=u,"undefined"==typeof a?q(c,pa.createForStatement(t,r,n,o)):"in"===s.value?q(c,pa.createForInStatement(a,i,o)):q(c,pa.createForOfStatement(a,i,o))}function Or(){var e=null,t=X();return H("continue"),59===aa.charCodeAt(oa)?(B(),fa.inIteration||Y({},Zn.IllegalContinue),q(t,pa.createContinueStatement(null))):G()?(fa.inIteration||Y({},Zn.IllegalContinue),q(t,pa.createContinueStatement(null))):(la.type===zn.Identifier&&(e=cr(),fa.labelSet.has(e.name)||Y({},Zn.UnknownLabel,e.name)),ot(),null!==e||fa.inIteration||Y({},Zn.IllegalContinue),q(t,pa.createContinueStatement(e)))}function Nr(){var e=null,t=X();return H("break"),59===aa.charCodeAt(oa)?(B(),fa.inIteration||fa.inSwitch||Y({},Zn.IllegalBreak),q(t,pa.createBreakStatement(null))):G()?(fa.inIteration||fa.inSwitch||Y({},Zn.IllegalBreak),q(t,pa.createBreakStatement(null))):(la.type===zn.Identifier&&(e=cr(),fa.labelSet.has(e.name)||Y({},Zn.UnknownLabel,e.name)),ot(),null!==e||fa.inIteration||fa.inSwitch||Y({},Zn.IllegalBreak),q(t,pa.createBreakStatement(e)))
}function _r(){var e=null,t=X();return H("return"),fa.inFunctionBody||z({},Zn.IllegalReturn),32===aa.charCodeAt(oa)&&u(aa.charCodeAt(oa+1))?(e=Ft(),ot(),q(t,pa.createReturnStatement(e))):G()?q(t,pa.createReturnStatement(null)):(Z(";")||Z("}")||la.type===zn.EOF||(e=Ft()),ot(),q(t,pa.createReturnStatement(e)))}function Mr(){var e,t,r=X();return ia&&z({},Zn.StrictModeWith),H("with"),K("("),e=Ft(),K(")"),t=Jr(),q(r,pa.createWithStatement(e,t))}function Rr(){var e,t,r=[],n=X();for(et("default")?(B(),e=null):(H("case"),e=Ft()),K(":");ca>oa&&!(Z("}")||et("default")||et("case"))&&(t=on(),"undefined"!=typeof t);)r.push(t);return q(n,pa.createSwitchCase(e,r))}function Dr(){var e,t,r,n,a,i=X();if(H("switch"),K("("),e=Ft(),K(")"),K("{"),t=[],Z("}"))return B(),q(i,pa.createSwitchStatement(e,t));for(n=fa.inSwitch,fa.inSwitch=!0,a=!1;ca>oa&&!Z("}");)r=Rr(),null===r.test&&(a&&Y({},Zn.MultipleDefaultsInSwitch),a=!0),t.push(r);return fa.inSwitch=n,K("}"),q(i,pa.createSwitchStatement(e,t))}function jr(){var e,t=X();return H("throw"),G()&&Y({},Zn.NewlineAfterThrow),e=Ft(),ot(),q(t,pa.createThrowStatement(e))}function Br(){var e,t,r=X();return H("catch"),K("("),Z(")")&&$(la),e=Ft(),ia&&e.type===Hn.Identifier&&f(e.name)&&z({},Zn.StrictCatchVariable),K(")"),t=Xt(),q(r,pa.createCatchClause(e,t))}function Ur(){var e,t=[],r=null,n=X();return H("try"),e=Xt(),et("catch")&&t.push(Br()),et("finally")&&(B(),r=Xt()),0!==t.length||r||Y({},Zn.NoCatchOrFinally),q(n,pa.createTryStatement(e,[],t,r))}function Fr(){var e=X();return H("debugger"),ot(),q(e,pa.createDebuggerStatement())}function Jr(){var e,t,r,n=la.type;if(n===zn.EOF&&$(la),n===zn.Punctuator)switch(la.value){case";":return Ar();case"{":return Xt();case"(":return Cr()}if(n===zn.Keyword)switch(la.value){case"break":return Nr();case"continue":return Or();case"debugger":return Fr();case"do":return Tr();case"for":return kr();case"function":return Yr();case"class":return an();case"if":return Ir();case"return":return _r();case"switch":return Dr();case"throw":return jr();case"try":return Ur();case"var":return dr();case"while":return Lr();case"with":return Mr()}return bt()?Yr():(e=X(),t=Ft(),t.type===Hn.Identifier&&Z(":")?(B(),fa.labelSet.has(t.name)&&Y({},Zn.Redeclaration,"Label",t.name),fa.labelSet.set(t.name,!0),r=Jr(),fa.labelSet["delete"](t.name),q(e,pa.createLabeledStatement(t,r))):(ot(),q(e,pa.createExpressionStatement(t))))}function Xr(){return Z("{")?Vr():Ut()}function Vr(){var e,t,n,a,i,o,s,u,c,p=[],l=X();for(K("{");ca>oa&&la.type===zn.StringLiteral&&(t=la,e=on(),p.push(e),e.expression.type===Hn.Literal);)n=aa.slice(t.range[0]+1,t.range[1]-1),"use strict"===n?(ia=!0,a&&z(a,Zn.StrictOctalLiteral)):!a&&t.octal&&(a=t);for(i=fa.labelSet,o=fa.inIteration,s=fa.inSwitch,u=fa.inFunctionBody,c=fa.parenthesizedCount,fa.labelSet=new r,fa.inIteration=!1,fa.inSwitch=!1,fa.inFunctionBody=!0,fa.parenthesizedCount=0;ca>oa&&!Z("}")&&(e=on(),"undefined"!=typeof e);)p.push(e);return K("}"),fa.labelSet=i,fa.inIteration=o,fa.inSwitch=s,fa.inFunctionBody=u,fa.parenthesizedCount=c,q(l,pa.createBlockStatement(p))}function Wr(e,t,r){ia?(f(r)&&(e.stricted=t,e.message=Zn.StrictParamName),e.paramSet.has(r)&&(e.stricted=t,e.message=Zn.StrictParamDupe)):e.firstRestricted||(f(r)?(e.firstRestricted=t,e.message=Zn.StrictParamName):l(r)?(e.firstRestricted=t,e.message=Zn.StrictReservedWord):e.paramSet.has(r)&&(e.firstRestricted=t,e.message=Zn.StrictParamDupe)),e.paramSet.set(r,!0)}function qr(e){var t,r,n,a,i;return r=la,"..."===r.value&&(r=B(),n=!0),Z("[")?(t=X(),a=ct(),Dt(e,a),Z(":")&&(a.typeAnnotation=ur(),q(t,a))):Z("{")?(t=X(),n&&Y({},Zn.ObjectPatternAsRestParameter),a=yt(),Dt(e,a),Z(":")&&(a.typeAnnotation=ur(),q(t,a))):(a=n?pr(!1,!1):pr(!1,!0),Wr(e,r,r.value)),Z("=")&&(n&&z(la,Zn.DefaultRestParameter),B(),i=Ut(),++e.defaultCount),n?(Z(")")||Y({},Zn.ParameterAfterRestParameter),e.rest=a,!1):(e.params.push(a),e.defaults.push(i),!Z(")"))}function Gr(e){var t,n=X();if(t={params:[],defaultCount:0,defaults:[],rest:null,firstRestricted:e},K("("),!Z(")"))for(t.paramSet=new r;ca>oa&&qr(t);)K(",");return K(")"),0===t.defaultCount&&(t.defaults=[]),Z(":")&&(t.returnType=ur()),q(n,t)}function Yr(){var e,t,r,n,a,i,o,s,u,c,p,d,m=X();return s=!1,at()&&(B(),s=!0),H("function"),o=!1,Z("*")&&(B(),o=!0),r=la,e=cr(),Z("<")&&(d=Vt()),ia?f(r.value)&&z(r,Zn.StrictFunctionName):f(r.value)?(a=r,i=Zn.StrictFunctionName):l(r.value)&&(a=r,i=Zn.StrictReservedWord),n=Gr(a),a=n.firstRestricted,n.message&&(i=n.message),u=ia,c=fa.yieldAllowed,fa.yieldAllowed=o,p=fa.awaitAllowed,fa.awaitAllowed=s,t=Vr(),ia&&a&&Y(a,i),ia&&n.stricted&&z(n.stricted,i),ia=u,fa.yieldAllowed=c,fa.awaitAllowed=p,q(m,pa.createFunctionDeclaration(e,n.params,n.defaults,t,n.rest,o,!1,s,n.returnType,d))}function zr(){var e,t,r,n,a,i,o,s,u,c,p,d=null,m=X();return o=!1,at()&&(B(),o=!0),H("function"),i=!1,Z("*")&&(B(),i=!0),Z("(")||(Z("<")||(e=la,d=cr(),ia?f(e.value)&&z(e,Zn.StrictFunctionName):f(e.value)?(t=e,r=Zn.StrictFunctionName):l(e.value)&&(t=e,r=Zn.StrictReservedWord)),Z("<")&&(p=Vt())),n=Gr(t),t=n.firstRestricted,n.message&&(r=n.message),s=ia,u=fa.yieldAllowed,fa.yieldAllowed=i,c=fa.awaitAllowed,fa.awaitAllowed=o,a=Vr(),ia&&t&&Y(t,r),ia&&n.stricted&&z(n.stricted,r),ia=s,fa.yieldAllowed=u,fa.awaitAllowed=c,q(m,pa.createFunctionExpression(d,n.params,n.defaults,a,n.rest,i,!1,o,n.returnType,p))}function $r(){var e,t,r=X();return H("yield",!ia),e=!1,Z("*")&&(B(),e=!0),t=Ut(),q(r,pa.createYieldExpression(t,e))}function Kr(){var e,t=X();return Q("await"),e=Ut(),q(t,pa.createAwaitExpression(e))}function Hr(e){return"get"===e.kind||"set"===e.kind||e.value.generator}function Qr(e,t,r,n){var a,i,o,s,u,c,p;return o=t?na["static"]:na.prototype,r?pa.createMethodDefinition(o,"",e,lt({generator:!0}),n):(c="Identifier"===e.type&&e.name,"get"!==c||Z("(")?"set"!==c||Z("(")?(Z("<")&&(u=Vt()),s="async"===c&&!Z("("),s&&(e=ft()),pa.createMethodDefinition(o,"",e,lt({generator:!1,async:s,typeParameters:u}),n)):(e=ft(),K("("),a=la,i=[pr()],K(")"),Z(":")&&(p=ur()),pa.createMethodDefinition(o,"set",e,pt({params:i,generator:!1,name:a,returnType:p}),n)):(e=ft(),K("("),K(")"),Z(":")&&(p=ur()),pa.createMethodDefinition(o,"get",e,pt({generator:!1,returnType:p}),n)))}function Zr(e,t,r){var n;return n=ur(),K(";"),pa.createClassProperty(e,n,t,r)}function en(){var e,t,r=!1,n=!1,a=X(),i=!1;return Z(";")?void B():("static"===la.value&&(B(),i=!0),Z("*")&&(B(),n=!0),t=la,(tt("get")||tt("set"))&&(t=F()),t.type===zn.Punctuator&&"["===t.value&&(r=!0),e=ft(),n||":"!==la.value?q(a,Qr(e,i,n,r)):q(a,Zr(e,r,i)))}function tn(){var e,t,n,a=[],i={},o=X();for(i[na["static"]]=new r,i[na.prototype]=new r,K("{");ca>oa&&!Z("}");)e=en(i),"undefined"!=typeof e&&(a.push(e),t=!e.computed&&ht(e.key),t!==!1&&(n=e["static"]?na["static"]:na.prototype,e.type===Hn.MethodDefinition&&("constructor"!==t||e["static"]||(Hr(e)&&Y(e,Zn.IllegalClassConstructorProperty),i[na.prototype].has("constructor")&&Y(e.key,Zn.IllegalDuplicateClassProperty)),i[n].set(t,!0))));return K("}"),q(o,pa.createClassBody(a))}function rn(){var e,t,r,n=[];for(ia?H("implements"):Q("implements");ca>oa&&(t=X(),e=cr(),r=Z("<")?Wt():null,n.push(q(t,pa.createClassImplements(e,r))),Z(","));)K(",");return n}function nn(){var e,t,r,n,a,i,o=null,s=X();return H("class"),i=ia?et("implements"):tt("implements"),et("extends")||i||Z("{")||(e=cr()),Z("<")&&(a=Vt()),et("extends")&&(H("extends"),r=fa.yieldAllowed,fa.yieldAllowed=!1,o=Lt(),Z("<")&&(n=Wt()),fa.yieldAllowed=r),(ia?et("implements"):tt("implements"))&&(t=rn()),q(s,pa.createClassExpression(e,o,tn(),a,n,t))}function an(){var e,t,r,n,a,i=null,o=X();return H("class"),e=cr(),Z("<")&&(a=Vt()),et("extends")&&(H("extends"),r=fa.yieldAllowed,fa.yieldAllowed=!1,i=Lt(),Z("<")&&(n=Wt()),fa.yieldAllowed=r),(ia?et("implements"):tt("implements"))&&(t=rn()),q(o,pa.createClassDeclaration(e,i,tn(),a,n,t))}function on(){var e;if(la.type===zn.Keyword)switch(la.value){case"const":case"let":return mr(la.value);case"function":return Yr();case"export":return z({},Zn.IllegalExportDeclaration),vr();case"import":return z({},Zn.IllegalImportDeclaration),xr();case"interface":return F().type===zn.Identifier?Rn():Jr();default:return Jr()}if(tt("type")&&F().type===zn.Identifier)return Nn();if(tt("interface")&&F().type===zn.Identifier)return Rn();if(tt("declare"))if(e=F(),e.type===zn.Keyword)switch(e.value){case"class":return Dn();case"function":return jn();case"var":return Bn()}else if(e.type===zn.Identifier&&"module"===e.value)return Un();return la.type!==zn.EOF?Jr():void 0}function sn(){var e="module"===da.sourceType||"nonStrictModule"===da.sourceType;if(e&&la.type===zn.Keyword)switch(la.value){case"export":return vr();case"import":return xr()}return on()}function un(){for(var e,t,r,n,a=[];ca>oa&&(t=la,t.type===zn.StringLiteral)&&(e=sn(),a.push(e),e.expression.type===Hn.Literal);)r=aa.slice(t.range[0]+1,t.range[1]-1),"use strict"===r?(ia=!0,n&&z(n,Zn.StrictOctalLiteral)):!n&&t.octal&&(n=t);for(;ca>oa&&(e=sn(),"undefined"!=typeof e);)a.push(e);return a}function cn(){var e,t=X();return ia="module"===da.sourceType,U(),e=un(),q(t,pa.createProgram(e))}function pn(e){return e.type===Hn.JSXIdentifier?e.name:e.type===Hn.JSXNamespacedName?e.namespace.name+":"+e.name.name:e.type===Hn.JSXMemberExpression?pn(e.object)+"."+pn(e.property):void $(e)}function ln(e){return 92!==e&&u(e)}function fn(e){return 92!==e&&(45===e||c(e))}function dn(){var e,t,r="";for(t=oa;ca>oa&&(e=aa.charCodeAt(oa),fn(e));)r+=aa[oa++];return{type:zn.JSXIdentifier,value:r,lineNumber:sa,lineStart:ua,range:[t,oa]}}function mn(){var e,r,n="",a=oa,i=0;for(e=aa[oa],t("&"===e,"Entity must start with an ampersand"),oa++;ca>oa&&i++<10&&(e=aa[oa++],";"!==e);)n+=e;if(";"===e)if("#"===n[0]){if(r="x"===n[1]?+("0"+n.substr(1)):+n.substr(1).replace(ea.LeadingZeros,""),!isNaN(r))return String.fromCharCode(r)}else if(ra[n])return ra[n];return oa=a+1,"&"}function hn(e){var t,r,n="";for(r=oa;ca>oa&&(t=aa[oa],-1===e.indexOf(t));)"&"===t?n+=mn():(oa++,"\r"===t&&"\n"===aa[oa]&&(n+=t,t=aa[oa],oa++),s(t.charCodeAt(0))&&(++sa,ua=oa),n+=t);return{type:zn.JSXText,value:n,lineNumber:sa,lineStart:ua,range:[r,oa]}}function yn(){var e,r,n;return r=aa[oa],t("'"===r||'"'===r,"String literal must starts with a quote"),n=oa,++oa,e=hn([r]),r!==aa[oa]&&Y({},Zn.UnexpectedToken,"ILLEGAL"),++oa,e.range=[n,oa],e}function gn(){var e=aa.charCodeAt(oa);return 60!==e&&62!==e&&123!==e&&125!==e?hn(["<",">","{","}"]):x()}function vn(){var e,t=X();return la.type!==zn.JSXIdentifier&&$(la),e=B(),q(t,pa.createJSXIdentifier(e.value))}function Sn(){var e,t,r=X();return e=vn(),K(":"),t=vn(),q(r,pa.createJSXNamespacedName(e,t))}function bn(){for(var e=X(),t=vn();Z(".");)B(),t=q(e,pa.createJSXMemberExpression(t,vn()));return t}function En(){return":"===F().value?Sn():"."===F().value?bn():vn()}function wn(){return":"===F().value?Sn():vn()}function xn(){var e,t;return Z("{")?(e=Cn(),e.expression.type===Hn.JSXEmptyExpression&&Y(e,"JSX attributes must only be assigned a non-empty expression")):Z("<")?e=On():la.type===zn.JSXText?(t=X(),e=q(t,pa.createLiteral(B()))):Y({},Zn.InvalidJSXAttributeValue),e}function An(){for(var e=V();"}"!==aa.charAt(oa);)oa++;return q(e,pa.createJSXEmptyExpression())}function Cn(){var e,t,r,n=X();return t=fa.inJSXChild,r=fa.inJSXTag,fa.inJSXChild=!1,fa.inJSXTag=!1,K("{"),e=Z("}")?An():Ft(),fa.inJSXChild=t,fa.inJSXTag=r,K("}"),q(n,pa.createJSXExpressionContainer(e))}function In(){var e,t,r,n=X();return t=fa.inJSXChild,r=fa.inJSXTag,fa.inJSXChild=!1,fa.inJSXTag=!1,K("{"),K("..."),e=Ut(),fa.inJSXChild=t,fa.inJSXTag=r,K("}"),q(n,pa.createJSXSpreadAttribute(e))}function Tn(){var e,t;return Z("{")?In():(t=X(),e=wn(),Z("=")?(B(),q(t,pa.createJSXAttribute(e,xn()))):q(t,pa.createJSXAttribute(e)))}function Ln(){var e,t;return Z("{")?e=Cn():la.type===zn.JSXText?(t=V(),e=q(t,pa.createLiteral(B()))):Z("<")?e=On():$(la),e}function Pn(){var e,t,r,n=X();return t=fa.inJSXChild,r=fa.inJSXTag,fa.inJSXChild=!1,fa.inJSXTag=!0,K("<"),K("/"),e=En(),fa.inJSXChild=t,fa.inJSXTag=r,K(">"),q(n,pa.createJSXClosingElement(e))}function kn(){var e,t,r,n=[],a=!1,i=X();for(t=fa.inJSXChild,r=fa.inJSXTag,fa.inJSXChild=!1,fa.inJSXTag=!0,K("<"),e=En();ca>oa&&"/"!==la.value&&">"!==la.value;)n.push(Tn());return fa.inJSXTag=r,"/"===la.value?(K("/"),fa.inJSXChild=t,K(">"),a=!0):(fa.inJSXChild=!0,K(">")),q(i,pa.createJSXOpeningElement(e,n,a))}function On(){var e,t,r,n=null,a=[],i=X();if(t=fa.inJSXChild,r=fa.inJSXTag,e=kn(),!e.selfClosing){for(;ca>oa&&(fa.inJSXChild=!1,"<"!==la.value||"/"!==F().value);)fa.inJSXChild=!0,a.push(Ln());fa.inJSXChild=t,fa.inJSXTag=r,n=Pn(),pn(n.name)!==pn(e.name)&&Y({},Zn.ExpectedJSXClosingTag,pn(e.name))}return!t&&Z("<")&&Y(la,Zn.AdjacentJSXElements),q(i,pa.createJSXElement(e,n,a))}function Nn(){var e,t,r=X(),n=null;return Q("type"),e=cr(),Z("<")&&(n=Vt()),K("="),t=sr(),ot(),q(r,pa.createTypeAlias(e,n,t))}function _n(){var e,t=X(),r=null;return e=cr(),Z("<")&&(r=Wt()),q(t,pa.createInterfaceExtends(e,r))}function Mn(e,t){var r,n,a,i=[],o=null;if(a=cr(),Z("<")&&(o=Vt()),et("extends"))for(H("extends");ca>oa&&(i.push(_n()),Z(","));)K(",");return n=X(),r=q(n,$t(t)),q(e,pa.createInterface(a,o,r,i))}function Rn(){var e=X();return ia?H("interface"):Q("interface"),Mn(e,!1)}function Dn(){var e,t=X();return Q("declare"),H("class"),e=Mn(t,!0),e.type=Hn.DeclareClass,e}function jn(){var e,t,r,n,a,i,o,s,u=X(),c=null;return Q("declare"),H("function"),t=X(),e=cr(),s=X(),Z("<")&&(c=Vt()),K("("),i=tr(),r=i.params,a=i.rest,K(")"),K(":"),n=sr(),o=q(s,pa.createFunctionTypeAnnotation(r,n,a,c)),e.typeAnnotation=q(s,pa.createTypeAnnotation(o)),q(t,e),ot(),q(u,pa.createDeclareFunction(e))}function Bn(){var e,t=X();return Q("declare"),H("var"),e=pr(),ot(),q(t,pa.createDeclareVariable(e))}function Un(){var e,t,r,n,a=[],i=X();for(Q("declare"),Q("module"),la.type===zn.StringLiteral?(ia&&la.octal&&z(la,Zn.StrictOctalLiteral),r=X(),t=q(r,pa.createLiteral(B()))):t=cr(),e=X(),K("{");ca>oa&&!Z("}");)switch(n=F(),n.value){case"class":a.push(Dn());break;case"function":a.push(jn());break;case"var":a.push(Bn());break;default:$(la)}return K("}"),q(i,pa.createDeclareModule(t,q(e,pa.createBlockStatement(a))))}function Fn(){var e,t,r,n,a;return fa.inJSXChild||g(),e={start:{line:sa,column:oa-ua}},t=da.advance(),e.end={line:sa,column:oa-ua},t.type!==zn.EOF&&(r=[t.range[0],t.range[1]],n=aa.slice(t.range[0],t.range[1]),a={type:$n[t.type],value:n,range:r,loc:e},t.regex&&(a.regex={pattern:t.regex.pattern,flags:t.regex.flags}),da.tokens.push(a)),t}function Jn(){var e,t,r,n;return g(),e=oa,t={start:{line:sa,column:oa-ua}},r=da.scanRegExp(),t.end={line:sa,column:oa-ua},da.tokenize||(da.tokens.length>0&&(n=da.tokens[da.tokens.length-1],n.range[0]===e&&"Punctuator"===n.type&&("/"===n.value||"/="===n.value)&&da.tokens.pop()),da.tokens.push({type:"RegularExpression",value:r.literal,regex:r.regex,range:[e,oa],loc:t})),r}function Xn(){var e,t,r,n=[];for(e=0;e<da.tokens.length;++e)t=da.tokens[e],r={type:t.type,value:t.value},t.regex&&(r.regex={pattern:t.regex.pattern,flags:t.regex.flags}),da.range&&(r.range=t.range),da.loc&&(r.loc=t.loc),n.push(r);da.tokens=n}function Vn(){"undefined"!=typeof da.tokens&&(da.advance=j,da.scanRegExp=M,j=Fn,M=Jn)}function Wn(){"function"==typeof da.scanRegExp&&(j=da.advance,M=da.scanRegExp)}function qn(e,t){var r,n={};for(r in e)e.hasOwnProperty(r)&&(n[r]=e[r]);for(r in t)t.hasOwnProperty(r)&&(n[r]=t[r]);return n}function Gn(e,t){var n,a,i;n=String,"string"==typeof e||e instanceof String||(e=n(e)),pa=ta,aa=e,oa=0,sa=aa.length>0?1:0,ua=0,ca=aa.length,la=null,fa={allowKeyword:!0,allowIn:!0,labelSet:new r,inFunctionBody:!1,inIteration:!1,inSwitch:!1,lastCommentStart:-1},da={},t=t||{},t.tokens=!0,da.tokens=[],da.tokenize=!0,da.openParenToken=-1,da.openCurlyToken=-1,da.range="boolean"==typeof t.range&&t.range,da.loc="boolean"==typeof t.loc&&t.loc,"boolean"==typeof t.comment&&t.comment&&(da.comments=[]),"boolean"==typeof t.tolerant&&t.tolerant&&(da.errors=[]),Vn();try{if(U(),la.type===zn.EOF)return da.tokens;for(a=B();la.type!==zn.EOF;)try{a=B()}catch(o){if(a=la,da.errors){da.errors.push(o);break}throw o}Xn(),i=da.tokens,"undefined"!=typeof da.comments&&(i.comments=da.comments),"undefined"!=typeof da.errors&&(i.errors=da.errors)}catch(s){throw s}finally{Wn(),da={}}return i}function Yn(e,t){var n,a;a=String,"string"==typeof e||e instanceof String||(e=a(e)),pa=ta,aa=e,oa=0,sa=aa.length>0?1:0,ua=0,ca=aa.length,la=null,fa={allowKeyword:!1,allowIn:!0,labelSet:new r,parenthesizedCount:0,inFunctionBody:!1,inIteration:!1,inSwitch:!1,inJSXChild:!1,inJSXTag:!1,inType:!1,lastCommentStart:-1,yieldAllowed:!1,awaitAllowed:!1},da={},"undefined"!=typeof t&&(da.range="boolean"==typeof t.range&&t.range,da.loc="boolean"==typeof t.loc&&t.loc,da.attachComment="boolean"==typeof t.attachComment&&t.attachComment,da.loc&&null!==t.source&&void 0!==t.source&&(pa=qn(pa,{postProcess:function(e){return e.loc.source=a(t.source),e}})),da.sourceType=t.sourceType,"boolean"==typeof t.tokens&&t.tokens&&(da.tokens=[]),"boolean"==typeof t.comment&&t.comment&&(da.comments=[]),"boolean"==typeof t.tolerant&&t.tolerant&&(da.errors=[]),da.attachComment&&(da.range=!0,da.comments=[],da.bottomRightStack=[],da.trailingComments=[],da.leadingComments=[])),Vn();try{n=cn(),"undefined"!=typeof da.comments&&(n.comments=da.comments),"undefined"!=typeof da.tokens&&(Xn(),n.tokens=da.tokens),"undefined"!=typeof da.errors&&(n.errors=da.errors)}catch(i){throw i}finally{Wn(),da={}}return n}var zn,$n,Kn,Hn,Qn,Zn,ea,ta,ra,na,aa,ia,oa,sa,ua,ca,pa,la,fa,da;zn={BooleanLiteral:1,EOF:2,Identifier:3,Keyword:4,NullLiteral:5,NumericLiteral:6,Punctuator:7,StringLiteral:8,RegularExpression:9,Template:10,JSXIdentifier:11,JSXText:12},$n={},$n[zn.BooleanLiteral]="Boolean",$n[zn.EOF]="<end>",$n[zn.Identifier]="Identifier",$n[zn.Keyword]="Keyword",$n[zn.NullLiteral]="Null",$n[zn.NumericLiteral]="Numeric",$n[zn.Punctuator]="Punctuator",$n[zn.StringLiteral]="String",$n[zn.JSXIdentifier]="JSXIdentifier",$n[zn.JSXText]="JSXText",$n[zn.RegularExpression]="RegularExpression",Kn=["(","{","[","in","typeof","instanceof","new","return","case","delete","throw","void","=","+=","-=","*=","/=","%=","<<=",">>=",">>>=","&=","|=","^=",",","+","-","*","/","%","++","--","<<",">>",">>>","&","|","^","!","~","&&","||","?",":","===","==",">=","<=","<",">","!=","!=="],Hn={AnyTypeAnnotation:"AnyTypeAnnotation",ArrayExpression:"ArrayExpression",ArrayPattern:"ArrayPattern",ArrayTypeAnnotation:"ArrayTypeAnnotation",ArrowFunctionExpression:"ArrowFunctionExpression",AssignmentExpression:"AssignmentExpression",BinaryExpression:"BinaryExpression",BlockStatement:"BlockStatement",BooleanTypeAnnotation:"BooleanTypeAnnotation",BreakStatement:"BreakStatement",CallExpression:"CallExpression",CatchClause:"CatchClause",ClassBody:"ClassBody",ClassDeclaration:"ClassDeclaration",ClassExpression:"ClassExpression",ClassImplements:"ClassImplements",ClassProperty:"ClassProperty",ComprehensionBlock:"ComprehensionBlock",ComprehensionExpression:"ComprehensionExpression",ConditionalExpression:"ConditionalExpression",ContinueStatement:"ContinueStatement",DebuggerStatement:"DebuggerStatement",DeclareClass:"DeclareClass",DeclareFunction:"DeclareFunction",DeclareModule:"DeclareModule",DeclareVariable:"DeclareVariable",DoWhileStatement:"DoWhileStatement",EmptyStatement:"EmptyStatement",ExportDeclaration:"ExportDeclaration",ExportBatchSpecifier:"ExportBatchSpecifier",ExportSpecifier:"ExportSpecifier",ExpressionStatement:"ExpressionStatement",ForInStatement:"ForInStatement",ForOfStatement:"ForOfStatement",ForStatement:"ForStatement",FunctionDeclaration:"FunctionDeclaration",FunctionExpression:"FunctionExpression",FunctionTypeAnnotation:"FunctionTypeAnnotation",FunctionTypeParam:"FunctionTypeParam",GenericTypeAnnotation:"GenericTypeAnnotation",Identifier:"Identifier",IfStatement:"IfStatement",ImportDeclaration:"ImportDeclaration",ImportDefaultSpecifier:"ImportDefaultSpecifier",ImportNamespaceSpecifier:"ImportNamespaceSpecifier",ImportSpecifier:"ImportSpecifier",InterfaceDeclaration:"InterfaceDeclaration",InterfaceExtends:"InterfaceExtends",IntersectionTypeAnnotation:"IntersectionTypeAnnotation",LabeledStatement:"LabeledStatement",Literal:"Literal",LogicalExpression:"LogicalExpression",MemberExpression:"MemberExpression",MethodDefinition:"MethodDefinition",ModuleSpecifier:"ModuleSpecifier",NewExpression:"NewExpression",NullableTypeAnnotation:"NullableTypeAnnotation",NumberTypeAnnotation:"NumberTypeAnnotation",ObjectExpression:"ObjectExpression",ObjectPattern:"ObjectPattern",ObjectTypeAnnotation:"ObjectTypeAnnotation",ObjectTypeCallProperty:"ObjectTypeCallProperty",ObjectTypeIndexer:"ObjectTypeIndexer",ObjectTypeProperty:"ObjectTypeProperty",Program:"Program",Property:"Property",QualifiedTypeIdentifier:"QualifiedTypeIdentifier",ReturnStatement:"ReturnStatement",SequenceExpression:"SequenceExpression",SpreadElement:"SpreadElement",SpreadProperty:"SpreadProperty",StringLiteralTypeAnnotation:"StringLiteralTypeAnnotation",StringTypeAnnotation:"StringTypeAnnotation",SwitchCase:"SwitchCase",SwitchStatement:"SwitchStatement",TaggedTemplateExpression:"TaggedTemplateExpression",TemplateElement:"TemplateElement",TemplateLiteral:"TemplateLiteral",ThisExpression:"ThisExpression",ThrowStatement:"ThrowStatement",TupleTypeAnnotation:"TupleTypeAnnotation",TryStatement:"TryStatement",TypeAlias:"TypeAlias",TypeAnnotation:"TypeAnnotation",TypeCastExpression:"TypeCastExpression",TypeofTypeAnnotation:"TypeofTypeAnnotation",TypeParameterDeclaration:"TypeParameterDeclaration",TypeParameterInstantiation:"TypeParameterInstantiation",UnaryExpression:"UnaryExpression",UnionTypeAnnotation:"UnionTypeAnnotation",UpdateExpression:"UpdateExpression",VariableDeclaration:"VariableDeclaration",VariableDeclarator:"VariableDeclarator",VoidTypeAnnotation:"VoidTypeAnnotation",WhileStatement:"WhileStatement",WithStatement:"WithStatement",JSXIdentifier:"JSXIdentifier",JSXNamespacedName:"JSXNamespacedName",JSXMemberExpression:"JSXMemberExpression",JSXEmptyExpression:"JSXEmptyExpression",JSXExpressionContainer:"JSXExpressionContainer",JSXElement:"JSXElement",JSXClosingElement:"JSXClosingElement",JSXOpeningElement:"JSXOpeningElement",JSXAttribute:"JSXAttribute",JSXSpreadAttribute:"JSXSpreadAttribute",JSXText:"JSXText",YieldExpression:"YieldExpression",AwaitExpression:"AwaitExpression"},Qn={Data:1,Get:2,Set:4},na={"static":"static",prototype:"prototype"},Zn={UnexpectedToken:"Unexpected token %0",UnexpectedNumber:"Unexpected number",UnexpectedString:"Unexpected string",UnexpectedIdentifier:"Unexpected identifier",UnexpectedReserved:"Unexpected reserved word",UnexpectedTemplate:"Unexpected quasi %0",UnexpectedEOS:"Unexpected end of input",NewlineAfterThrow:"Illegal newline after throw",InvalidRegExp:"Invalid regular expression",UnterminatedRegExp:"Invalid regular expression: missing /",InvalidLHSInAssignment:"Invalid left-hand side in assignment",InvalidLHSInFormalsList:"Invalid left-hand side in formals list",InvalidLHSInForIn:"Invalid left-hand side in for-in",MultipleDefaultsInSwitch:"More than one default clause in switch statement",NoCatchOrFinally:"Missing catch or finally after try",UnknownLabel:"Undefined label '%0'",Redeclaration:"%0 '%1' has already been declared",IllegalContinue:"Illegal continue statement",IllegalBreak:"Illegal break statement",IllegalDuplicateClassProperty:"Illegal duplicate property in class definition",IllegalClassConstructorProperty:"Illegal constructor property in class definition",IllegalReturn:"Illegal return statement",IllegalSpread:"Illegal spread element",StrictModeWith:"Strict mode code may not include a with statement",StrictCatchVariable:"Catch variable may not be eval or arguments in strict mode",StrictVarName:"Variable name may not be eval or arguments in strict mode",StrictParamName:"Parameter name eval or arguments is not allowed in strict mode",StrictParamDupe:"Strict mode function may not have duplicate parameter names",ParameterAfterRestParameter:"Rest parameter must be final parameter of an argument list",DefaultRestParameter:"Rest parameter can not have a default value",ElementAfterSpreadElement:"Spread must be the final element of an element list",PropertyAfterSpreadProperty:"A rest property must be the final property of an object literal",ObjectPatternAsRestParameter:"Invalid rest parameter",ObjectPatternAsSpread:"Invalid spread argument",StrictFunctionName:"Function name may not be eval or arguments in strict mode",StrictOctalLiteral:"Octal literals are not allowed in strict mode.",StrictDelete:"Delete of an unqualified identifier in strict mode.",StrictDuplicateProperty:"Duplicate data property in object literal not allowed in strict mode",AccessorDataProperty:"Object literal may not have data and accessor property with the same name",AccessorGetSet:"Object literal may not have multiple get/set accessors with the same name",StrictLHSAssignment:"Assignment to eval or arguments is not allowed in strict mode",StrictLHSPostfix:"Postfix increment/decrement may not have eval or arguments operand in strict mode",StrictLHSPrefix:"Prefix increment/decrement may not have eval or arguments operand in strict mode",StrictReservedWord:"Use of future reserved word in strict mode",MissingFromClause:"Missing from clause",NoAsAfterImportNamespace:"Missing as after import *",InvalidModuleSpecifier:"Invalid module specifier",IllegalImportDeclaration:"Illegal import declaration",IllegalExportDeclaration:"Illegal export declaration",NoUninitializedConst:"Const must be initialized",ComprehensionRequiresBlock:"Comprehension must have at least one block",ComprehensionError:"Comprehension Error",EachNotAllowed:"Each is not supported",InvalidJSXAttributeValue:"JSX value should be either an expression or a quoted JSX text",ExpectedJSXClosingTag:"Expected corresponding JSX closing tag for %0",AdjacentJSXElements:"Adjacent JSX elements must be wrapped in an enclosing tag",ConfusedAboutFunctionType:"Unexpected token =>. It looks like you are trying to write a function type, but you ended up writing a grouped type followed by an =>, which is a syntax error. Remember, function type parameters are named so function types look like (name1: type1, name2: type2) => returnType. You probably wrote (type1) => returnType"},ea={NonAsciiIdentifierStart:new RegExp("[ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ]"),NonAsciiIdentifierPart:new RegExp("[ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮ̀-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧԱ-Ֆՙա-և֑-ׇֽֿׁׂׅׄא-תװ-ײؐ-ؚؠ-٩ٮ-ۓە-ۜ۟-۪ۨ-ۼۿܐ-݊ݍ-ޱ߀-ߵߺࠀ-࠭ࡀ-࡛ࢠࢢ-ࢬࣤ-ࣾऀ-ॣ०-९ॱ-ॷॹ-ॿঁ-ঃঅ-ঌএঐও-নপ-রলশ-হ়-ৄেৈো-ৎৗড়ঢ়য়-ৣ০-ৱਁ-ਃਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹ਼ਾ-ੂੇੈੋ-੍ੑਖ਼-ੜਫ਼੦-ੵઁ-ઃઅ-ઍએ-ઑઓ-નપ-રલળવ-હ઼-ૅે-ૉો-્ૐૠ-ૣ૦-૯ଁ-ଃଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହ଼-ୄେୈୋ-୍ୖୗଡ଼ଢ଼ୟ-ୣ୦-୯ୱஂஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹா-ூெ-ைொ-்ௐௗ௦-௯ఁ-ఃఅ-ఌఎ-ఐఒ-నప-ళవ-హఽ-ౄె-ైొ-్ౕౖౘౙౠ-ౣ౦-౯ಂಃಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹ಼-ೄೆ-ೈೊ-್ೕೖೞೠ-ೣ೦-೯ೱೲംഃഅ-ഌഎ-ഐഒ-ഺഽ-ൄെ-ൈൊ-ൎൗൠ-ൣ൦-൯ൺ-ൿංඃඅ-ඖක-නඳ-රලව-ෆ්ා-ුූෘ-ෟෲෳก-ฺเ-๎๐-๙ກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ູົ-ຽເ-ໄໆ່-ໍ໐-໙ໜ-ໟༀ༘༙༠-༩༹༵༷༾-ཇཉ-ཬཱ-྄྆-ྗྙ-ྼ࿆က-၉ၐ-ႝႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚ፝-፟ᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-᜔ᜠ-᜴ᝀ-ᝓᝠ-ᝬᝮ-ᝰᝲᝳក-៓ៗៜ៝០-៩᠋-᠍᠐-᠙ᠠ-ᡷᢀ-ᢪᢰ-ᣵᤀ-ᤜᤠ-ᤫᤰ-᤻᥆-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉ᧐-᧙ᨀ-ᨛᨠ-ᩞ᩠-᩿᩼-᪉᪐-᪙ᪧᬀ-ᭋ᭐-᭙᭫-᭳ᮀ-᯳ᰀ-᰷᱀-᱉ᱍ-ᱽ᳐-᳔᳒-ᳶᴀ-ᷦ᷼-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ‌‍‿⁀⁔ⁱⁿₐ-ₜ⃐-⃥⃜⃡-⃰ℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯ⵿-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⷠ-ⷿⸯ々-〇〡-〯〱-〵〸-〼ぁ-ゖ゙゚ゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘫꙀ-꙯ꙴ-꙽ꙿ-ꚗꚟ-꛱ꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠧꡀ-ꡳꢀ-꣄꣐-꣙꣠-ꣷꣻ꤀-꤭ꤰ-꥓ꥠ-ꥼꦀ-꧀ꧏ-꧙ꨀ-ꨶꩀ-ꩍ꩐-꩙ꩠ-ꩶꩺꩻꪀ-ꫂꫛ-ꫝꫠ-ꫯꫲ-꫶ꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯪ꯬꯭꯰-꯹가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻ︀-️︠-︦︳︴﹍-﹏ﹰ-ﹴﹶ-ﻼ０-９Ａ-Ｚ＿ａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ]"),LeadingZeros:new RegExp("^0+(?!$)")},r.prototype.get=function(e){return e="$"+e,this.$data[e]},r.prototype.set=function(e,t){return e="$"+e,this.$data[e]=t,this},r.prototype.has=function(e){return e="$"+e,Object.prototype.hasOwnProperty.call(this.$data,e)},r.prototype["delete"]=function(e){return e="$"+e,delete this.$data[e]},ta={name:"SyntaxTree",postProcess:function(e){return e},createArrayExpression:function(e){return{type:Hn.ArrayExpression,elements:e}},createAssignmentExpression:function(e,t,r){return{type:Hn.AssignmentExpression,operator:e,left:t,right:r}},createBinaryExpression:function(e,t,r){var n="||"===e||"&&"===e?Hn.LogicalExpression:Hn.BinaryExpression;return{type:n,operator:e,left:t,right:r}},createBlockStatement:function(e){return{type:Hn.BlockStatement,body:e}},createBreakStatement:function(e){return{type:Hn.BreakStatement,label:e}},createCallExpression:function(e,t){return{type:Hn.CallExpression,callee:e,arguments:t}},createCatchClause:function(e,t){return{type:Hn.CatchClause,param:e,body:t}},createConditionalExpression:function(e,t,r){return{type:Hn.ConditionalExpression,test:e,consequent:t,alternate:r}},createContinueStatement:function(e){return{type:Hn.ContinueStatement,label:e}},createDebuggerStatement:function(){return{type:Hn.DebuggerStatement}},createDoWhileStatement:function(e,t){return{type:Hn.DoWhileStatement,body:e,test:t}},createEmptyStatement:function(){return{type:Hn.EmptyStatement}},createExpressionStatement:function(e){return{type:Hn.ExpressionStatement,expression:e}},createForStatement:function(e,t,r,n){return{type:Hn.ForStatement,init:e,test:t,update:r,body:n}},createForInStatement:function(e,t,r){return{type:Hn.ForInStatement,left:e,right:t,body:r,each:!1}},createForOfStatement:function(e,t,r){return{type:Hn.ForOfStatement,left:e,right:t,body:r}},createFunctionDeclaration:function(e,t,r,n,a,i,o,s,u,c){var p={type:Hn.FunctionDeclaration,id:e,params:t,defaults:r,body:n,rest:a,generator:i,expression:o,returnType:u,typeParameters:c};return s&&(p.async=!0),p},createFunctionExpression:function(e,t,r,n,a,i,o,s,u,c){var p={type:Hn.FunctionExpression,id:e,params:t,defaults:r,body:n,rest:a,generator:i,expression:o,returnType:u,typeParameters:c};return s&&(p.async=!0),p},createIdentifier:function(e){return{type:Hn.Identifier,name:e,typeAnnotation:void 0,optional:void 0}},createTypeAnnotation:function(e){return{type:Hn.TypeAnnotation,typeAnnotation:e}},createTypeCast:function(e,t){return{type:Hn.TypeCastExpression,expression:e,typeAnnotation:t}},createFunctionTypeAnnotation:function(e,t,r,n){return{type:Hn.FunctionTypeAnnotation,params:e,returnType:t,rest:r,typeParameters:n}},createFunctionTypeParam:function(e,t,r){return{type:Hn.FunctionTypeParam,name:e,typeAnnotation:t,optional:r}},createNullableTypeAnnotation:function(e){return{type:Hn.NullableTypeAnnotation,typeAnnotation:e}},createArrayTypeAnnotation:function(e){return{type:Hn.ArrayTypeAnnotation,elementType:e}},createGenericTypeAnnotation:function(e,t){return{type:Hn.GenericTypeAnnotation,id:e,typeParameters:t}},createQualifiedTypeIdentifier:function(e,t){return{type:Hn.QualifiedTypeIdentifier,qualification:e,id:t}},createTypeParameterDeclaration:function(e){return{type:Hn.TypeParameterDeclaration,params:e}},createTypeParameterInstantiation:function(e){return{type:Hn.TypeParameterInstantiation,params:e}},createAnyTypeAnnotation:function(){return{type:Hn.AnyTypeAnnotation}},createBooleanTypeAnnotation:function(){return{type:Hn.BooleanTypeAnnotation}},createNumberTypeAnnotation:function(){return{type:Hn.NumberTypeAnnotation}},createStringTypeAnnotation:function(){return{type:Hn.StringTypeAnnotation}},createStringLiteralTypeAnnotation:function(e){return{type:Hn.StringLiteralTypeAnnotation,value:e.value,raw:aa.slice(e.range[0],e.range[1])}
},createVoidTypeAnnotation:function(){return{type:Hn.VoidTypeAnnotation}},createTypeofTypeAnnotation:function(e){return{type:Hn.TypeofTypeAnnotation,argument:e}},createTupleTypeAnnotation:function(e){return{type:Hn.TupleTypeAnnotation,types:e}},createObjectTypeAnnotation:function(e,t,r){return{type:Hn.ObjectTypeAnnotation,properties:e,indexers:t,callProperties:r}},createObjectTypeIndexer:function(e,t,r,n){return{type:Hn.ObjectTypeIndexer,id:e,key:t,value:r,"static":n}},createObjectTypeCallProperty:function(e,t){return{type:Hn.ObjectTypeCallProperty,value:e,"static":t}},createObjectTypeProperty:function(e,t,r,n){return{type:Hn.ObjectTypeProperty,key:e,value:t,optional:r,"static":n}},createUnionTypeAnnotation:function(e){return{type:Hn.UnionTypeAnnotation,types:e}},createIntersectionTypeAnnotation:function(e){return{type:Hn.IntersectionTypeAnnotation,types:e}},createTypeAlias:function(e,t,r){return{type:Hn.TypeAlias,id:e,typeParameters:t,right:r}},createInterface:function(e,t,r,n){return{type:Hn.InterfaceDeclaration,id:e,typeParameters:t,body:r,"extends":n}},createInterfaceExtends:function(e,t){return{type:Hn.InterfaceExtends,id:e,typeParameters:t}},createDeclareFunction:function(e){return{type:Hn.DeclareFunction,id:e}},createDeclareVariable:function(e){return{type:Hn.DeclareVariable,id:e}},createDeclareModule:function(e,t){return{type:Hn.DeclareModule,id:e,body:t}},createJSXAttribute:function(e,t){return{type:Hn.JSXAttribute,name:e,value:t||null}},createJSXSpreadAttribute:function(e){return{type:Hn.JSXSpreadAttribute,argument:e}},createJSXIdentifier:function(e){return{type:Hn.JSXIdentifier,name:e}},createJSXNamespacedName:function(e,t){return{type:Hn.JSXNamespacedName,namespace:e,name:t}},createJSXMemberExpression:function(e,t){return{type:Hn.JSXMemberExpression,object:e,property:t}},createJSXElement:function(e,t,r){return{type:Hn.JSXElement,openingElement:e,closingElement:t,children:r}},createJSXEmptyExpression:function(){return{type:Hn.JSXEmptyExpression}},createJSXExpressionContainer:function(e){return{type:Hn.JSXExpressionContainer,expression:e}},createJSXOpeningElement:function(e,t,r){return{type:Hn.JSXOpeningElement,name:e,selfClosing:r,attributes:t}},createJSXClosingElement:function(e){return{type:Hn.JSXClosingElement,name:e}},createIfStatement:function(e,t,r){return{type:Hn.IfStatement,test:e,consequent:t,alternate:r}},createLabeledStatement:function(e,t){return{type:Hn.LabeledStatement,label:e,body:t}},createLiteral:function(e){var t={type:Hn.Literal,value:e.value,raw:aa.slice(e.range[0],e.range[1])};return e.regex&&(t.regex=e.regex),t},createMemberExpression:function(e,t,r){return{type:Hn.MemberExpression,computed:"["===e,object:t,property:r}},createNewExpression:function(e,t){return{type:Hn.NewExpression,callee:e,arguments:t}},createObjectExpression:function(e){return{type:Hn.ObjectExpression,properties:e}},createPostfixExpression:function(e,t){return{type:Hn.UpdateExpression,operator:e,argument:t,prefix:!1}},createProgram:function(e){return{type:Hn.Program,body:e}},createProperty:function(e,t,r,n,a,i){return{type:Hn.Property,key:t,value:r,kind:e,method:n,shorthand:a,computed:i}},createReturnStatement:function(e){return{type:Hn.ReturnStatement,argument:e}},createSequenceExpression:function(e){return{type:Hn.SequenceExpression,expressions:e}},createSwitchCase:function(e,t){return{type:Hn.SwitchCase,test:e,consequent:t}},createSwitchStatement:function(e,t){return{type:Hn.SwitchStatement,discriminant:e,cases:t}},createThisExpression:function(){return{type:Hn.ThisExpression}},createThrowStatement:function(e){return{type:Hn.ThrowStatement,argument:e}},createTryStatement:function(e,t,r,n){return{type:Hn.TryStatement,block:e,guardedHandlers:t,handlers:r,finalizer:n}},createUnaryExpression:function(e,t){return"++"===e||"--"===e?{type:Hn.UpdateExpression,operator:e,argument:t,prefix:!0}:{type:Hn.UnaryExpression,operator:e,argument:t,prefix:!0}},createVariableDeclaration:function(e,t){return{type:Hn.VariableDeclaration,declarations:e,kind:t}},createVariableDeclarator:function(e,t){return{type:Hn.VariableDeclarator,id:e,init:t}},createWhileStatement:function(e,t){return{type:Hn.WhileStatement,test:e,body:t}},createWithStatement:function(e,t){return{type:Hn.WithStatement,object:e,body:t}},createTemplateElement:function(e,t){return{type:Hn.TemplateElement,value:e,tail:t}},createTemplateLiteral:function(e,t){return{type:Hn.TemplateLiteral,quasis:e,expressions:t}},createSpreadElement:function(e){return{type:Hn.SpreadElement,argument:e}},createSpreadProperty:function(e){return{type:Hn.SpreadProperty,argument:e}},createTaggedTemplateExpression:function(e,t){return{type:Hn.TaggedTemplateExpression,tag:e,quasi:t}},createArrowFunctionExpression:function(e,t,r,n,a,i){var o={type:Hn.ArrowFunctionExpression,id:null,params:e,defaults:t,body:r,rest:n,generator:!1,expression:a};return i&&(o.async=!0),o},createMethodDefinition:function(e,t,r,n,a){return{type:Hn.MethodDefinition,key:r,value:n,kind:t,"static":e===na["static"],computed:a}},createClassProperty:function(e,t,r,n){return{type:Hn.ClassProperty,key:e,typeAnnotation:t,computed:r,"static":n}},createClassBody:function(e){return{type:Hn.ClassBody,body:e}},createClassImplements:function(e,t){return{type:Hn.ClassImplements,id:e,typeParameters:t}},createClassExpression:function(e,t,r,n,a,i){return{type:Hn.ClassExpression,id:e,superClass:t,body:r,typeParameters:n,superTypeParameters:a,"implements":i}},createClassDeclaration:function(e,t,r,n,a,i){return{type:Hn.ClassDeclaration,id:e,superClass:t,body:r,typeParameters:n,superTypeParameters:a,"implements":i}},createModuleSpecifier:function(e){return{type:Hn.ModuleSpecifier,value:e.value,raw:aa.slice(e.range[0],e.range[1])}},createExportSpecifier:function(e,t){return{type:Hn.ExportSpecifier,id:e,name:t}},createExportBatchSpecifier:function(){return{type:Hn.ExportBatchSpecifier}},createImportDefaultSpecifier:function(e){return{type:Hn.ImportDefaultSpecifier,id:e}},createImportNamespaceSpecifier:function(e){return{type:Hn.ImportNamespaceSpecifier,id:e}},createExportDeclaration:function(e,t,r,n){return{type:Hn.ExportDeclaration,"default":!!e,declaration:t,specifiers:r,source:n}},createImportSpecifier:function(e,t){return{type:Hn.ImportSpecifier,id:e,name:t}},createImportDeclaration:function(e,t,r){return{type:Hn.ImportDeclaration,specifiers:e,source:t,isType:r}},createYieldExpression:function(e,t){return{type:Hn.YieldExpression,argument:e,delegate:t}},createAwaitExpression:function(e){return{type:Hn.AwaitExpression,argument:e}},createComprehensionExpression:function(e,t,r){return{type:Hn.ComprehensionExpression,filter:e,blocks:t,body:r}}},ra={quot:'"',amp:"&",apos:"'",lt:"<",gt:">",nbsp:" ",iexcl:"¡",cent:"¢",pound:"£",curren:"¤",yen:"¥",brvbar:"¦",sect:"§",uml:"¨",copy:"©",ordf:"ª",laquo:"«",not:"¬",shy:"­",reg:"®",macr:"¯",deg:"°",plusmn:"±",sup2:"²",sup3:"³",acute:"´",micro:"µ",para:"¶",middot:"·",cedil:"¸",sup1:"¹",ordm:"º",raquo:"»",frac14:"¼",frac12:"½",frac34:"¾",iquest:"¿",Agrave:"À",Aacute:"Á",Acirc:"Â",Atilde:"Ã",Auml:"Ä",Aring:"Å",AElig:"Æ",Ccedil:"Ç",Egrave:"È",Eacute:"É",Ecirc:"Ê",Euml:"Ë",Igrave:"Ì",Iacute:"Í",Icirc:"Î",Iuml:"Ï",ETH:"Ð",Ntilde:"Ñ",Ograve:"Ò",Oacute:"Ó",Ocirc:"Ô",Otilde:"Õ",Ouml:"Ö",times:"×",Oslash:"Ø",Ugrave:"Ù",Uacute:"Ú",Ucirc:"Û",Uuml:"Ü",Yacute:"Ý",THORN:"Þ",szlig:"ß",agrave:"à",aacute:"á",acirc:"â",atilde:"ã",auml:"ä",aring:"å",aelig:"æ",ccedil:"ç",egrave:"è",eacute:"é",ecirc:"ê",euml:"ë",igrave:"ì",iacute:"í",icirc:"î",iuml:"ï",eth:"ð",ntilde:"ñ",ograve:"ò",oacute:"ó",ocirc:"ô",otilde:"õ",ouml:"ö",divide:"÷",oslash:"ø",ugrave:"ù",uacute:"ú",ucirc:"û",uuml:"ü",yacute:"ý",thorn:"þ",yuml:"ÿ",OElig:"Œ",oelig:"œ",Scaron:"Š",scaron:"š",Yuml:"Ÿ",fnof:"ƒ",circ:"ˆ",tilde:"˜",Alpha:"Α",Beta:"Β",Gamma:"Γ",Delta:"Δ",Epsilon:"Ε",Zeta:"Ζ",Eta:"Η",Theta:"Θ",Iota:"Ι",Kappa:"Κ",Lambda:"Λ",Mu:"Μ",Nu:"Ν",Xi:"Ξ",Omicron:"Ο",Pi:"Π",Rho:"Ρ",Sigma:"Σ",Tau:"Τ",Upsilon:"Υ",Phi:"Φ",Chi:"Χ",Psi:"Ψ",Omega:"Ω",alpha:"α",beta:"β",gamma:"γ",delta:"δ",epsilon:"ε",zeta:"ζ",eta:"η",theta:"θ",iota:"ι",kappa:"κ",lambda:"λ",mu:"μ",nu:"ν",xi:"ξ",omicron:"ο",pi:"π",rho:"ρ",sigmaf:"ς",sigma:"σ",tau:"τ",upsilon:"υ",phi:"φ",chi:"χ",psi:"ψ",omega:"ω",thetasym:"ϑ",upsih:"ϒ",piv:"ϖ",ensp:" ",emsp:" ",thinsp:" ",zwnj:"‌",zwj:"‍",lrm:"‎",rlm:"‏",ndash:"–",mdash:"—",lsquo:"‘",rsquo:"’",sbquo:"‚",ldquo:"“",rdquo:"”",bdquo:"„",dagger:"†",Dagger:"‡",bull:"•",hellip:"…",permil:"‰",prime:"′",Prime:"″",lsaquo:"‹",rsaquo:"›",oline:"‾",frasl:"⁄",euro:"€",image:"ℑ",weierp:"℘",real:"ℜ",trade:"™",alefsym:"ℵ",larr:"←",uarr:"↑",rarr:"→",darr:"↓",harr:"↔",crarr:"↵",lArr:"⇐",uArr:"⇑",rArr:"⇒",dArr:"⇓",hArr:"⇔",forall:"∀",part:"∂",exist:"∃",empty:"∅",nabla:"∇",isin:"∈",notin:"∉",ni:"∋",prod:"∏",sum:"∑",minus:"−",lowast:"∗",radic:"√",prop:"∝",infin:"∞",ang:"∠",and:"∧",or:"∨",cap:"∩",cup:"∪","int":"∫",there4:"∴",sim:"∼",cong:"≅",asymp:"≈",ne:"≠",equiv:"≡",le:"≤",ge:"≥",sub:"⊂",sup:"⊃",nsub:"⊄",sube:"⊆",supe:"⊇",oplus:"⊕",otimes:"⊗",perp:"⊥",sdot:"⋅",lceil:"⌈",rceil:"⌉",lfloor:"⌊",rfloor:"⌋",lang:"〈",rang:"〉",loz:"◊",spades:"♠",clubs:"♣",hearts:"♥",diams:"♦"},e.version="13001.1001.0-dev-harmony-fb",e.tokenize=Gn,e.parse=Yn,e.Syntax=function(){var e,t={};"function"==typeof Object.create&&(t=Object.create(null));for(e in Hn)Hn.hasOwnProperty(e)&&(t[e]=Hn[e]);return"function"==typeof Object.freeze&&Object.freeze(t),t}()})},{}],10:[function(e,t){var r=function(e){return e.chars=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],e.encode=function(e){if(0===e)return"0";for(var t="";e>0;)t=this.chars[e%62]+t,e=Math.floor(e/62);return t},e.decode=function(e,t,r,n){for(t=r=(e===(/\W|_|^$/.test(e+="")||e))-1;n=e.charCodeAt(r++);)t=62*t+n-[,48,29,87][n>>5];return t},e}({});t.exports=r},{}],11:[function(e,t,r){r.SourceMapGenerator=e("./source-map/source-map-generator").SourceMapGenerator,r.SourceMapConsumer=e("./source-map/source-map-consumer").SourceMapConsumer,r.SourceNode=e("./source-map/source-node").SourceNode},{"./source-map/source-map-consumer":16,"./source-map/source-map-generator":17,"./source-map/source-node":18}],12:[function(e,t){if("function"!=typeof r)var r=e("amdefine")(t,e);r(function(e,t){function r(){this._array=[],this._set={}}var n=e("./util");r.fromArray=function(e,t){for(var n=new r,a=0,i=e.length;i>a;a++)n.add(e[a],t);return n},r.prototype.add=function(e,t){var r=this.has(e),a=this._array.length;(!r||t)&&this._array.push(e),r||(this._set[n.toSetString(e)]=a)},r.prototype.has=function(e){return Object.prototype.hasOwnProperty.call(this._set,n.toSetString(e))},r.prototype.indexOf=function(e){if(this.has(e))return this._set[n.toSetString(e)];throw new Error('"'+e+'" is not in the set.')},r.prototype.at=function(e){if(e>=0&&e<this._array.length)return this._array[e];throw new Error("No element indexed by "+e)},r.prototype.toArray=function(){return this._array.slice()},t.ArraySet=r})},{"./util":19,amdefine:20}],13:[function(e,t){if("function"!=typeof r)var r=e("amdefine")(t,e);r(function(e,t){function r(e){return 0>e?(-e<<1)+1:(e<<1)+0}function n(e){var t=1===(1&e),r=e>>1;return t?-r:r}var a=e("./base64"),i=5,o=1<<i,s=o-1,u=o;t.encode=function(e){var t,n="",o=r(e);do t=o&s,o>>>=i,o>0&&(t|=u),n+=a.encode(t);while(o>0);return n},t.decode=function(e){var t,r,o=0,c=e.length,p=0,l=0;do{if(o>=c)throw new Error("Expected more digits in base 64 VLQ value.");r=a.decode(e.charAt(o++)),t=!!(r&u),r&=s,p+=r<<l,l+=i}while(t);return{value:n(p),rest:e.slice(o)}}})},{"./base64":14,amdefine:20}],14:[function(e,t){if("function"!=typeof r)var r=e("amdefine")(t,e);r(function(e,t){var r={},n={};"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("").forEach(function(e,t){r[e]=t,n[t]=e}),t.encode=function(e){if(e in n)return n[e];throw new TypeError("Must be between 0 and 63: "+e)},t.decode=function(e){if(e in r)return r[e];throw new TypeError("Not a valid base 64 digit: "+e)}})},{amdefine:20}],15:[function(e,t){if("function"!=typeof r)var r=e("amdefine")(t,e);r(function(e,t){function r(e,t,n,a,i){var o=Math.floor((t-e)/2)+e,s=i(n,a[o],!0);return 0===s?a[o]:s>0?t-o>1?r(o,t,n,a,i):a[o]:o-e>1?r(e,o,n,a,i):0>e?null:a[e]}t.search=function(e,t,n){return t.length>0?r(-1,t.length,e,t,n):null}})},{amdefine:20}],16:[function(e,t){if("function"!=typeof r)var r=e("amdefine")(t,e);r(function(e,t){function r(e){var t=e;"string"==typeof e&&(t=JSON.parse(e.replace(/^\)\]\}'/,"")));var r=n.getArg(t,"version"),a=n.getArg(t,"sources"),o=n.getArg(t,"names",[]),s=n.getArg(t,"sourceRoot",null),u=n.getArg(t,"sourcesContent",null),c=n.getArg(t,"mappings"),p=n.getArg(t,"file",null);if(r!=this._version)throw new Error("Unsupported version: "+r);this._names=i.fromArray(o,!0),this._sources=i.fromArray(a,!0),this.sourceRoot=s,this.sourcesContent=u,this._mappings=c,this.file=p}var n=e("./util"),a=e("./binary-search"),i=e("./array-set").ArraySet,o=e("./base64-vlq");r.fromSourceMap=function(e){var t=Object.create(r.prototype);return t._names=i.fromArray(e._names.toArray(),!0),t._sources=i.fromArray(e._sources.toArray(),!0),t.sourceRoot=e._sourceRoot,t.sourcesContent=e._generateSourcesContent(t._sources.toArray(),t.sourceRoot),t.file=e._file,t.__generatedMappings=e._mappings.slice().sort(n.compareByGeneratedPositions),t.__originalMappings=e._mappings.slice().sort(n.compareByOriginalPositions),t},r.prototype._version=3,Object.defineProperty(r.prototype,"sources",{get:function(){return this._sources.toArray().map(function(e){return this.sourceRoot?n.join(this.sourceRoot,e):e},this)}}),r.prototype.__generatedMappings=null,Object.defineProperty(r.prototype,"_generatedMappings",{get:function(){return this.__generatedMappings||(this.__generatedMappings=[],this.__originalMappings=[],this._parseMappings(this._mappings,this.sourceRoot)),this.__generatedMappings}}),r.prototype.__originalMappings=null,Object.defineProperty(r.prototype,"_originalMappings",{get:function(){return this.__originalMappings||(this.__generatedMappings=[],this.__originalMappings=[],this._parseMappings(this._mappings,this.sourceRoot)),this.__originalMappings}}),r.prototype._parseMappings=function(e){for(var t,r,a=1,i=0,s=0,u=0,c=0,p=0,l=/^[,;]/,f=e;f.length>0;)if(";"===f.charAt(0))a++,f=f.slice(1),i=0;else if(","===f.charAt(0))f=f.slice(1);else{if(t={},t.generatedLine=a,r=o.decode(f),t.generatedColumn=i+r.value,i=t.generatedColumn,f=r.rest,f.length>0&&!l.test(f.charAt(0))){if(r=o.decode(f),t.source=this._sources.at(c+r.value),c+=r.value,f=r.rest,0===f.length||l.test(f.charAt(0)))throw new Error("Found a source, but no line and column");if(r=o.decode(f),t.originalLine=s+r.value,s=t.originalLine,t.originalLine+=1,f=r.rest,0===f.length||l.test(f.charAt(0)))throw new Error("Found a source and line, but no column");r=o.decode(f),t.originalColumn=u+r.value,u=t.originalColumn,f=r.rest,f.length>0&&!l.test(f.charAt(0))&&(r=o.decode(f),t.name=this._names.at(p+r.value),p+=r.value,f=r.rest)}this.__generatedMappings.push(t),"number"==typeof t.originalLine&&this.__originalMappings.push(t)}this.__originalMappings.sort(n.compareByOriginalPositions)},r.prototype._findMapping=function(e,t,r,n,i){if(e[r]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+e[r]);if(e[n]<0)throw new TypeError("Column must be greater than or equal to 0, got "+e[n]);return a.search(e,t,i)},r.prototype.originalPositionFor=function(e){var t={generatedLine:n.getArg(e,"line"),generatedColumn:n.getArg(e,"column")},r=this._findMapping(t,this._generatedMappings,"generatedLine","generatedColumn",n.compareByGeneratedPositions);if(r){var a=n.getArg(r,"source",null);return a&&this.sourceRoot&&(a=n.join(this.sourceRoot,a)),{source:a,line:n.getArg(r,"originalLine",null),column:n.getArg(r,"originalColumn",null),name:n.getArg(r,"name",null)}}return{source:null,line:null,column:null,name:null}},r.prototype.sourceContentFor=function(e){if(!this.sourcesContent)return null;if(this.sourceRoot&&(e=n.relative(this.sourceRoot,e)),this._sources.has(e))return this.sourcesContent[this._sources.indexOf(e)];var t;if(this.sourceRoot&&(t=n.urlParse(this.sourceRoot))){var r=e.replace(/^file:\/\//,"");if("file"==t.scheme&&this._sources.has(r))return this.sourcesContent[this._sources.indexOf(r)];if((!t.path||"/"==t.path)&&this._sources.has("/"+e))return this.sourcesContent[this._sources.indexOf("/"+e)]}throw new Error('"'+e+'" is not in the SourceMap.')},r.prototype.generatedPositionFor=function(e){var t={source:n.getArg(e,"source"),originalLine:n.getArg(e,"line"),originalColumn:n.getArg(e,"column")};this.sourceRoot&&(t.source=n.relative(this.sourceRoot,t.source));var r=this._findMapping(t,this._originalMappings,"originalLine","originalColumn",n.compareByOriginalPositions);return r?{line:n.getArg(r,"generatedLine",null),column:n.getArg(r,"generatedColumn",null)}:{line:null,column:null}},r.GENERATED_ORDER=1,r.ORIGINAL_ORDER=2,r.prototype.eachMapping=function(e,t,a){var i,o=t||null,s=a||r.GENERATED_ORDER;switch(s){case r.GENERATED_ORDER:i=this._generatedMappings;break;case r.ORIGINAL_ORDER:i=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var u=this.sourceRoot;i.map(function(e){var t=e.source;return t&&u&&(t=n.join(u,t)),{source:t,generatedLine:e.generatedLine,generatedColumn:e.generatedColumn,originalLine:e.originalLine,originalColumn:e.originalColumn,name:e.name}}).forEach(e,o)},t.SourceMapConsumer=r})},{"./array-set":12,"./base64-vlq":13,"./binary-search":15,"./util":19,amdefine:20}],17:[function(e,t){if("function"!=typeof r)var r=e("amdefine")(t,e);r(function(e,t){function r(e){this._file=a.getArg(e,"file"),this._sourceRoot=a.getArg(e,"sourceRoot",null),this._sources=new i,this._names=new i,this._mappings=[],this._sourcesContents=null}var n=e("./base64-vlq"),a=e("./util"),i=e("./array-set").ArraySet;r.prototype._version=3,r.fromSourceMap=function(e){var t=e.sourceRoot,n=new r({file:e.file,sourceRoot:t});return e.eachMapping(function(e){var r={generated:{line:e.generatedLine,column:e.generatedColumn}};e.source&&(r.source=e.source,t&&(r.source=a.relative(t,r.source)),r.original={line:e.originalLine,column:e.originalColumn},e.name&&(r.name=e.name)),n.addMapping(r)}),e.sources.forEach(function(t){var r=e.sourceContentFor(t);r&&n.setSourceContent(t,r)}),n},r.prototype.addMapping=function(e){var t=a.getArg(e,"generated"),r=a.getArg(e,"original",null),n=a.getArg(e,"source",null),i=a.getArg(e,"name",null);this._validateMapping(t,r,n,i),n&&!this._sources.has(n)&&this._sources.add(n),i&&!this._names.has(i)&&this._names.add(i),this._mappings.push({generatedLine:t.line,generatedColumn:t.column,originalLine:null!=r&&r.line,originalColumn:null!=r&&r.column,source:n,name:i})},r.prototype.setSourceContent=function(e,t){var r=e;this._sourceRoot&&(r=a.relative(this._sourceRoot,r)),null!==t?(this._sourcesContents||(this._sourcesContents={}),this._sourcesContents[a.toSetString(r)]=t):(delete this._sourcesContents[a.toSetString(r)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},r.prototype.applySourceMap=function(e,t){t||(t=e.file);var r=this._sourceRoot;r&&(t=a.relative(r,t));var n=new i,o=new i;this._mappings.forEach(function(i){if(i.source===t&&i.originalLine){var s=e.originalPositionFor({line:i.originalLine,column:i.originalColumn});null!==s.source&&(i.source=r?a.relative(r,s.source):s.source,i.originalLine=s.line,i.originalColumn=s.column,null!==s.name&&null!==i.name&&(i.name=s.name))}var u=i.source;u&&!n.has(u)&&n.add(u);var c=i.name;c&&!o.has(c)&&o.add(c)},this),this._sources=n,this._names=o,e.sources.forEach(function(t){var n=e.sourceContentFor(t);n&&(r&&(t=a.relative(r,t)),this.setSourceContent(t,n))},this)},r.prototype._validateMapping=function(e,t,r,n){if(!(e&&"line"in e&&"column"in e&&e.line>0&&e.column>=0&&!t&&!r&&!n||e&&"line"in e&&"column"in e&&t&&"line"in t&&"column"in t&&e.line>0&&e.column>=0&&t.line>0&&t.column>=0&&r))throw new Error("Invalid mapping: "+JSON.stringify({generated:e,source:r,orginal:t,name:n}))},r.prototype._serializeMappings=function(){var e,t=0,r=1,i=0,o=0,s=0,u=0,c="";this._mappings.sort(a.compareByGeneratedPositions);for(var p=0,l=this._mappings.length;l>p;p++){if(e=this._mappings[p],e.generatedLine!==r)for(t=0;e.generatedLine!==r;)c+=";",r++;else if(p>0){if(!a.compareByGeneratedPositions(e,this._mappings[p-1]))continue;c+=","}c+=n.encode(e.generatedColumn-t),t=e.generatedColumn,e.source&&(c+=n.encode(this._sources.indexOf(e.source)-u),u=this._sources.indexOf(e.source),c+=n.encode(e.originalLine-1-o),o=e.originalLine-1,c+=n.encode(e.originalColumn-i),i=e.originalColumn,e.name&&(c+=n.encode(this._names.indexOf(e.name)-s),s=this._names.indexOf(e.name)))}return c},r.prototype._generateSourcesContent=function(e,t){return e.map(function(e){if(!this._sourcesContents)return null;t&&(e=a.relative(t,e));var r=a.toSetString(e);return Object.prototype.hasOwnProperty.call(this._sourcesContents,r)?this._sourcesContents[r]:null},this)},r.prototype.toJSON=function(){var e={version:this._version,file:this._file,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return this._sourceRoot&&(e.sourceRoot=this._sourceRoot),this._sourcesContents&&(e.sourcesContent=this._generateSourcesContent(e.sources,e.sourceRoot)),e},r.prototype.toString=function(){return JSON.stringify(this)},t.SourceMapGenerator=r})},{"./array-set":12,"./base64-vlq":13,"./util":19,amdefine:20}],18:[function(e,t){if("function"!=typeof r)var r=e("amdefine")(t,e);r(function(e,t){function r(e,t,r,n,a){this.children=[],this.sourceContents={},this.line=void 0===e?null:e,this.column=void 0===t?null:t,this.source=void 0===r?null:r,this.name=void 0===a?null:a,null!=n&&this.add(n)}var n=e("./source-map-generator").SourceMapGenerator,a=e("./util");r.fromStringWithSourceMap=function(e,t){function n(e,t){a.add(null===e||void 0===e.source?t:new r(e.originalLine,e.originalColumn,e.source,t,e.name))}var a=new r,i=e.split("\n"),o=1,s=0,u=null;return t.eachMapping(function(e){if(null===u){for(;o<e.generatedLine;)a.add(i.shift()+"\n"),o++;if(s<e.generatedColumn){var t=i[0];a.add(t.substr(0,e.generatedColumn)),i[0]=t.substr(e.generatedColumn),s=e.generatedColumn}}else if(o<e.generatedLine){var r="";do r+=i.shift()+"\n",o++,s=0;while(o<e.generatedLine);if(s<e.generatedColumn){var t=i[0];r+=t.substr(0,e.generatedColumn),i[0]=t.substr(e.generatedColumn),s=e.generatedColumn}n(u,r)}else{var t=i[0],r=t.substr(0,e.generatedColumn-s);i[0]=t.substr(e.generatedColumn-s),s=e.generatedColumn,n(u,r)}u=e},this),n(u,i.join("\n")),t.sources.forEach(function(e){var r=t.sourceContentFor(e);r&&a.setSourceContent(e,r)}),a},r.prototype.add=function(e){if(Array.isArray(e))e.forEach(function(e){this.add(e)},this);else{if(!(e instanceof r||"string"==typeof e))throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);e&&this.children.push(e)}return this},r.prototype.prepend=function(e){if(Array.isArray(e))for(var t=e.length-1;t>=0;t--)this.prepend(e[t]);else{if(!(e instanceof r||"string"==typeof e))throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);this.children.unshift(e)}return this},r.prototype.walk=function(e){for(var t,n=0,a=this.children.length;a>n;n++)t=this.children[n],t instanceof r?t.walk(e):""!==t&&e(t,{source:this.source,line:this.line,column:this.column,name:this.name})},r.prototype.join=function(e){var t,r,n=this.children.length;if(n>0){for(t=[],r=0;n-1>r;r++)t.push(this.children[r]),t.push(e);t.push(this.children[r]),this.children=t}return this},r.prototype.replaceRight=function(e,t){var n=this.children[this.children.length-1];return n instanceof r?n.replaceRight(e,t):"string"==typeof n?this.children[this.children.length-1]=n.replace(e,t):this.children.push("".replace(e,t)),this},r.prototype.setSourceContent=function(e,t){this.sourceContents[a.toSetString(e)]=t},r.prototype.walkSourceContents=function(e){for(var t=0,n=this.children.length;n>t;t++)this.children[t]instanceof r&&this.children[t].walkSourceContents(e);for(var i=Object.keys(this.sourceContents),t=0,n=i.length;n>t;t++)e(a.fromSetString(i[t]),this.sourceContents[i[t]])},r.prototype.toString=function(){var e="";return this.walk(function(t){e+=t}),e},r.prototype.toStringWithSourceMap=function(e){var t={code:"",line:1,column:0},r=new n(e),a=!1,i=null,o=null,s=null,u=null;return this.walk(function(e,n){t.code+=e,null!==n.source&&null!==n.line&&null!==n.column?((i!==n.source||o!==n.line||s!==n.column||u!==n.name)&&r.addMapping({source:n.source,original:{line:n.line,column:n.column},generated:{line:t.line,column:t.column},name:n.name}),i=n.source,o=n.line,s=n.column,u=n.name,a=!0):a&&(r.addMapping({generated:{line:t.line,column:t.column}}),i=null,a=!1),e.split("").forEach(function(e){"\n"===e?(t.line++,t.column=0):t.column++})}),this.walkSourceContents(function(e,t){r.setSourceContent(e,t)}),{code:t.code,map:r}},t.SourceNode=r})},{"./source-map-generator":17,"./util":19,amdefine:20}],19:[function(e,t){if("function"!=typeof r)var r=e("amdefine")(t,e);r(function(e,t){function r(e,t,r){if(t in e)return e[t];if(3===arguments.length)return r;throw new Error('"'+t+'" is a required argument.')}function n(e){var t=e.match(f);return t?{scheme:t[1],auth:t[3],host:t[4],port:t[6],path:t[7]}:null}function a(e){var t=e.scheme+"://";return e.auth&&(t+=e.auth+"@"),e.host&&(t+=e.host),e.port&&(t+=":"+e.port),e.path&&(t+=e.path),t}function i(e,t){var r;return t.match(f)||t.match(d)?t:"/"===t.charAt(0)&&(r=n(e))?(r.path=t,a(r)):e.replace(/\/$/,"")+"/"+t}function o(e){return"$"+e}function s(e){return e.substr(1)}function u(e,t){e=e.replace(/\/$/,"");var r=n(e);return"/"==t.charAt(0)&&r&&"/"==r.path?t.slice(1):0===t.indexOf(e+"/")?t.substr(e.length+1):t}function c(e,t){var r=e||"",n=t||"";return(r>n)-(n>r)}function p(e,t,r){var n;return(n=c(e.source,t.source))?n:(n=e.originalLine-t.originalLine)?n:(n=e.originalColumn-t.originalColumn,n||r?n:(n=c(e.name,t.name))?n:(n=e.generatedLine-t.generatedLine,n?n:e.generatedColumn-t.generatedColumn))}function l(e,t,r){var n;return(n=e.generatedLine-t.generatedLine)?n:(n=e.generatedColumn-t.generatedColumn,n||r?n:(n=c(e.source,t.source))?n:(n=e.originalLine-t.originalLine)?n:(n=e.originalColumn-t.originalColumn,n?n:c(e.name,t.name)))}t.getArg=r;var f=/([\w+\-.]+):\/\/((\w+:\w+)@)?([\w.]+)?(:(\d+))?(\S+)?/,d=/^data:.+\,.+/;t.urlParse=n,t.urlGenerate=a,t.join=i,t.toSetString=o,t.fromSetString=s,t.relative=u,t.compareByOriginalPositions=p,t.compareByGeneratedPositions=l})},{amdefine:20}],20:[function(e,t){(function(r,n){"use strict";function a(t,a){function i(e){var t,r;for(t=0;e[t];t+=1)if(r=e[t],"."===r)e.splice(t,1),t-=1;else if(".."===r){if(1===t&&(".."===e[2]||".."===e[0]))break;t>0&&(e.splice(t-1,2),t-=2)}}function o(e,t){var r;return e&&"."===e.charAt(0)&&t&&(r=t.split("/"),r=r.slice(0,r.length-1),r=r.concat(e.split("/")),i(r),e=r.join("/")),e}function s(e){return function(t){return o(t,e)}}function u(e){function t(t){m[e]=t}return t.fromText=function(){throw new Error("amdefine does not implement load.fromText")},t}function c(e,r,i){var o,s,u,c;if(e)s=m[e]={},u={id:e,uri:n,exports:s},o=l(a,s,u,e);else{if(h)throw new Error("amdefine with no module ID cannot be called more than once per file.");h=!0,s=t.exports,u=t,o=l(a,s,u,t.id)}r&&(r=r.map(function(e){return o(e)})),c="function"==typeof i?i.apply(u.exports,r):i,void 0!==c&&(u.exports=c,e&&(m[e]=u.exports))}function p(e,t,r){Array.isArray(e)?(r=t,t=e,e=void 0):"string"!=typeof e&&(r=e,e=t=void 0),t&&!Array.isArray(t)&&(r=t,t=void 0),t||(t=["require","exports","module"]),e?d[e]=[e,t,r]:c(e,t,r)}var l,f,d={},m={},h=!1,y=e("path");return l=function(e,t,n,a){function i(i,o){return"string"==typeof i?f(e,t,n,i,a):(i=i.map(function(r){return f(e,t,n,r,a)}),void r.nextTick(function(){o.apply(null,i)}))}return i.toUrl=function(e){return 0===e.indexOf(".")?o(e,y.dirname(n.filename)):e},i},a=a||function(){return t.require.apply(t,arguments)},f=function(e,t,r,n,a){var i,p,h=n.indexOf("!"),y=n;if(-1===h){if(n=o(n,a),"require"===n)return l(e,t,r,a);if("exports"===n)return t;if("module"===n)return r;if(m.hasOwnProperty(n))return m[n];if(d[n])return c.apply(null,d[n]),m[n];if(e)return e(y);throw new Error("No module with ID: "+n)}return i=n.substring(0,h),n=n.substring(h+1,n.length),p=f(e,t,r,i,a),n=p.normalize?p.normalize(n,s(a)):o(n,a),m[n]?m[n]:(p.load(n,l(e,t,r,a),u(n),{}),m[n])},p.require=function(e){return m[e]?m[e]:d[e]?(c.apply(null,d[e]),m[e]):void 0},p.amd={},p}t.exports=a}).call(this,e("_process"),"/node_modules/jstransform/node_modules/source-map/node_modules/amdefine/amdefine.js")},{_process:8,path:7}],21:[function(e,t,r){function n(e){var t=e.match(o);return t?t[0].replace(s,"")||"":""}function a(e){e=e.replace(u,"").replace(c,"").replace(p," ").replace(l,"$1");for(var t="";t!=e;)t=e,e=e.replace(f,"\n$1 $2\n");e=e.trim();for(var r,n=[];r=d.exec(e);)n.push([r[1],r[2]]);return n}function i(e){for(var t=a(e),r={},n=0;n<t.length;n++)r[t[n][0]]=t[n][1];return r}var o=/^\s*(\/\*\*(.|\r?\n)*?\*\/)/,s=/^\s*/,u=/^\/\*\*?/,c=/\*+\/$/,p=/[\t ]+/g,l=/(\r?\n|^) *\*/g,f=/(?:^|\r?\n) *(@[^\r\n]*?) *\r?\n *([^@\r\n\s][^@\r\n]+?) *\r?\n/g,d=/(?:^|\r?\n) *@(\S+) *([^\r\n]*)/g;r.extract=n,r.parse=a,r.parseAsObject=i},{}],22:[function(e,t,r){"use strict";function n(e,t){if(e.type===v.Program)return!0;var r=t.type===v.FunctionDeclaration||t.type===v.FunctionExpression||t.type===v.ArrowFunctionExpression,n=t.type===v.ArrowFunctionExpression&&e===t.body;return r&&(e.type===v.BlockStatement||n)}function a(e,t){return e.type===v.Program?!1:e.type===v.BlockStatement&&t.type===v.CatchClause}function i(e,t,r){function u(e,t,r){e.range&&m.catchup(e.range[0],r),i(e,t,r),e.range&&m.catchup(e.range[1],r)}var c=null,l=t[0];if(!Array.isArray(e)&&r.localScope.parentNode!==l){if(n(e,l)){var f=r.scopeIsStrict;if(f||e.type!==v.BlockStatement&&e.type!==v.Program||(f=e.body.length>0&&e.body[0].type===v.ExpressionStatement&&e.body[0].expression.type===v.Literal&&"use strict"===e.body[0].expression.value),e.type===v.Program)c=r.g.buffer.length,r=m.updateState(r,{scopeIsStrict:f});else{if(c=r.g.buffer.length+1,r=m.updateState(r,{localScope:{parentNode:l,parentScope:r.localScope,identifiers:{},tempVarIndex:0,tempVars:[]},scopeIsStrict:f}),y("arguments",g(e),r),l.params.length>0)for(var d,h=g(l,t.slice(1),t[0]),S=0;S<l.params.length;S++)d=l.params[S],d.type===v.Identifier&&y(d.name,h,r);if(l.rest){var h=g(l,t.slice(1),t[0]);y(l.rest.name,h,r)}if(l.type===v.FunctionExpression&&l.id){var b=g(l,t.parentNodeslice,l);y(l.id.name,b,r)}}o(e,t,r)}if(a(e,l)){if(c=r.g.buffer.length,r=m.updateState(r,{localScope:{parentNode:l,parentScope:r.localScope,identifiers:{},tempVarIndex:0,tempVars:[]}}),l.type===v.CatchClause){var h=g(l,t.slice(1),l);y(l.param.name,h,r)}s(e,t,r)}}m.analyzeAndTraverse(p,u,e,t,r),null!==c&&m.injectTempVarDeclarations(r,c)}function o(e,t,r){m.analyzeAndTraverse(u,o,e,t,r)}function s(e,t,r){m.analyzeAndTraverse(c,s,e,t,r)}function u(e,t,r){var n;switch(e.type){case v.ArrowFunctionExpression:case v.FunctionExpression:return!1;case v.ClassDeclaration:case v.ClassExpression:case v.FunctionDeclaration:return e.id&&(n=g(h(t),t.slice(),e),y(e.id.name,n,r)),!1;case v.VariableDeclarator:"var"===t[0].kind&&(n=g(h(t),t.slice(),e),y(e.id.name,n,r))}}function c(e){return e.type===v.CatchClause?!1:void 0}function p(e,t,r){for(var n=r.g.visitors,a=0;a<n.length;a++)if(n[a].test(e,t,r))return n[a](i,e,t,r)}function l(e,t){if(S[e]&&!t.disableAstCache)return S[e];var r=d.parse(e,{comment:!0,loc:!0,range:!0,sourceType:t.sourceType});return t.disableAstCache||(S[e]=r),r}function f(t,r,n){n=n||{};var a;try{a=l(r,n)}catch(o){throw o.message="Parse Error: "+o.message,o}var s=m.createState(r,a,n);if(s.g.visitors=t,n.sourceMap){var u=e("source-map").SourceMapGenerator;s.g.sourceMap=new u({file:n.filename||"transformed.js"})}i(a,[],s),m.catchup(r.length,s);
var c={code:s.g.buffer,extra:s.g.extra};return n.sourceMap&&(c.sourceMap=s.g.sourceMap,c.sourceMapFilename=n.filename||"source.js"),c}var d=e("esprima-fb"),m=e("./utils"),h=m.getBoundaryNode,y=m.declareIdentInLocalScope,g=m.initScopeMetadata,v=d.Syntax,S={};r.transform=f,r.Syntax=v},{"./utils":23,"esprima-fb":9,"source-map":11}],23:[function(e,t,r){function n(e,t,r){return{localScope:{parentNode:t,parentScope:null,identifiers:{},tempVarIndex:0,tempVars:[]},superClass:null,mungeNamespace:"",methodNode:null,methodFuncNode:null,className:null,scopeIsStrict:null,indentBy:0,g:{opts:r,position:0,extra:{},buffer:"",source:e,docblock:null,tagNamespaceUsed:!1,isBolt:void 0,sourceMap:null,sourceMapFilename:"source.js",sourceLine:1,bufferLine:1,originalProgramAST:null,sourceColumn:0,bufferColumn:0}}}function a(e,t){var r=Object.create(e);return Object.keys(t).forEach(function(e){r[e]=t[e]}),r}function i(e,t,r){if(!(e<t.g.position)){var n=t.g.source.substring(t.g.position,e),a=y(n,t);if(t.g.sourceMap&&a){t.g.sourceMap.addMapping({generated:{line:t.g.bufferLine,column:t.g.bufferColumn},original:{line:t.g.sourceLine,column:t.g.sourceColumn},source:t.g.sourceMapFilename});for(var i=n.split("\n"),o=a.split("\n"),s=1;s<i.length-1;s++)t.g.sourceMap.addMapping({generated:{line:t.g.bufferLine,column:0},original:{line:t.g.sourceLine,column:0},source:t.g.sourceMapFilename}),t.g.sourceLine++,t.g.bufferLine++;i.length>1&&(t.g.sourceLine++,t.g.bufferLine++,t.g.sourceColumn=0,t.g.bufferColumn=0),t.g.sourceColumn+=i[i.length-1].length,t.g.bufferColumn+=o[o.length-1].length}t.g.buffer+=r?r(a):a,t.g.position=e}}function o(e,t){return t.g.source.substring(e.range[0],e.range[1])}function s(e){return e.replace(D," ")}function u(e){return e.replace(D,"")}function c(e,t){var r,n=t.g.source.substring(t.g.position),a=n.split("\n"),i=0,o=!1,s=!1;e:for(;void 0!==(r=a.shift());){var u=i+r.length;t:for(;u>i;i++){var c=n[i];if('"'!==c&&"'"!==c){if(!s){if(u>i+1){var p=c+r[i+1];if("//"===p){i=u+1;continue e}if("/*"===p){o=!0,i+=1;continue t}if("*/"===p){o=!1,i+=1;continue t}}if(!o&&c===e)return i+t.g.position}}else s=!s}i++,s=!1}throw new Error("`"+e+"` not found!")}function p(e,t){i(e,t,s)}function l(e,t){i(e,t,u)}function f(e){return e.replace(j,function(){return""})}function d(e,t){i(e,t,f)}function m(e,t){if(t.g.sourceMap){e<t.g.position&&(t.g.position=0,t.g.sourceLine=1,t.g.sourceColumn=0);var r=t.g.source.substring(t.g.position,e),n=r.split("\n");n.length>1&&(t.g.sourceLine+=n.length-1,t.g.sourceColumn=0),t.g.sourceColumn+=n[n.length-1].length}t.g.position=e}function h(e,t){if(t.g.sourceMap&&e){t.g.sourceMap.addMapping({generated:{line:t.g.bufferLine,column:t.g.bufferColumn},original:{line:t.g.sourceLine,column:t.g.sourceColumn},source:t.g.sourceMapFilename});var r=e.split("\n");r.length>1&&(t.g.bufferLine+=r.length-1,t.g.bufferColumn=0),t.g.bufferColumn+=r[r.length-1].length}t.g.buffer+=e}function y(e,t){var r=t.indentBy;if(0>r)for(var n=0;-r>n;n++)e=e.replace(R,"$1");else for(var n=0;r>n;n++)e=e.replace(R,"$1$2$2");return e}function g(e,t){var r=e;for(e-=1;e>0&&"\n"!=t.g.source[e];)t.g.source[e].match(/[ \t]/)||(r=e),e--;return t.g.source.substring(e+1,r)}function v(t){if(!t.g.docblock){var r=e("./docblock");t.g.docblock=r.parseAsObject(r.extract(t.g.source))}return t.g.docblock}function S(e,t,r){for(var n=t.localScope;n;){if(void 0!==n.identifiers[e])return!0;if(r&&n.parentNode===r)break;n=n.parentScope}return!1}function b(e,t){return void 0!==t.localScope.identifiers[e]}function E(e,t,r){return{boundaryNode:e,bindingPath:t,bindingNode:r}}function w(e,t,r){r.localScope.identifiers[e]={boundaryNode:t.boundaryNode,path:t.bindingPath,node:t.bindingNode,state:Object.create(r)}}function x(e,t){for(var r=t.localScope;r;){if(void 0!==r.identifiers[e])return r.identifiers[e];r=r.parentScope}}function A(e,t){return t.localScope.identifiers[e]}function C(e,t,r,n,a){if(r.type){if(e(r,n,a)===!1)return;n.unshift(r)}I(r).forEach(function(e){t(e,n,a)}),r.type&&n.shift()}function I(e){var t=[];for(var r in e)e.hasOwnProperty(r)&&T(t,e[r]);return t.sort(function(e,t){return e[1]-t[1]}),t.map(function(e){return e[0]})}function T(e,t){if("object"==typeof t&&null!==t)if(t.range)e.push([t,t.range[0]]);else if(Array.isArray(t))for(var r=0;r<t.length;r++)T(e,t[r])}function L(e,t){return P(e,function(e){return e.type===t})}function P(e,t){function r(e){return t(e)===!0?(a=!0,!1):void 0}function n(e){a||(a=P(e,t))}var a=!1;return C(r,n,e,[]),a}function k(e){for(var t=0;t<e.length;++t)if(B[e[t].type])return e[t];throw new Error("Expected to find a node with one of the following types in path:\n"+JSON.stringify(Object.keys(B)))}function O(e){return"$__"+e}function N(e){var t="$__"+e.localScope.tempVarIndex++;return e.localScope.tempVars.push(t),t}function _(e,t){e.localScope.tempVars.length&&(e.g.buffer=e.g.buffer.slice(0,t)+"var "+e.localScope.tempVars.join(", ")+";"+e.g.buffer.slice(t),e.localScope.tempVars=[])}var M=e("esprima-fb").Syntax,R=/(^|\n)( {2}|\t)/g,D=/(\S)/g,j=/[^\n]/g,B={};B[M.ArrowFunctionExpression]=!0,B[M.FunctionExpression]=!0,B[M.FunctionDeclaration]=!0,B[M.Program]=!0,r.analyzeAndTraverse=C,r.append=h,r.catchup=i,r.catchupNewlines=d,r.catchupWhiteOut=p,r.catchupWhiteSpace=l,r.containsChildMatching=P,r.containsChildOfType=L,r.createState=n,r.declareIdentInLocalScope=w,r.getBoundaryNode=k,r.getDocblock=v,r.getLexicalBindingMetadata=x,r.getLocalBindingMetadata=A,r.getNextSyntacticCharOffset=c,r.getNodeSourceText=o,r.getOrderedChildren=I,r.getTempVar=O,r.identInLocalScope=b,r.identWithinLexicalScope=S,r.indentBefore=g,r.initScopeMetadata=E,r.injectTempVar=N,r.injectTempVarDeclarations=_,r.move=m,r.scopeTypes=B,r.updateIndent=y,r.updateState=a},{"./docblock":21,"esprima-fb":9}],24:[function(e,t,r){function n(e,t,r,n){var i=r[0].type===p.ExpressionStatement;i&&l.append("(",n),l.append("function",n),a(e,t,r,n),l.catchupWhiteSpace(t.body.range[0],n);var u=t.body.type==p.BlockStatement?s:o;r.unshift(t),u(e,t,r,n),r.shift();var c=l.containsChildMatching(t.body,function(e){return e.type===p.ThisExpression||e.type===p.Identifier&&"super"===e.name});return c&&l.append(".bind(this)",n),l.catchupWhiteSpace(t.range[1],n),i&&l.append(")",n),!1}function a(e,t,r,n){(i(t,n)||!t.params.length)&&l.append("(",n),0!==t.params.length&&(r.unshift(t),e(t.params,r,n),r.unshift()),l.append(")",n)}function i(e,t){return 1===e.params.length&&"("!==t.g.source[t.g.position]}function o(e,t,r,n){l.append("{",n),t.rest&&l.append(u.renderRestParamSetup(t,n),n),c.renderDestructuredComponents(t,l.updateState(n,{localScope:{parentNode:n.parentNode,parentScope:n.parentScope,identifiers:n.identifiers,tempVarIndex:0}})),l.append("return ",n),s(e,t,r,n),l.append(";}",n)}function s(e,t,r,n){e(t.body,r,n),l.catchup(t.body.range[1],n)}var u=e("./es6-rest-param-visitors"),c=e("./es6-destructuring-visitors"),p=e("esprima-fb").Syntax,l=e("../src/utils");n.test=function(e){return e.type===p.ArrowFunctionExpression},r.visitorList=[n]},{"../src/utils":23,"./es6-destructuring-visitors":27,"./es6-rest-param-visitors":30,"esprima-fb":9}],25:[function(e,t,r){function n(e,t,r,n){o.move(t.range[0],n),e(t,r,n),o.catchup(t.range[1],n)}function a(e,t,r,a){if(o.catchup(t.range[0],a),t.type===i.NewExpression)o.append("new (Function.prototype.bind.apply(",a),n(e,t.callee,r,a);else if(t.callee.type===i.MemberExpression){var s=o.injectTempVar(a);o.append("("+s+" = ",a),n(e,t.callee.object,r,a),o.append(")",a),t.callee.property.type===i.Identifier?(o.append(".",a),n(e,t.callee.property,r,a)):(o.append("[",a),n(e,t.callee.property,r,a),o.append("]",a)),o.append(".apply("+s,a)}else{var u=t.callee.type===i.FunctionDeclaration||t.callee.type===i.FunctionExpression;u&&o.append("(",a),n(e,t.callee,r,a),u&&o.append(")",a),o.append(".apply(null",a)}o.append(", ",a);var c=t.arguments.slice(),p=c.pop();if(c.length||t.type===i.NewExpression){for(o.append("[",a),t.type===i.NewExpression&&o.append("null"+(c.length?", ":""),a);c.length;){var l=c.shift();o.move(l.range[0],a),e(l,r,a),c.length?o.catchup(c[0].range[0],a):o.catchup(l.range[1],a)}o.append("].concat(",a),n(e,p.argument,r,a),o.append(")",a)}else n(e,p.argument,r,a);return o.append(t.type===i.NewExpression?"))":")",a),o.move(t.range[1],a),!1}var i=e("esprima-fb").Syntax,o=e("../src/utils");a.test=function(e){return(e.type===i.CallExpression||e.type===i.NewExpression)&&e.arguments.length>0&&e.arguments[e.arguments.length-1].type===i.SpreadElement},r.visitorList=[a]},{"../src/utils":23,"esprima-fb":9}],26:[function(e,t,r){"use strict";function n(){C=0,I={}}function a(e){var t=e.mungeNamespace||"";return"____Class"+t+v.encode(C++)}function i(e,t){var r=t.mungeNamespace,n=t.g.opts.minify;if(n){I[r]||(I[r]={symbolMap:{},identUUIDCounter:0});var a=I[r].symbolMap;a[e]||(a[e]=v.encode(I[r].identUUIDCounter++)),e=a[e]}return"$"+r+e}function o(e,t){var r={name:null,expression:null};return e.superClass&&(e.superClass.type===S.Identifier?r.name=e.superClass.name:(r.name=a(t),r.expression=t.g.source.substring(e.superClass.range[0],e.superClass.range[1]))),r}function s(e){return e.type===S.MethodDefinition&&e.key.type===S.Identifier&&"constructor"===e.key.name}function u(e,t){return!!t.methodFuncNode&&!b.getDocblock(t).hasOwnProperty("preventMunge")&&/^_(?!_)/.test(e.name)}function c(e,t,r,n){if(!n.g.opts.es5&&("get"===t.kind||"set"===t.kind))throw new Error("This transform does not support "+t.kind+"ter methods for ES6 classes. (line: "+t.loc.start.line+", col: "+t.loc.start.column+")");return n=b.updateState(n,{methodNode:t}),b.catchup(t.range[0],n),r.unshift(t),e(t.value,r,n),r.shift(),!1}function p(e,t,r,n){var a=r[0],o="get"===a.kind,s="set"===a.kind;if(n=b.updateState(n,{methodFuncNode:t}),"constructor"===a.key.name)b.append("function "+n.className,n);else{var c,p=!1,l=a["static"]?"":".prototype",f=n.className+l;a.key.type===S.Identifier?(c=a.key.name,u(a.key,n)&&(c=i(c,n)),o||s?c=JSON.stringify(c):E.isReservedWord(c)&&(p=!0,c=JSON.stringify(c))):a.key.type===S.Literal&&(c=JSON.stringify(a.key.value),p=!0),s||o?b.append("Object.defineProperty("+f+","+c+",{configurable:true,"+a.kind+":function",n):n.g.opts.es3?(c=p?"["+c+"]":"."+c,b.append(f+c+"=function"+(t.generator?"*":""),n)):(p||(c=JSON.stringify(c)),b.append("Object.defineProperty("+f+","+c+",{writable:true,configurable:true,value:function"+(t.generator?"*":""),n))}b.move(a.key.range[1],n),b.append("(",n);var d=t.params;if(d.length>0){b.catchupNewlines(d[0].range[0],n);for(var m=0;m<d.length;m++)b.catchup(t.params[m].range[0],n),r.unshift(t),e(d[m],r,n),r.shift()}var h=b.getNextSyntacticCharOffset(")",n);b.catchupWhiteSpace(h,n);var y=b.getNextSyntacticCharOffset("{",n);return b.catchup(y+1,n),n.scopeIsStrict||(b.append('"use strict";',n),n=b.updateState(n,{scopeIsStrict:!0})),b.move(t.body.range[0]+"{".length,n),r.unshift(t),e(t.body,r,n),r.shift(),b.catchup(t.body.range[1],n),"constructor"!==a.key.name&&((o||s||!n.g.opts.es3)&&b.append("})",n),b.append(";",n)),!1}function l(e,t,r,n){var a=t.name;u(t,n)&&(a=i(t.name,n)),b.append(a,n),b.move(t.range[1],n)}function f(e,t,r,n){var a=n.className,i=n.superClass;if(i.name){null!==i.expression&&b.append("var "+i.name+"="+i.expression+";",n);var o=i.name+"____Key",u="";b.identWithinLexicalScope(o,n)||(u="var ",w(o,x(t),n)),b.append("for("+u+o+" in "+i.name+"){if("+i.name+".hasOwnProperty("+o+")){"+a+"["+o+"]="+i.name+"["+o+"];}}",n);var c=A+i.name;b.identWithinLexicalScope(c,n)||(b.append("var "+c+"="+i.name+"===null?null:"+i.name+".prototype;",n),w(c,x(t),n)),b.append(a+".prototype=Object.create("+c+");",n),b.append(a+".prototype.constructor="+a+";",n),b.append(a+".__superConstructor__="+i.name+";",n)}t.body.body.filter(s).pop()||(b.append("function "+a+"(){",n),n.scopeIsStrict||b.append('"use strict";',n),i.name&&b.append("if("+i.name+"!==null){"+i.name+".apply(this,arguments);}",n),b.append("}",n)),b.move(t.body.range[0]+"{".length,n),e(t.body,r,n),b.catchupWhiteSpace(t.range[1],n)}function d(e,t,r,n){var a=t.id.name,i=o(t,n);return n=b.updateState(n,{mungeNamespace:a,className:a,superClass:i}),f(e,t,r,n),!1}function m(e,t,r,n){var i=t.id&&t.id.name||a(n),s=o(t,n);return b.append("(function(){",n),n=b.updateState(n,{mungeNamespace:i,className:i,superClass:s}),f(e,t,r,n),b.append("return "+i+";})()",n),!1}function h(e,t,r,n){b.append(i(t.name,n),n),b.move(t.range[1],n)}function y(e,t,r,n){var a=n.superClass.name;if(t.callee.type===S.Identifier){if(s(n.methodNode))b.append(a+".call(",n);else{var i=A+a;n.methodNode.key.type===S.Identifier?i+="."+n.methodNode.key.name:n.methodNode.key.type===S.Literal&&(i+="["+JSON.stringify(n.methodNode.key.value)+"]"),b.append(i+".call(",n)}b.move(t.callee.range[1],n)}else t.callee.type===S.MemberExpression&&(b.append(A+a,n),b.move(t.callee.object.range[1],n),t.callee.computed?b.catchup(t.callee.property.range[1]+"]".length,n):b.append("."+t.callee.property.name,n),b.append(".call(",n),b.move(t.callee.range[1],n));return b.append("this",n),t.arguments.length>0&&(b.append(",",n),b.catchupWhiteSpace(t.arguments[0].range[0],n),e(t.arguments,r,n)),b.catchupWhiteSpace(t.range[1],n),b.append(")",n),!1}function g(e,t,r,n){var a=n.superClass.name;b.append(A+a,n),b.move(t.object.range[1],n)}var v=e("base62"),S=e("esprima-fb").Syntax,b=e("../src/utils"),E=e("./reserved-words-helper"),w=b.declareIdentInLocalScope,x=b.initScopeMetadata,A="____SuperProtoOf",C=0,I={};c.test=function(e){return e.type===S.MethodDefinition},p.test=function(e,t){return e.type===S.FunctionExpression&&t[0].type===S.MethodDefinition},l.test=function(e,t){if(t[0]&&t[1]){var r=t[0],n=t[1];return r.type===S.FunctionExpression&&n.type===S.MethodDefinition&&e.type===S.Identifier}},d.test=function(e){return e.type===S.ClassDeclaration},m.test=function(e){return e.type===S.ClassExpression},h.test=function(e,t,r){if(e.type===S.Identifier&&u(e,r)){if(t[0].type===S.MemberExpression&&t[0].object!==e&&t[0].computed===!1)return!0;if(b.identWithinLexicalScope(e.name,r,r.methodFuncNode))return!0;if(t[0].type===S.Property&&t[1].type===S.ObjectExpression)return!0;if(t[0].type===S.FunctionExpression||t[0].type===S.FunctionDeclaration||t[0].type===S.ArrowFunctionExpression)for(var n=0;n<t[0].params.length;n++)if(t[0].params[n]===e)return!0}return!1},y.test=function(e,t,r){if(r.superClass&&e.type===S.CallExpression){var n=e.callee;if(n.type===S.Identifier&&"super"===n.name||n.type==S.MemberExpression&&"super"===n.object.name)return!0}return!1},g.test=function(e,t,r){return r.superClass&&e.type===S.MemberExpression&&e.object.type===S.Identifier&&"super"===e.object.name},r.resetSymbols=n,r.visitorList=[d,m,p,c,l,h,y,g]},{"../src/utils":23,"./reserved-words-helper":34,base62:10,"esprima-fb":9}],27:[function(e,t,r){function n(e,t,r,n){return y.append(y.getTempVar(n.localScope.tempVarIndex)+"=",n),y.catchupWhiteSpace(t.init.range[0],n),e(t.init,r,n),y.catchup(t.init.range[1],n),y.append(","+i(t.id,n),n),n.localScope.tempVarIndex++,!1}function a(e){return e.type===h.ObjectPattern||e.type===h.ArrayPattern}function i(e,t){for(var r=t.localScope.tempVarIndex,n=[],a=o(e),c=0;c<a.length;c++){var p=a[c];if(p)if(p.type!==h.SpreadElement)if(p.type!==h.SpreadProperty){var l=s(e,p,r,c),f=u(e,p);n.push(f.type===h.Identifier?f.name+"="+l:y.getTempVar(++t.localScope.tempVarIndex)+"="+l+","+i(f,t))}else{var d=S.renderRestExpression(y.getTempVar(r),a);n.push(p.argument.name+"="+d)}else n.push(p.argument.name+"=Array.prototype.slice.call("+y.getTempVar(r)+","+c+")")}return n.join(",")}function o(e){return e.properties||e.elements}function s(e,t,r,n){var a=y.getTempVar(r);if(e.type===h.ObjectPattern){if(g.isReservedWord(t.key.name))return a+'["'+t.key.name+'"]';if(t.key.type===h.Literal)return a+"["+JSON.stringify(t.key.value)+"]";if(t.key.type===h.Identifier)return a+"."+t.key.name}else if(e.type===h.ArrayPattern)return a+"["+n+"]"}function u(e,t){return e.type===h.ObjectPattern?t.value:t}function c(e,t,r,n){var a=t.expression;return y.append("var "+y.getTempVar(n.localScope.tempVarIndex)+"=",n),y.catchupWhiteSpace(a.right.range[0],n),e(a.right,r,n),y.catchup(a.right.range[1],n),y.append(";"+i(a.left,n)+";",n),y.catchupWhiteSpace(t.range[1],n),n.localScope.tempVarIndex++,!1}function p(e,t,r,n){return y.append(y.getTempVar(l(t,r)),n),y.catchupWhiteSpace(t.range[1],n),!0}function l(e,t){for(var r=t[0],n=0,i=0;i<r.params.length;i++){var o=r.params[i];if(o===e)break;a(o)&&n++}return n}function f(e){return e.type==h.FunctionDeclaration||e.type==h.FunctionExpression||e.type==h.MethodDefinition||e.type==h.ArrowFunctionExpression}function d(e,t,r,n){var a=r[0];return y.catchup(a.body.range[0]+1,n),m(a,n),a.rest&&y.append(v.renderRestParamSetup(a,n),n),!0}function m(e,t){for(var r=[],n=0;n<e.params.length;n++){var o=e.params[n];a(o)&&(r.push(i(o,t)),t.localScope.tempVarIndex++)}r.length&&y.append("var "+r.join(",")+";",t)}var h=e("esprima-fb").Syntax,y=e("../src/utils"),g=e("./reserved-words-helper"),v=e("./es6-rest-param-visitors"),S=e("./es7-rest-property-helpers");n.test=function(e){return e.type===h.VariableDeclarator&&a(e.id)},c.test=function(e){return e.type===h.ExpressionStatement&&e.expression.type===h.AssignmentExpression&&a(e.expression.left)},p.test=function(e,t){return a(e)&&f(t[0])},d.test=function(e,t){return e.type===h.BlockStatement&&f(t[0])},r.visitorList=[n,c,p,d],r.renderDestructuredComponents=m},{"../src/utils":23,"./es6-rest-param-visitors":30,"./es7-rest-property-helpers":32,"./reserved-words-helper":34,"esprima-fb":9}],28:[function(e,t,r){function n(e,t,r,n){var a=t.value.generator;return a&&i.catchupWhiteSpace(t.range[0]+1,n),t.computed?i.catchup(t.key.range[1]+1,n):o.isReservedWord(t.key.name)&&(i.catchup(t.key.range[0],n),i.append('"',n),i.catchup(t.key.range[1],n),i.append('"',n)),i.catchup(t.key.range[1],n),i.append(":function"+(a?"*":""),n),r.unshift(t),e(t.value,r,n),r.shift(),!1}var a=e("esprima-fb").Syntax,i=e("../src/utils"),o=e("./reserved-words-helper");n.test=function(e){return e.type===a.Property&&e.value.type===a.FunctionExpression&&e.method===!0},r.visitorList=[n]},{"../src/utils":23,"./reserved-words-helper":34,"esprima-fb":9}],29:[function(e,t,r){function n(e,t,r,n){return i.catchup(t.key.range[1],n),i.append(":"+t.key.name,n),!1}var a=e("esprima-fb").Syntax,i=e("../src/utils");n.test=function(e,t){return e.type===a.Property&&"init"===e.kind&&e.shorthand===!0&&t[0].type!==a.ObjectPattern},r.visitorList=[n]},{"../src/utils":23,"esprima-fb":9}],30:[function(e,t,r){function n(e){return(e.type===s.FunctionDeclaration||e.type===s.FunctionExpression||e.type===s.ArrowFunctionExpression)&&e.rest}function a(e,t,r,n){return t.parametricType&&(u.catchup(t.parametricType.range[0],n),r.unshift(t),e(t.parametricType,r,n),r.shift()),t.params.length?(r.unshift(t),e(t.params,r,n),r.shift()):u.catchup(t.rest.range[0]-3,n),u.catchupWhiteSpace(t.rest.range[1],n),r.unshift(t),e(t.body,r,n),r.shift(),!1}function i(e,t){var r=t.localScope.tempVarIndex++,n=t.localScope.tempVarIndex++;return"for (var "+e.rest.name+"=[],"+u.getTempVar(r)+"="+e.params.length+","+u.getTempVar(n)+"=arguments.length;"+u.getTempVar(r)+"<"+u.getTempVar(n)+";"+u.getTempVar(r)+"++) "+e.rest.name+".push(arguments["+u.getTempVar(r)+"]);"}function o(e,t,r,n){u.catchup(t.range[0]+1,n);var a=r[0];return u.append(i(a,n),n),!0}var s=e("esprima-fb").Syntax,u=e("../src/utils");a.test=function(e){return n(e)},o.test=function(e,t){return e.type===s.BlockStatement&&n(t[0])},r.renderRestParamSetup=i,r.visitorList=[a,o]},{"../src/utils":23,"esprima-fb":9}],31:[function(e,t,r){"use strict";function n(e,t,r,n){var a=t.quasis;u.append("(",n);for(var o=0;o<a.length;o++){var c=a[o];if(""!==c.value.raw?(u.append(i(c),n),c.tail||u.append(" + ",n),u.move(c.range[0],n),u.catchupNewlines(c.range[1],n)):o>0&&!c.tail&&u.append(" + ",n),u.move(c.range[1],n),!c.tail){var p=t.expressions[o];p.type===s.Identifier||p.type===s.MemberExpression||p.type===s.CallExpression?u.catchup(p.range[1],n):(u.append("(",n),e(p,r,n),u.catchup(p.range[1],n),u.append(")",n)),""!==a[o+1].value.cooked&&u.append(" + ",n)}}return u.move(t.range[1],n),u.append(")",n),!1}function a(e,t,r,n){var a=t.quasi,s=a.quasis.length;u.move(t.tag.range[0],n),e(t.tag,r,n),u.catchup(t.tag.range[1],n),u.append("(function() { var siteObj = [",n);for(var c=0;s>c;c++)u.append(i(a.quasis[c]),n),c!==s-1&&u.append(", ",n);for(u.append("]; siteObj.raw = [",n),c=0;s>c;c++)u.append(o(a.quasis[c]),n),c!==s-1&&u.append(", ",n);if(u.append("]; Object.freeze(siteObj.raw); Object.freeze(siteObj); return siteObj; }()",n),s>1)for(c=0;c<a.expressions.length;c++){var p=a.expressions[c];u.append(", ",n),u.move(a.quasis[c].range[0],n),u.catchupNewlines(a.quasis[c].range[1],n),u.move(p.range[0],n),e(p,r,n),u.catchup(p.range[1],n)}return u.catchupNewlines(t.range[1],n),u.append(")",n),!1}function i(e){return JSON.stringify(e.value.cooked)}function o(e){return JSON.stringify(e.value.raw)}var s=e("esprima-fb").Syntax,u=e("../src/utils");n.test=function(e){return e.type===s.TemplateLiteral},a.test=function(e){return e.type===s.TaggedTemplateExpression},r.visitorList=[n,a]},{"../src/utils":23,"esprima-fb":9}],32:[function(e,t,r){function n(e){for(var t=[],r=0;r<e.length;r++){var n=e[r];n.type!==s.SpreadProperty&&t.push(n.type===s.Identifier?n.name:n.key.name)}return t}function a(e,t){return u+"("+e+","+t+")"}function i(e){return a(e,"{}")}function o(e,t){var r=n(t);return r.length?a(e,"{"+r.join(":1,")+":1}"):i(e)}var s=e("esprima-fb").Syntax,u="(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})";r.renderRestExpression=o},{"esprima-fb":9}],33:[function(e,t,r){function n(e,t,r,n){i.catchup(t.range[0],n),i.append("Object.assign({",n),i.move(t.range[0]+1,n);for(var o=!1,s=0;s<t.properties.length;s++){var u=t.properties[s];u.type===a.SpreadProperty?(o||i.append("}",n),0===s&&i.append(",",n),i.catchup(u.range[0],n),i.move(u.range[0]+3,n),e(u.argument,r,n),i.catchup(u.range[1],n),o=!0):(i.catchup(u.range[0],n),o&&i.append("{",n),e(u,r,n),i.catchup(u.range[1],n),o=!1)}return i.catchupWhiteSpace(t.range[1]-1,n),i.move(t.range[1],n),o||i.append("}",n),i.append(")",n),!1}var a=e("esprima-fb").Syntax,i=e("../src/utils");n.test=function(e){if(e.type!==a.ObjectExpression)return!1;for(var t=!1,r=0;r<e.properties.length;r++){var n=e.properties[r];if(n.type===a.SpreadProperty)t=!0;else if("init"!==n.kind)return!1}return t},r.visitorList=[n]},{"../src/utils":23,"esprima-fb":9}],34:[function(e,t,r){var n=["break","do","in","typeof","case","else","instanceof","var","catch","export","new","void","class","extends","return","while","const","finally","super","with","continue","for","switch","yield","debugger","function","this","default","if","throw","delete","import","try"],a=["enum","await","implements","package","protected","static","interface","private","public"],i=["null","true","false"],o=[].concat(n,a,i),s=Object.create(null);o.forEach(function(e){s[e]=!0});var u=["enum","implements","package","protected","static","interface","private","public"],c=[].concat(n,u,i),p=Object.create(null);c.forEach(function(e){p[e]=!0}),r.isReservedWord=function(e){return!!s[e]},r.isES3ReservedWord=function(e){return!!p[e]}},{}],35:[function(e,t,r){function n(e,t,r,n){return o.catchup(t.key.range[0],n),o.append('"',n),o.catchup(t.key.range[1],n),o.append('"',n),o.catchup(t.value.range[0],n),e(t.value,r,n),!1}function a(e,t,r,n){return e(t.object,r,n),o.catchup(t.property.range[0]-1,n),o.append("[",n),o.catchupWhiteSpace(t.property.range[0],n),o.append('"',n),o.catchup(t.property.range[1],n),o.append('"]',n),!1}var i=e("esprima-fb").Syntax,o=e("../src/utils"),s=e("./reserved-words-helper");n.test=function(e){return e.type===i.Property&&e.key.type===i.Identifier&&!e.method&&!e.shorthand&&!e.computed&&s.isES3ReservedWord(e.key.name)},a.test=function(e){return e.type===i.MemberExpression&&e.property.type===i.Identifier&&s.isES3ReservedWord(e.property.name)},r.visitorList=[n,a]},{"../src/utils":23,"./reserved-words-helper":34,"esprima-fb":9}],36:[function(e,t,r){function n(e){return e.type===v.FunctionDeclaration||e.type===v.FunctionExpression||e.type===v.ArrowFunctionExpression}function a(e,t,r,n){return g.catchup(t.range[0],n),g.catchupWhiteOut(t.range[1],n),!1}function i(e,t,r,n){return g.catchupWhiteOut(t.range[1],n),!1}function o(e,t,r,n){return r.unshift(t),e(t.expression,r,n),r.shift(),g.catchup(t.typeAnnotation.range[0],n),g.catchupWhiteOut(t.typeAnnotation.range[1],n),!1}function s(e,t,r,n){return g.catchupWhiteOut(t.range[1],n),!1}function u(e,t,r,n){return g.catchupWhiteOut(t.range[1],n),!1}function c(e,t,r,n){return g.catchup(t.range[0],n),g.catchupWhiteOut(t.range[1],n),!1}function p(e,t,r,n){return g.catchup(t.range[0],n),g.catchupWhiteOut(t.range[1],n),!1}function l(e,t,r,n){return g.catchup(t.range[0]+t.name.length,n),g.catchupWhiteOut(t.range[1],n),!1}function f(e,t,r,n){return g.catchup(t.typeAnnotation.range[0],n),g.catchupWhiteOut(t.typeAnnotation.range[1],n),!1}function d(e,t,r,n){return g.catchup(t.typeAnnotation.range[0],n),g.catchupWhiteOut(t.typeAnnotation.range[1],n),!1}function m(e,t,r,n){return r.unshift(t),e(t.key,r,n),r.unshift(t.value),e(t.value.params,r,n),t.value.rest&&e(t.value.rest,r,n),t.value.returnType&&e(t.value.returnType,r,n),e(t.value.body,r,n),r.shift(),r.shift(),!1}function h(e,t,r,n){return g.catchupWhiteOut(t.range[1],n),!1}var y=e("esprima-fb"),g=e("../src/utils"),v=y.Syntax;a.test=function(e){return e.type===v.ClassProperty},i.test=function(e){return e.type===v.TypeAlias},o.test=function(e){return e.type===v.TypeCastExpression},s.test=function(e){return e.type===v.InterfaceDeclaration},u.test=function(e){switch(e.type){case v.DeclareVariable:case v.DeclareFunction:case v.DeclareClass:case v.DeclareModule:return!0}return!1},c.test=function(e,t){return e.type===v.TypeParameterDeclaration&&t[0]&&n(t[0])&&e===t[0].typeParameters},p.test=function(e,t){return t[0]&&n(t[0])&&e===t[0].returnType},l.test=function(e,t){return e.type===v.Identifier&&e.optional&&t[0]&&n(t[0])},f.test=function(e){return e.type===v.Identifier&&e.typeAnnotation},d.test=function(e){var t=e.type===v.ObjectPattern||e.type===v.ArrayPattern;return t&&e.typeAnnotation},m.test=function(e){return"Property"===e.type&&(e.method||"set"===e.kind||"get"===e.kind)||"MethodDefinition"===e.type},h.test=function(e){return"ImportDeclaration"===e.type&&e.isType},r.visitorList=[a,u,h,s,c,p,m,l,i,o,f,d]},{"../src/utils":23,"esprima-fb":9}],37:[function(e,t,r){"use strict";function n(e,t,r,n,a){var i=e.value.split(/\r\n|\n|\r/);n&&u.append(n,r);var o=0;i.forEach(function(e,t){e.match(/[^ \t]/)&&(o=t)}),i.forEach(function(e,n){var s=0===n,c=n===i.length-1,p=n===o,l=e.replace(/\t/g," ");s||(l=l.replace(/^[ ]+/,"")),c||(l=l.replace(/[ ]+$/,"")),s||u.append(e.match(/^[ \t]*/)[0],r),(l||p)&&(u.append(JSON.stringify(l)+(p?"":" + ' ' +"),r),p&&(a&&u.append(a,r),t||u.append(", ",r)),l&&!c&&u.append(e.match(/[ \t]*$/)[0],r)),c||u.append("\n",r)}),u.move(e.range[1],r)}function a(e,t,r,n,a){return u.move(t.range[0]+1,a),u.catchup(t.expression.range[0],a),e(t.expression,n,a),r||t.expression.type===s.JSXEmptyExpression||(u.catchup(t.expression.range[1],a,o),u.append(", ",a)),u.catchup(t.range[1]-1,a,o),u.move(t.range[1],a),!1}function i(e){return/^[a-z_$][a-z\d_$]*$/i.test(e)?e:'"'+e+'"'}function o(e){return e.replace(/^[ ]+/,"")}var s=e("jstransform").Syntax,u=e("jstransform/src/utils");r.renderJSXExpressionContainer=a,r.renderJSXLiteral=n,r.quoteAttrName=i,r.trimLeft=o},{jstransform:22,"jstransform/src/utils":23}],38:[function(e,t,r){"use strict";function n(e){return e.replace(f,"")}function a(e){return d.test(e)}function i(e,t,r,i){var f=t.openingElement,d=f.name,m=f.attributes;if(s.catchup(f.range[0],i,l),d.type===o.JSXNamespacedName&&d.namespace)throw new Error("Namespace tags are not supported. ReactJSX is not XML.");s.append("React.createElement(",i),d.type===o.JSXIdentifier&&a(d.name)?(s.append('"'+d.name+'"',i),s.move(d.range[1],i)):(s.move(d.range[0],i),s.catchup(d.range[1],i)),s.append(", ",i);var h=m.length,y=m.some(function(e){return e.type===o.JSXSpreadAttribute});y?s.append("React.__spread({",i):h?s.append("{",i):s.append("null",i);var g=!1;m.forEach(function(t,a){var f=a===m.length-1;if(t.type===o.JSXSpreadAttribute)return g||s.append("}, ",i),s.catchup(t.range[0],i,n),s.move(t.range[0]+1,i),s.catchup(t.argument.range[0],i,n),e(t.argument,r,i),s.catchup(t.argument.range[1],i),s.catchup(t.range[1]-1,i,n),f||s.append(", ",i),s.move(t.range[1],i),void(g=!0);if(f||(f=m[a+1].type===o.JSXSpreadAttribute),t.name.namespace)throw new Error("Namespace attributes are not supported. ReactJSX is not XML.");var d=t.name.name;s.catchup(t.range[0],i,l),g&&s.append("{",i),s.append(p(d),i),s.append(": ",i),t.value?(s.move(t.name.range[1],i),s.catchupNewlines(t.value.range[0],i),t.value.type===o.Literal?c(t.value,f,i):u(e,t.value,f,r,i)):(i.g.buffer+="true",i.g.position=t.name.range[1],f||s.append(", ",i)),s.catchup(t.range[1],i,l),g=!1}),f.selfClosing||(s.catchup(f.range[1]-1,i,l),s.move(f.range[1],i)),h&&!g&&s.append("}",i),y&&s.append(")",i);var v=t.children.filter(function(e){return!(e.type===o.Literal&&"string"==typeof e.value&&e.value.match(/^[ \t]*[\r\n][ \t\r\n]*$/))});if(v.length>0){var S;v.forEach(function(e,t){(e.type!==o.JSXExpressionContainer||e.expression.type!==o.JSXEmptyExpression)&&(S=t)}),void 0!==S&&s.append(", ",i),v.forEach(function(t,n){s.catchup(t.range[0],i,l);var a=n>=S;t.type===o.Literal?c(t,a,i):t.type===o.JSXExpressionContainer?u(e,t,a,r,i):(e(t,r,i),a||s.append(", ",i)),s.catchup(t.range[1],i,l)})}return f.selfClosing?(s.catchup(f.range[1]-2,i,l),s.move(f.range[1],i)):(s.catchup(t.closingElement.range[0],i,l),s.move(t.closingElement.range[1],i)),s.append(")",i),!1}var o=e("jstransform").Syntax,s=e("jstransform/src/utils"),u=e("./jsx").renderJSXExpressionContainer,c=e("./jsx").renderJSXLiteral,p=e("./jsx").quoteAttrName,l=e("./jsx").trimLeft,f=/([^\s\(\)])/g,d=/^[a-z]|\-/;i.test=function(e){return e.type===o.JSXElement},r.visitorList=[i]},{"./jsx":37,jstransform:22,"jstransform/src/utils":23}],39:[function(e,t,r){"use strict";function n(e,t,r){if(t&&t.type===i.CallExpression&&t.callee.type===i.MemberExpression&&t.callee.object.type===i.Identifier&&"React"===t.callee.object.name&&t.callee.property.type===i.Identifier&&"createClass"===t.callee.property.name&&1===t.arguments.length&&t.arguments[0].type===i.ObjectExpression){var n=t.arguments[0].properties,a=n.every(function(e){var t=e.key.type===i.Identifier?e.key.name:e.key.value;return"displayName"!==t});a&&(o.catchup(t.arguments[0].range[0]+1,r),o.append('displayName: "'+e+'",',r))}}function a(e,t,r,a){var o,s;t.type===i.AssignmentExpression?(o=t.left,s=t.right):t.type===i.Property?(o=t.key,s=t.value):t.type===i.VariableDeclarator&&(o=t.id,s=t.init),o&&o.type===i.MemberExpression&&(o=o.property),o&&o.type===i.Identifier&&n(o.name,s,a)}var i=e("jstransform").Syntax,o=e("jstransform/src/utils");a.test=function(e){return e.type===i.AssignmentExpression||e.type===i.Property||e.type===i.VariableDeclarator},r.visitorList=[a]},{jstransform:22,"jstransform/src/utils":23}],40:[function(e,t,r){"use strict";function n(e){for(var t=[],r=0,n=S.length;n>r;r++)e&&-1!==e.indexOf(S[r])||(t=t.concat(g[S[r]]));return t}function a(e){for(var t=e.reduce(function(e,t){if(!v.hasOwnProperty(t))throw new Error("Unknown visitor set: "+t);return v[t].forEach(function(t){e[t]=!0}),e},{}),r=[],n=0;n<S.length;n++)t.hasOwnProperty(S[n])&&(r=r.concat(g[S[n]]));return r}var i=e("jstransform/visitors/es6-arrow-function-visitors"),o=e("jstransform/visitors/es6-class-visitors"),s=e("jstransform/visitors/es6-destructuring-visitors"),u=e("jstransform/visitors/es6-object-concise-method-visitors"),c=e("jstransform/visitors/es6-object-short-notation-visitors"),p=e("jstransform/visitors/es6-rest-param-visitors"),l=e("jstransform/visitors/es6-template-visitors"),f=e("jstransform/visitors/es6-call-spread-visitors"),d=e("jstransform/visitors/es7-spread-property-visitors"),m=e("./transforms/react"),h=e("./transforms/reactDisplayName"),y=e("jstransform/visitors/reserved-words-visitors"),g={"es6-arrow-functions":i.visitorList,"es6-classes":o.visitorList,"es6-destructuring":s.visitorList,"es6-object-concise-method":u.visitorList,"es6-object-short-notation":c.visitorList,"es6-rest-params":p.visitorList,"es6-templates":l.visitorList,"es6-call-spread":f.visitorList,"es7-spread-property":d.visitorList,react:m.visitorList.concat(h.visitorList),"reserved-words":y.visitorList},v={harmony:["es6-arrow-functions","es6-object-concise-method","es6-object-short-notation","es6-classes","es6-rest-params","es6-templates","es6-destructuring","es6-call-spread","es7-spread-property"],es3:["reserved-words"],react:["react"]},S=["reserved-words","es6-arrow-functions","es6-object-concise-method","es6-object-short-notation","es6-classes","es6-rest-params","es6-templates","es6-destructuring","es6-call-spread","es7-spread-property","react"];
r.getVisitorsBySet=a,r.getAllVisitors=n,r.transformVisitors=g},{"./transforms/react":38,"./transforms/reactDisplayName":39,"jstransform/visitors/es6-arrow-function-visitors":24,"jstransform/visitors/es6-call-spread-visitors":25,"jstransform/visitors/es6-class-visitors":26,"jstransform/visitors/es6-destructuring-visitors":27,"jstransform/visitors/es6-object-concise-method-visitors":28,"jstransform/visitors/es6-object-short-notation-visitors":29,"jstransform/visitors/es6-rest-param-visitors":30,"jstransform/visitors/es6-template-visitors":31,"jstransform/visitors/es7-spread-property-visitors":33,"jstransform/visitors/reserved-words-visitors":35}],41:[function(e,t){"use strict";function r(e,t,r){var a=e;"function"==typeof e.toJSON&&(a=e.toJSON()),a.sources=[r],a.sourcesContent=[t];var i=n(JSON.stringify(a)).toString("base64");return"//# sourceMappingURL=data:application/json;base64,"+i}var n=e("buffer").Buffer;t.exports=r},{buffer:3}]},{},[1])(1)});
//# sourceMappingURL=data:application/json;base64,